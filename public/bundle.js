!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=152)}([function(e,t,n){"use strict";e.exports=n(356)},function(e,t,n){var r=n(5),i=n(23),o=n(15),a=n(16),s=n(24),u=function(e,t,n){var l,c,f,h,p=e&u.F,d=e&u.G,v=e&u.S,_=e&u.P,y=e&u.B,g=d?r:v?r[t]||(r[t]={}):(r[t]||{}).prototype,m=d?i:i[t]||(i[t]={}),b=m.prototype||(m.prototype={});for(l in d&&(n=t),n)f=((c=!p&&g&&void 0!==g[l])?g:n)[l],h=y&&c?s(f,r):_&&"function"==typeof f?s(Function.call,f):f,g&&a(g,l,f,e&u.U),m[l]!=f&&o(m,l,h),_&&b[l]!=f&&(b[l]=f)};r.core=i,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i,o=n(360),a=n(99),s=n(141),u=n(142),l=((r={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",r["bad-app-name"]="Illegal App name: '{$appName}",r["duplicate-app"]="Firebase App named '{$appName}' already exists",r["app-deleted"]="Firebase App named '{$appName}' already deleted",r["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",r["invalid-log-argument"]="First argument to `onLog` must be null or a function.",r),c=new a.ErrorFactory("app","Firebase",l),f=((i={})["@firebase/app"]="fire-core",i["@firebase/analytics"]="fire-analytics",i["@firebase/auth"]="fire-auth",i["@firebase/database"]="fire-rtdb",i["@firebase/functions"]="fire-fn",i["@firebase/installations"]="fire-iid",i["@firebase/messaging"]="fire-fcm",i["@firebase/performance"]="fire-perf",i["@firebase/remote-config"]="fire-rc",i["@firebase/storage"]="fire-gcs",i["@firebase/firestore"]="fire-fst",i["fire-js"]="fire-js",i["firebase-wrapper"]="fire-js-all",i),h=new u.Logger("@firebase/app"),p=function(){function e(e,t,n){var r,i,u=this;this.firebase_=n,this.isDeleted_=!1,this.name_=t.name,this.automaticDataCollectionEnabled_=t.automaticDataCollectionEnabled||!1,this.options_=a.deepCopy(e),this.container=new s.ComponentContainer(t.name),this._addComponent(new s.Component("app",(function(){return u}),"PUBLIC"));try{for(var l=o.__values(this.firebase_.INTERNAL.components.values()),c=l.next();!c.done;c=l.next()){var f=c.value;this._addComponent(f)}}catch(e){r={error:e}}finally{try{c&&!c.done&&(i=l.return)&&i.call(l)}finally{if(r)throw r.error}}}return Object.defineProperty(e.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(e){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),e.prototype.delete=function(){var e=this;return new Promise((function(t){e.checkDestroyed_(),t()})).then((function(){return e.firebase_.INTERNAL.removeApp(e.name_),Promise.all(e.container.getProviders().map((function(e){return e.delete()})))})).then((function(){e.isDeleted_=!0}))},e.prototype._getService=function(e,t){return void 0===t&&(t="[DEFAULT]"),this.checkDestroyed_(),this.container.getProvider(e).getImmediate({identifier:t})},e.prototype._removeServiceInstance=function(e,t){void 0===t&&(t="[DEFAULT]"),this.container.getProvider(e).clearInstance(t)},e.prototype._addComponent=function(e){try{this.container.addComponent(e)}catch(t){h.debug("Component "+e.name+" failed to register with FirebaseApp "+this.name,t)}},e.prototype._addOrOverwriteComponent=function(e){this.container.addOrOverwriteComponent(e)},e.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw c.create("app-deleted",{appName:this.name_})},e}();p.prototype.name&&p.prototype.options||p.prototype.delete||console.log("dc");var d=
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function e(){var t=
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e){var t={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={});if("object"!=typeof i||null===i){i={name:i}}var o=i;void 0===o.name&&(o.name="[DEFAULT]");var s=o.name;if("string"!=typeof s||!s)throw c.create("bad-app-name",{appName:String(s)});if(a.contains(t,s))throw c.create("duplicate-app",{appName:s});var u=new e(n,o,r);return t[s]=u,u},app:i,registerVersion:function(e,t,n){var r,i=null!==(r=f[e])&&void 0!==r?r:e;n&&(i+="-"+n);var o=i.match(/\s|\//),a=t.match(/\s|\//);if(o||a){var u=['Unable to register library "'+i+'" with version "'+t+'":'];return o&&u.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),o&&a&&u.push("and"),a&&u.push('version name "'+t+'" contains illegal characters (whitespace or "/")'),void h.warn(u.join(" "))}l(new s.Component(i+"-version",(function(){return{library:i,version:t}}),"VERSION"))},setLogLevel:u.setLogLevel,onLog:function(e,t){if(null!==e&&"function"!=typeof e)throw c.create("invalid-log-argument",{appName:name});u.setUserLogHandler(e,t)},apps:null,SDK_VERSION:"7.15.0",INTERNAL:{registerComponent:l,removeApp:function(e){delete t[e]},components:n,useAsService:function(e,t){if("serverAuth"===t)return null;return t}}};function i(e){if(e=e||"[DEFAULT]",!a.contains(t,e))throw c.create("no-app",{appName:e});return t[e]}function l(s){var u,l,f=s.name;if(n.has(f))return h.debug("There were multiple attempts to register component "+f+"."),"PUBLIC"===s.type?r[f]:null;if(n.set(f,s),"PUBLIC"===s.type){var p=function(e){if(void 0===e&&(e=i()),"function"!=typeof e[f])throw c.create("invalid-app-argument",{appName:f});return e[f]()};void 0!==s.serviceProps&&a.deepExtend(p,s.serviceProps),r[f]=p,e.prototype[f]=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this._getService.bind(this,f);return n.apply(this,s.multipleInstances?e:[])}}try{for(var d=o.__values(Object.keys(t)),v=d.next();!v.done;v=d.next()){var _=v.value;t[_]._addComponent(s)}}catch(e){u={error:e}}finally{try{v&&!v.done&&(l=d.return)&&l.call(d)}finally{if(u)throw u.error}}return"PUBLIC"===s.type?r[f]:null}return r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(t).map((function(e){return t[e]}))}}),i.App=e,r}(p);return t.INTERNAL=o.__assign(o.__assign({},t.INTERNAL),{createFirebaseNamespace:e,extendNamespace:function(e){a.deepExtend(t,e)},createSubscribe:a.createSubscribe,ErrorFactory:a.ErrorFactory,deepExtend:a.deepExtend}),t}(),v=function(){function e(e){this.container=e}return e.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(e){if(function(e){var t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(e)){var t=e.getImmediate();return t.library+"/"+t.version}return null})).filter((function(e){return e})).join(" ")},e}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
if(a.isBrowser()&&void 0!==self.firebase){h.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var _=self.firebase.SDK_VERSION;_&&_.indexOf("LITE")>=0&&h.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var y=d.initializeApp;d.initializeApp=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return a.isNode()&&h.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      '),y.apply(void 0,e)};var g=d;!function(e,t){e.INTERNAL.registerComponent(new s.Component("platform-logger",(function(e){return new v(e)}),"PRIVATE")),e.registerVersion("@firebase/app","0.6.5",t),e.registerVersion("fire-js","")}(g),t.default=g,t.firebase=g},function(e,t,n){var r=n(8);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return y}));var r,i=n(0),o=n.n(i);function a(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){f(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}(r="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&r(e);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function p(e){var t=e.bg,n=e.border,r=e.children;return o.a.createElement("div",{class:"expandable-note",style:{backgroundColor:t,borderColor:n}},r)}function d(e){var t=e.size,n=e.family,r=void 0===n?"Arial":n,i=e.fstyle,a=void 0===i?"normal":i,s=e.children,l=e.style,f=h(e,["size","family","fstyle","children","style"]);return o.a.createElement("div",u({style:c({fontSize:t,fontStyle:a,fontFamily:r},l)},f),s)}var v,_,y={NOT_ENTERED:0,PLACING:1,READY:2,GUESSING:3,WAITING:4,LOST:5,WON:7};Array.prototype.remove=function(e){var t=a(this),n=t.indexOf(e);return n>-1&&t.splice(n,1),t},(v="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(v.register(p,"Note","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\utils.jsx"),v.register(d,"Font","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\utils.jsx"),v.register(y,"status","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\utils.jsx")),(_="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&_(e)}).call(this,n(22)(e))},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){"use strict";(function(e){n.d(t,"g",(function(){return f})),n.d(t,"c",(function(){return p})),n.d(t,"e",(function(){return v})),n.d(t,"d",(function(){return _})),n.d(t,"f",(function(){return g})),n.d(t,"b",(function(){return w})),n.d(t,"a",(function(){return T}));var r,i=n(102),o=n(4);function a(e,t,n,r,i,o,a){try{var s=e[o](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,i)}function s(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function s(e){a(o,r,i,s,u,"next",e)}function u(e){a(o,r,i,s,u,"throw",e)}s(void 0)}))}}(r="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&r(e);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var u,l,c={},f={get:function(){return c},set:function(e){Object.assign(c,e)},reinit:function(){h()}};function h(){var e=c.authId;c={isPlaying:!1,isPlayer1:null,gameId:null,temporaryGameId:null,dbGame:null,get dbKey(){return this.isPlayer1?"player1Status":"player2Status"},db:i.a.database(),authId:e}}function p(){h(),i.a.auth().signInAnonymously().then((function(e){e.user.getIdToken().then((function(e){return c.authId=e}))})),window.onbeforeunload=function(){T()},window.onunload=T,window.chrome&&(chrome.app.window.current().onClosed=T)}function d(e){return c.db.ref("/Games").push({status:(e?"public":"private")+" new",player1Status:o.b.PLACING,player2Status:o.b.NOT_ENTERED})}function v(){c.db;var e=d(!1);return f.set({isPlaying:!0,isPlayer1:!0,gameId:e.key,dbGame:e,initialPartnerStatus:-1}),b(e),e}function _(e){return y.apply(this,arguments)}function y(){return(y=s(regeneratorRuntime.mark((function e(t){var n,r,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=c.db,r=n.ref("Games").child(t),e.next=4,r.once("value");case 4:i=e.sent.val().player1Status,f.set({isPlaying:!0,isPlayer1:!1,gameId:t,dbGame:r,initialPartnerStatus:i}),b(r),w({status:"private active",player2Status:o.b.PLACING,player1Turn:!0,question:null,answer:null}),app.setState({page:"game"});case 9:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function g(){return m.apply(this,arguments)}function m(){return(m=s(regeneratorRuntime.mark((function e(){var t,n,r,i,a,s,u,l,h;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=c.db,n=t.ref("/Games"),e.next=4,n.orderByChild("status").equalTo("public new").once("value");case 4:if(e.t0=e.sent.val(),e.t0){e.next=7;break}e.t0={};case 7:s=e.t0,0!=(u=Object.keys(s).length)?(l=Math.floor(Math.random()*u),r=Object.keys(s)[l],h=n.child(r),i=!1,a=h.player1Status,w({status:"public active",player2Status:o.b.PLACING,player1Turn:!0,question:null,answer:null},n.child(r))):(r=d(!0).key,i=!0,a=o.b.NOT_ENTERED),f.set({isPlayer1:i,gameId:r,dbGame:n.child(r),initialPartnerStatus:a}),b(n.child(r));case 12:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function b(e){var t=c.isPlayer1?2:1;e.child("player".concat(3-t,"Status")).on("value",(function(e){var t;return null===(t=c.gameComponent)||void 0===t?void 0:t.onOwnStatusChanged(e.val())})),e.child("player".concat(t,"Status")).on("value",(function(e){var t;return null===(t=c.gameComponent)||void 0===t?void 0:t.onPartnerStatusChanged(e.val())})),e.child("question").on("value",(function(e){var t;return null===(t=c.gameComponent)||void 0===t?void 0:t.onQuestion(e.val())})),e.child("answer").on("value",(function(e){var t;return null===(t=c.gameComponent)||void 0===t?void 0:t.onAnswer(e.val())}))}function w(e,t){t||(t=c.dbGame);for(var n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];t.child(i).set(e[i])}}function E(){c.dbGame}function T(){return C.apply(this,arguments)}function C(){return(C=s(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=c.gameId,c.isPlaying&&fetch("https://airplanes-on-a-grid.firebaseio.com/Games/".concat(t,".json?auth=").concat(c.authId),{method:"DELETE",keepalive:!0}),f.reinit();case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}(u="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(u.register(c,"_user","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\user.js"),u.register(f,"user","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\user.js"),u.register(h,"_init_user","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\user.js"),u.register(p,"initUser","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\user.js"),u.register(d,"createGame","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\user.js"),u.register(v,"privateGame","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\user.js"),u.register(_,"joinPrivateGame","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\user.js"),u.register(g,"publicGame","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\user.js"),u.register(b,"setupChannels","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\user.js"),u.register(w,"dbSet","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\user.js"),u.register(E,"detachListeners","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\user.js"),u.register(T,"abortGame","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\user.js")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(e)}).call(this,n(22)(e))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(52)("wks"),i=n(38),o=n(5).Symbol,a="function"==typeof o;(e.exports=function(e){return r[e]||(r[e]=a&&o[e]||(a?o:i)("Symbol."+e))}).store=r},function(e,t,n){var r=n(26),i=Math.min;e.exports=function(e){return e>0?i(r(e),9007199254740991):0}},function(e,t,n){e.exports=!n(7)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(3),i=n(104),o=n(28),a=Object.defineProperty;t.f=n(11)?Object.defineProperty:function(e,t,n){if(r(e),t=o(t,!0),r(n),i)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(29);e.exports=function(e){return Object(r(e))}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(12),i=n(37);e.exports=n(11)?function(e,t,n){return r.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(5),i=n(15),o=n(18),a=n(38)("src"),s=n(156),u=(""+s).split("toString");n(23).inspectSource=function(e){return s.call(e)},(e.exports=function(e,t,n,s){var l="function"==typeof n;l&&(o(n,"name")||i(n,"name",t)),e[t]!==n&&(l&&(o(n,a)||i(n,a,e[t]?""+e[t]:u.join(String(t)))),e===r?e[t]=n:s?e[t]?e[t]=n:i(e,t,n):(delete e[t],i(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[a]||s.call(this)}))},function(e,t,n){var r=n(1),i=n(7),o=n(29),a=/"/g,s=function(e,t,n,r){var i=String(o(e)),s="<"+t;return""!==n&&(s+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),s+">"+i+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(s),r(r.P+r.F*i((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",n)}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(53),i=n(29);e.exports=function(e){return r(i(e))}},function(e,t,n){var r=n(54),i=n(37),o=n(19),a=n(28),s=n(18),u=n(104),l=Object.getOwnPropertyDescriptor;t.f=n(11)?l:function(e,t){if(e=o(e),t=a(t,!0),u)try{return l(e,t)}catch(e){}if(s(e,t))return i(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(18),i=n(13),o=n(74)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=i(e),r(e,o)?e[o]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){var n=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(14);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){"use strict";var r=n(7);e.exports=function(e,t){return!!e&&r((function(){t?e.call(null,(function(){}),1):e.call(null)}))}},function(e,t,n){var r=n(8);e.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(1),i=n(23),o=n(7);e.exports=function(e,t){var n=(i.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*o((function(){n(1)})),"Object",a)}},function(e,t,n){var r=n(24),i=n(53),o=n(13),a=n(10),s=n(90);e.exports=function(e,t){var n=1==e,u=2==e,l=3==e,c=4==e,f=6==e,h=5==e||f,p=t||s;return function(t,s,d){for(var v,_,y=o(t),g=i(y),m=r(s,d,3),b=a(g.length),w=0,E=n?p(t,b):u?p(t,0):void 0;b>w;w++)if((h||w in g)&&(_=m(v=g[w],w,y),e))if(n)E[w]=_;else if(_)switch(e){case 3:return!0;case 5:return v;case 6:return w;case 2:E.push(v)}else if(c)return!1;return f?-1:l||c?c:E}}},function(e,t,n){"use strict";if(n(11)){var r=n(34),i=n(5),o=n(7),a=n(1),s=n(68),u=n(98),l=n(24),c=n(44),f=n(37),h=n(15),p=n(46),d=n(26),v=n(10),_=n(132),y=n(40),g=n(28),m=n(18),b=n(49),w=n(8),E=n(13),T=n(87),C=n(41),S=n(21),P=n(42).f,O=n(89),I=n(38),k=n(9),x=n(31),A=n(58),D=n(56),N=n(92),R=n(51),M=n(63),L=n(43),F=n(91),j=n(121),U=n(12),W=n(20),B=U.f,H=W.f,K=i.RangeError,V=i.TypeError,G=i.Uint8Array,q=Array.prototype,z=u.ArrayBuffer,Q=u.DataView,Y=x(0),$=x(2),X=x(3),J=x(4),Z=x(5),ee=x(6),te=A(!0),ne=A(!1),re=N.values,ie=N.keys,oe=N.entries,ae=q.lastIndexOf,se=q.reduce,ue=q.reduceRight,le=q.join,ce=q.sort,fe=q.slice,he=q.toString,pe=q.toLocaleString,de=k("iterator"),ve=k("toStringTag"),_e=I("typed_constructor"),ye=I("def_constructor"),ge=s.CONSTR,me=s.TYPED,be=s.VIEW,we=x(1,(function(e,t){return Pe(D(e,e[ye]),t)})),Ee=o((function(){return 1===new G(new Uint16Array([1]).buffer)[0]})),Te=!!G&&!!G.prototype.set&&o((function(){new G(1).set({})})),Ce=function(e,t){var n=d(e);if(n<0||n%t)throw K("Wrong offset!");return n},Se=function(e){if(w(e)&&me in e)return e;throw V(e+" is not a typed array!")},Pe=function(e,t){if(!w(e)||!(_e in e))throw V("It is not a typed array constructor!");return new e(t)},Oe=function(e,t){return Ie(D(e,e[ye]),t)},Ie=function(e,t){for(var n=0,r=t.length,i=Pe(e,r);r>n;)i[n]=t[n++];return i},ke=function(e,t,n){B(e,t,{get:function(){return this._d[n]}})},xe=function(e){var t,n,r,i,o,a,s=E(e),u=arguments.length,c=u>1?arguments[1]:void 0,f=void 0!==c,h=O(s);if(null!=h&&!T(h)){for(a=h.call(s),r=[],t=0;!(o=a.next()).done;t++)r.push(o.value);s=r}for(f&&u>2&&(c=l(c,arguments[2],2)),t=0,n=v(s.length),i=Pe(this,n);n>t;t++)i[t]=f?c(s[t],t):s[t];return i},Ae=function(){for(var e=0,t=arguments.length,n=Pe(this,t);t>e;)n[e]=arguments[e++];return n},De=!!G&&o((function(){pe.call(new G(1))})),Ne=function(){return pe.apply(De?fe.call(Se(this)):Se(this),arguments)},Re={copyWithin:function(e,t){return j.call(Se(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return J(Se(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return F.apply(Se(this),arguments)},filter:function(e){return Oe(this,$(Se(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return Z(Se(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return ee(Se(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){Y(Se(this),e,arguments.length>1?arguments[1]:void 0)},indexOf:function(e){return ne(Se(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return te(Se(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return le.apply(Se(this),arguments)},lastIndexOf:function(e){return ae.apply(Se(this),arguments)},map:function(e){return we(Se(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return se.apply(Se(this),arguments)},reduceRight:function(e){return ue.apply(Se(this),arguments)},reverse:function(){for(var e,t=Se(this).length,n=Math.floor(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this},some:function(e){return X(Se(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return ce.call(Se(this),e)},subarray:function(e,t){var n=Se(this),r=n.length,i=y(e,r);return new(D(n,n[ye]))(n.buffer,n.byteOffset+i*n.BYTES_PER_ELEMENT,v((void 0===t?r:y(t,r))-i))}},Me=function(e,t){return Oe(this,fe.call(Se(this),e,t))},Le=function(e){Se(this);var t=Ce(arguments[1],1),n=this.length,r=E(e),i=v(r.length),o=0;if(i+t>n)throw K("Wrong length!");for(;o<i;)this[t+o]=r[o++]},Fe={entries:function(){return oe.call(Se(this))},keys:function(){return ie.call(Se(this))},values:function(){return re.call(Se(this))}},je=function(e,t){return w(e)&&e[me]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Ue=function(e,t){return je(e,t=g(t,!0))?f(2,e[t]):H(e,t)},We=function(e,t,n){return!(je(e,t=g(t,!0))&&w(n)&&m(n,"value"))||m(n,"get")||m(n,"set")||n.configurable||m(n,"writable")&&!n.writable||m(n,"enumerable")&&!n.enumerable?B(e,t,n):(e[t]=n.value,e)};ge||(W.f=Ue,U.f=We),a(a.S+a.F*!ge,"Object",{getOwnPropertyDescriptor:Ue,defineProperty:We}),o((function(){he.call({})}))&&(he=pe=function(){return le.call(this)});var Be=p({},Re);p(Be,Fe),h(Be,de,Fe.values),p(Be,{slice:Me,set:Le,constructor:function(){},toString:he,toLocaleString:Ne}),ke(Be,"buffer","b"),ke(Be,"byteOffset","o"),ke(Be,"byteLength","l"),ke(Be,"length","e"),B(Be,ve,{get:function(){return this[me]}}),e.exports=function(e,t,n,u){var l=e+((u=!!u)?"Clamped":"")+"Array",f="get"+e,p="set"+e,d=i[l],y=d||{},g=d&&S(d),m=!d||!s.ABV,E={},T=d&&d.prototype,O=function(e,n){B(e,n,{get:function(){return function(e,n){var r=e._d;return r.v[f](n*t+r.o,Ee)}(this,n)},set:function(e){return function(e,n,r){var i=e._d;u&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[p](n*t+i.o,r,Ee)}(this,n,e)},enumerable:!0})};m?(d=n((function(e,n,r,i){c(e,d,l,"_d");var o,a,s,u,f=0,p=0;if(w(n)){if(!(n instanceof z||"ArrayBuffer"==(u=b(n))||"SharedArrayBuffer"==u))return me in n?Ie(d,n):xe.call(d,n);o=n,p=Ce(r,t);var y=n.byteLength;if(void 0===i){if(y%t)throw K("Wrong length!");if((a=y-p)<0)throw K("Wrong length!")}else if((a=v(i)*t)+p>y)throw K("Wrong length!");s=a/t}else s=_(n),o=new z(a=s*t);for(h(e,"_d",{b:o,o:p,l:a,e:s,v:new Q(o)});f<s;)O(e,f++)})),T=d.prototype=C(Be),h(T,"constructor",d)):o((function(){d(1)}))&&o((function(){new d(-1)}))&&M((function(e){new d,new d(null),new d(1.5),new d(e)}),!0)||(d=n((function(e,n,r,i){var o;return c(e,d,l),w(n)?n instanceof z||"ArrayBuffer"==(o=b(n))||"SharedArrayBuffer"==o?void 0!==i?new y(n,Ce(r,t),i):void 0!==r?new y(n,Ce(r,t)):new y(n):me in n?Ie(d,n):xe.call(d,n):new y(_(n))})),Y(g!==Function.prototype?P(y).concat(P(g)):P(y),(function(e){e in d||h(d,e,y[e])})),d.prototype=T,r||(T.constructor=d));var I=T[de],k=!!I&&("values"==I.name||null==I.name),x=Fe.values;h(d,_e,!0),h(T,me,l),h(T,be,!0),h(T,ye,d),(u?new d(1)[ve]==l:ve in T)||B(T,ve,{get:function(){return l}}),E[l]=d,a(a.G+a.W+a.F*(d!=y),E),a(a.S,l,{BYTES_PER_ELEMENT:t}),a(a.S+a.F*o((function(){y.of.call(d,1)})),l,{from:xe,of:Ae}),"BYTES_PER_ELEMENT"in T||h(T,"BYTES_PER_ELEMENT",t),a(a.P,l,Re),L(l),a(a.P+a.F*Te,l,{set:Le}),a(a.P+a.F*!k,l,Fe),r||T.toString==he||(T.toString=he),a(a.P+a.F*o((function(){new d(1).slice()})),l,{slice:Me}),a(a.P+a.F*(o((function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()}))||!o((function(){T.toLocaleString.call([1,2])}))),l,{toLocaleString:Ne}),R[l]=k?I:x,r||k||h(T,de,x)}}else e.exports=function(){}},function(e,t,n){var r=n(127),i=n(1),o=n(52)("metadata"),a=o.store||(o.store=new(n(130))),s=function(e,t,n){var i=a.get(e);if(!i){if(!n)return;a.set(e,i=new r)}var o=i.get(t);if(!o){if(!n)return;i.set(t,o=new r)}return o};e.exports={store:a,map:s,has:function(e,t,n){var r=s(t,n,!1);return void 0!==r&&r.has(e)},get:function(e,t,n){var r=s(t,n,!1);return void 0===r?void 0:r.get(e)},set:function(e,t,n,r){s(n,r,!0).set(e,t)},keys:function(e,t){var n=s(e,t,!1),r=[];return n&&n.forEach((function(e,t){r.push(t)})),r},key:function(e){return void 0===e||"symbol"==typeof e?e:String(e)},exp:function(e){i(i.S,"Reflect",e)}}},function(e,t){e.exports=!1},function(e,t,n){var r=n(38)("meta"),i=n(8),o=n(18),a=n(12).f,s=0,u=Object.isExtensible||function(){return!0},l=!n(7)((function(){return u(Object.preventExtensions({}))})),c=function(e){a(e,r,{value:{i:"O"+ ++s,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!o(e,r)){if(!u(e))return"F";if(!t)return"E";c(e)}return e[r].i},getWeak:function(e,t){if(!o(e,r)){if(!u(e))return!0;if(!t)return!1;c(e)}return e[r].w},onFreeze:function(e){return l&&f.NEED&&u(e)&&!o(e,r)&&c(e),e}}},function(e,t,n){var r=n(9)("unscopables"),i=Array.prototype;null==i[r]&&n(15)(i,r,{}),e.exports=function(e){i[r][e]=!0}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var r=n(106),i=n(75);e.exports=Object.keys||function(e){return r(e,i)}},function(e,t,n){var r=n(26),i=Math.max,o=Math.min;e.exports=function(e,t){return(e=r(e))<0?i(e+t,0):o(e,t)}},function(e,t,n){var r=n(3),i=n(107),o=n(75),a=n(74)("IE_PROTO"),s=function(){},u=function(){var e,t=n(72)("iframe"),r=o.length;for(t.style.display="none",n(76).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;r--;)delete u.prototype[o[r]];return u()};e.exports=Object.create||function(e,t){var n;return null!==e?(s.prototype=r(e),n=new s,s.prototype=null,n[a]=e):n=u(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(106),i=n(75).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,i)}},function(e,t,n){"use strict";var r=n(5),i=n(12),o=n(11),a=n(9)("species");e.exports=function(e){var t=r[e];o&&t&&!t[a]&&i.f(t,a,{configurable:!0,get:function(){return this}})}},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var r=n(24),i=n(119),o=n(87),a=n(3),s=n(10),u=n(89),l={},c={};(t=e.exports=function(e,t,n,f,h){var p,d,v,_,y=h?function(){return e}:u(e),g=r(n,f,t?2:1),m=0;if("function"!=typeof y)throw TypeError(e+" is not iterable!");if(o(y)){for(p=s(e.length);p>m;m++)if((_=t?g(a(d=e[m])[0],d[1]):g(e[m]))===l||_===c)return _}else for(v=y.call(e);!(d=v.next()).done;)if((_=i(v,g,d.value,t))===l||_===c)return _}).BREAK=l,t.RETURN=c},function(e,t,n){var r=n(16);e.exports=function(e,t,n){for(var i in t)r(e,i,t[i],n);return e}},function(e,t,n){var r=n(8);e.exports=function(e,t){if(!r(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t,n){var r=n(12).f,i=n(18),o=n(9)("toStringTag");e.exports=function(e,t,n){e&&!i(e=n?e:e.prototype,o)&&r(e,o,{configurable:!0,value:t})}},function(e,t,n){var r=n(25),i=n(9)("toStringTag"),o="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),i))?n:o?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,n){var r=n(1),i=n(29),o=n(7),a=n(78),s="["+a+"]",u=RegExp("^"+s+s+"*"),l=RegExp(s+s+"*$"),c=function(e,t,n){var i={},s=o((function(){return!!a[e]()||"​"!="​"[e]()})),u=i[e]=s?t(f):a[e];n&&(i[n]=u),r(r.P+r.F*s,"String",i)},f=c.trim=function(e,t){return e=String(i(e)),1&t&&(e=e.replace(u,"")),2&t&&(e=e.replace(l,"")),e};e.exports=c},function(e,t){e.exports={}},function(e,t,n){var r=n(23),i=n(5),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(34)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(25);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){"use strict";var r=n(3);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){var r=n(3),i=n(14),o=n(9)("species");e.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||null==(n=r(a)[o])?t:i(n)}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(19),i=n(10),o=n(40);e.exports=function(e){return function(t,n,a){var s,u=r(t),l=i(u.length),c=o(a,l);if(e&&n!=n){for(;l>c;)if((s=u[c++])!=s)return!0}else for(;l>c;c++)if((e||c in u)&&u[c]===n)return e||c||0;return!e&&-1}}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(25);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(26),i=n(29);e.exports=function(e){return function(t,n){var o,a,s=String(i(t)),u=r(n),l=s.length;return u<0||u>=l?e?"":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===l||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):o:e?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}}},function(e,t,n){var r=n(8),i=n(25),o=n(9)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[o])?!!t:"RegExp"==i(e))}},function(e,t,n){var r=n(9)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!i)return!1;var n=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:n=!0}},o[r]=function(){return a},e(o)}catch(e){}return n}},function(e,t,n){"use strict";var r=n(49),i=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var o=n.call(e,t);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(e,t)}},function(e,t,n){"use strict";n(123);var r=n(16),i=n(15),o=n(7),a=n(29),s=n(9),u=n(93),l=s("species"),c=!o((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var h=s(e),p=!o((function(){var t={};return t[h]=function(){return 7},7!=""[e](t)})),d=p?!o((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[l]=function(){return n}),n[h](""),!t})):void 0;if(!p||!d||"replace"===e&&!c||"split"===e&&!f){var v=/./[h],_=n(a,h,""[e],(function(e,t,n,r,i){return t.exec===u?p&&!i?{done:!0,value:v.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),y=_[0],g=_[1];r(String.prototype,e,y),i(RegExp.prototype,h,2==t?function(e,t){return g.call(e,this,t)}:function(e){return g.call(e,this)})}}},function(e,t,n){var r=n(5).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){"use strict";var r=n(5),i=n(1),o=n(16),a=n(46),s=n(35),u=n(45),l=n(44),c=n(8),f=n(7),h=n(63),p=n(48),d=n(79);e.exports=function(e,t,n,v,_,y){var g=r[e],m=g,b=_?"set":"add",w=m&&m.prototype,E={},T=function(e){var t=w[e];o(w,e,"delete"==e||"has"==e?function(e){return!(y&&!c(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return y&&!c(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof m&&(y||w.forEach&&!f((function(){(new m).entries().next()})))){var C=new m,S=C[b](y?{}:-0,1)!=C,P=f((function(){C.has(1)})),O=h((function(e){new m(e)})),I=!y&&f((function(){for(var e=new m,t=5;t--;)e[b](t,t);return!e.has(-0)}));O||((m=t((function(t,n){l(t,m,e);var r=d(new g,t,m);return null!=n&&u(n,_,r[b],r),r}))).prototype=w,w.constructor=m),(P||I)&&(T("delete"),T("has"),_&&T("get")),(I||S)&&T(b),y&&w.clear&&delete w.clear}else m=v.getConstructor(t,e,_,b),a(m.prototype,n),s.NEED=!0;return p(m,e),E[e]=m,i(i.G+i.W+i.F*(m!=g),E),y||v.setStrong(m,e,_),m}},function(e,t,n){for(var r,i=n(5),o=n(15),a=n(38),s=a("typed_array"),u=a("view"),l=!(!i.ArrayBuffer||!i.DataView),c=l,f=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=i[h[f++]])?(o(r.prototype,s,!0),o(r.prototype,u,!0)):c=!1;e.exports={ABV:l,CONSTR:c,TYPED:s,VIEW:u}},function(e,t,n){"use strict";e.exports=n(34)||!n(7)((function(){var e=Math.random();__defineSetter__.call(null,e,(function(){})),delete n(5)[e]}))},function(e,t,n){"use strict";var r=n(1);e.exports=function(e){r(r.S,e,{of:function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}})}},function(e,t,n){"use strict";var r=n(1),i=n(14),o=n(24),a=n(45);e.exports=function(e){r(r.S,e,{from:function(e){var t,n,r,s,u=arguments[1];return i(this),(t=void 0!==u)&&i(u),null==e?new this:(n=[],t?(r=0,s=o(u,arguments[2],2),a(e,!1,(function(e){n.push(s(e,r++))}))):a(e,!1,n.push,n),new this(n))}})}},function(e,t,n){var r=n(8),i=n(5).document,o=r(i)&&r(i.createElement);e.exports=function(e){return o?i.createElement(e):{}}},function(e,t,n){var r=n(5),i=n(23),o=n(34),a=n(105),s=n(12).f;e.exports=function(e){var t=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},function(e,t,n){var r=n(52)("keys"),i=n(38);e.exports=function(e){return r[e]||(r[e]=i(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(5).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(8),i=n(3),o=function(e,t){if(i(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(24)(Function.call,n(20).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return o(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:o}},function(e,t){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(e,t,n){var r=n(8),i=n(77).set;e.exports=function(e,t,n){var o,a=t.constructor;return a!==n&&"function"==typeof a&&(o=a.prototype)!==n.prototype&&r(o)&&i&&i(e,o),e}},function(e,t,n){"use strict";var r=n(26),i=n(29);e.exports=function(e){var t=String(i(this)),n="",o=r(e);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(t+=t))1&o&&(n+=t);return n}},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t){var n=Math.expm1;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:n},function(e,t,n){"use strict";var r=n(34),i=n(1),o=n(16),a=n(15),s=n(51),u=n(84),l=n(48),c=n(21),f=n(9)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,d,v,_,y){u(n,t,d);var g,m,b,w=function(e){if(!h&&e in S)return S[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},E=t+" Iterator",T="values"==v,C=!1,S=e.prototype,P=S[f]||S["@@iterator"]||v&&S[v],O=P||w(v),I=v?T?w("entries"):O:void 0,k="Array"==t&&S.entries||P;if(k&&(b=c(k.call(new e)))!==Object.prototype&&b.next&&(l(b,E,!0),r||"function"==typeof b[f]||a(b,f,p)),T&&P&&"values"!==P.name&&(C=!0,O=function(){return P.call(this)}),r&&!y||!h&&!C&&S[f]||a(S,f,O),s[t]=O,s[E]=p,v)if(g={values:T?O:w("values"),keys:_?O:w("keys"),entries:I},y)for(m in g)m in S||o(S,m,g[m]);else i(i.P+i.F*(h||C),t,g);return g}},function(e,t,n){"use strict";var r=n(41),i=n(37),o=n(48),a={};n(15)(a,n(9)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(a,{next:i(1,n)}),o(e,t+" Iterator")}},function(e,t,n){var r=n(62),i=n(29);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(i(e))}},function(e,t,n){var r=n(9)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t,n){var r=n(51),i=n(9)("iterator"),o=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||o[i]===e)}},function(e,t,n){"use strict";var r=n(12),i=n(37);e.exports=function(e,t,n){t in e?r.f(e,t,i(0,n)):e[t]=n}},function(e,t,n){var r=n(49),i=n(9)("iterator"),o=n(51);e.exports=n(23).getIteratorMethod=function(e){if(null!=e)return e[i]||e["@@iterator"]||o[r(e)]}},function(e,t,n){var r=n(245);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){"use strict";var r=n(13),i=n(40),o=n(10);e.exports=function(e){for(var t=r(this),n=o(t.length),a=arguments.length,s=i(a>1?arguments[1]:void 0,n),u=a>2?arguments[2]:void 0,l=void 0===u?n:i(u,n);l>s;)t[s++]=e;return t}},function(e,t,n){"use strict";var r=n(36),i=n(122),o=n(51),a=n(19);e.exports=n(83)(Array,"Array",(function(e,t){this._t=a(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,i(1)):i(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(e,t,n){"use strict";var r,i,o=n(55),a=RegExp.prototype.exec,s=String.prototype.replace,u=a,l=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),c=void 0!==/()??/.exec("")[1];(l||c)&&(u=function(e){var t,n,r,i,u=this;return c&&(n=new RegExp("^"+u.source+"$(?!\\s)",o.call(u))),l&&(t=u.lastIndex),r=a.call(u,e),l&&r&&(u.lastIndex=u.global?r.index+r[0].length:t),c&&r&&r.length>1&&s.call(r[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r}),e.exports=u},function(e,t,n){"use strict";var r=n(61)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r,i,o,a=n(24),s=n(112),u=n(76),l=n(72),c=n(5),f=c.process,h=c.setImmediate,p=c.clearImmediate,d=c.MessageChannel,v=c.Dispatch,_=0,y={},g=function(){var e=+this;if(y.hasOwnProperty(e)){var t=y[e];delete y[e],t()}},m=function(e){g.call(e.data)};h&&p||(h=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return y[++_]=function(){s("function"==typeof e?e:Function(e),t)},r(_),_},p=function(e){delete y[e]},"process"==n(25)(f)?r=function(e){f.nextTick(a(g,e,1))}:v&&v.now?r=function(e){v.now(a(g,e,1))}:d?(o=(i=new d).port2,i.port1.onmessage=m,r=a(o.postMessage,o,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts?(r=function(e){c.postMessage(e+"","*")},c.addEventListener("message",m,!1)):r="onreadystatechange"in l("script")?function(e){u.appendChild(l("script")).onreadystatechange=function(){u.removeChild(this),g.call(e)}}:function(e){setTimeout(a(g,e,1),0)}),e.exports={set:h,clear:p}},function(e,t,n){var r=n(5),i=n(95).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,s=r.Promise,u="process"==n(25)(a);e.exports=function(){var e,t,n,l=function(){var r,i;for(u&&(r=a.domain)&&r.exit();e;){i=e.fn,e=e.next;try{i()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(u)n=function(){a.nextTick(l)};else if(!o||r.navigator&&r.navigator.standalone)if(s&&s.resolve){var c=s.resolve(void 0);n=function(){c.then(l)}}else n=function(){i.call(r,l)};else{var f=!0,h=document.createTextNode("");new o(l).observe(h,{characterData:!0}),n=function(){h.data=f=!f}}return function(r){var i={fn:r,next:void 0};t&&(t.next=i),e||(e=i,n()),t=i}}},function(e,t,n){"use strict";var r=n(14);function i(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)}e.exports.f=function(e){return new i(e)}},function(e,t,n){"use strict";var r=n(5),i=n(11),o=n(34),a=n(68),s=n(15),u=n(46),l=n(7),c=n(44),f=n(26),h=n(10),p=n(132),d=n(42).f,v=n(12).f,_=n(91),y=n(48),g=r.ArrayBuffer,m=r.DataView,b=r.Math,w=r.RangeError,E=r.Infinity,T=g,C=b.abs,S=b.pow,P=b.floor,O=b.log,I=b.LN2,k=i?"_b":"buffer",x=i?"_l":"byteLength",A=i?"_o":"byteOffset";function D(e,t,n){var r,i,o,a=new Array(n),s=8*n-t-1,u=(1<<s)-1,l=u>>1,c=23===t?S(2,-24)-S(2,-77):0,f=0,h=e<0||0===e&&1/e<0?1:0;for((e=C(e))!=e||e===E?(i=e!=e?1:0,r=u):(r=P(O(e)/I),e*(o=S(2,-r))<1&&(r--,o*=2),(e+=r+l>=1?c/o:c*S(2,1-l))*o>=2&&(r++,o/=2),r+l>=u?(i=0,r=u):r+l>=1?(i=(e*o-1)*S(2,t),r+=l):(i=e*S(2,l-1)*S(2,t),r=0));t>=8;a[f++]=255&i,i/=256,t-=8);for(r=r<<t|i,s+=t;s>0;a[f++]=255&r,r/=256,s-=8);return a[--f]|=128*h,a}function N(e,t,n){var r,i=8*n-t-1,o=(1<<i)-1,a=o>>1,s=i-7,u=n-1,l=e[u--],c=127&l;for(l>>=7;s>0;c=256*c+e[u],u--,s-=8);for(r=c&(1<<-s)-1,c>>=-s,s+=t;s>0;r=256*r+e[u],u--,s-=8);if(0===c)c=1-a;else{if(c===o)return r?NaN:l?-E:E;r+=S(2,t),c-=a}return(l?-1:1)*r*S(2,c-t)}function R(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function M(e){return[255&e]}function L(e){return[255&e,e>>8&255]}function F(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function j(e){return D(e,52,8)}function U(e){return D(e,23,4)}function W(e,t,n){v(e.prototype,t,{get:function(){return this[n]}})}function B(e,t,n,r){var i=p(+n);if(i+t>e[x])throw w("Wrong index!");var o=e[k]._b,a=i+e[A],s=o.slice(a,a+t);return r?s:s.reverse()}function H(e,t,n,r,i,o){var a=p(+n);if(a+t>e[x])throw w("Wrong index!");for(var s=e[k]._b,u=a+e[A],l=r(+i),c=0;c<t;c++)s[u+c]=l[o?c:t-c-1]}if(a.ABV){if(!l((function(){g(1)}))||!l((function(){new g(-1)}))||l((function(){return new g,new g(1.5),new g(NaN),"ArrayBuffer"!=g.name}))){for(var K,V=(g=function(e){return c(this,g),new T(p(e))}).prototype=T.prototype,G=d(T),q=0;G.length>q;)(K=G[q++])in g||s(g,K,T[K]);o||(V.constructor=g)}var z=new m(new g(2)),Q=m.prototype.setInt8;z.setInt8(0,2147483648),z.setInt8(1,2147483649),!z.getInt8(0)&&z.getInt8(1)||u(m.prototype,{setInt8:function(e,t){Q.call(this,e,t<<24>>24)},setUint8:function(e,t){Q.call(this,e,t<<24>>24)}},!0)}else g=function(e){c(this,g,"ArrayBuffer");var t=p(e);this._b=_.call(new Array(t),0),this[x]=t},m=function(e,t,n){c(this,m,"DataView"),c(e,g,"DataView");var r=e[x],i=f(t);if(i<0||i>r)throw w("Wrong offset!");if(i+(n=void 0===n?r-i:h(n))>r)throw w("Wrong length!");this[k]=e,this[A]=i,this[x]=n},i&&(W(g,"byteLength","_l"),W(m,"buffer","_b"),W(m,"byteLength","_l"),W(m,"byteOffset","_o")),u(m.prototype,{getInt8:function(e){return B(this,1,e)[0]<<24>>24},getUint8:function(e){return B(this,1,e)[0]},getInt16:function(e){var t=B(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=B(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return R(B(this,4,e,arguments[1]))},getUint32:function(e){return R(B(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return N(B(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return N(B(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){H(this,1,e,M,t)},setUint8:function(e,t){H(this,1,e,M,t)},setInt16:function(e,t){H(this,2,e,L,t,arguments[2])},setUint16:function(e,t){H(this,2,e,L,t,arguments[2])},setInt32:function(e,t){H(this,4,e,F,t,arguments[2])},setUint32:function(e,t){H(this,4,e,F,t,arguments[2])},setFloat32:function(e,t){H(this,4,e,U,t,arguments[2])},setFloat64:function(e,t){H(this,8,e,j,t,arguments[2])}});y(g,"ArrayBuffer"),y(m,"DataView"),s(m.prototype,a.VIEW,!0),t.ArrayBuffer=g,t.DataView=m},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=n(361),i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},o=function(e,t){if(!e)throw a(t)},a=function(e){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},s=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var i=e.charCodeAt(r);i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):55296==(64512&i)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++r)),t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},u={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<e.length;i+=3){var o=e[i],a=i+1<e.length,s=a?e[i+1]:0,u=i+2<e.length,l=u?e[i+2]:0,c=o>>2,f=(3&o)<<4|s>>4,h=(15&s)<<2|l>>6,p=63&l;u||(p=64,a||(h=64)),r.push(n[c],n[f],n[h],n[p])}return r.join("")},encodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(s(e),t)},decodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){for(var t=[],n=0,r=0;n<e.length;){var i=e[n++];if(i<128)t[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=e[n++];t[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var a=((7&i)<<18|(63&(o=e[n++]))<<12|(63&(s=e[n++]))<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(a>>10)),t[r++]=String.fromCharCode(56320+(1023&a))}else{o=e[n++];var s=e[n++];t[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&s)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray:function(e,t){this.init_();for(var n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<e.length;){var o=n[e.charAt(i++)],a=i<e.length?n[e.charAt(i)]:0,s=++i<e.length?n[e.charAt(i)]:64,u=++i<e.length?n[e.charAt(i)]:64;if(++i,null==o||null==a||null==s||null==u)throw Error();var l=o<<2|a>>4;if(r.push(l),64!==s){var c=a<<4&240|s>>2;if(r.push(c),64!==u){var f=s<<6&192|u;r.push(f)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},l=function(e){try{return u.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function c(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(var n in t)t.hasOwnProperty(n)&&(e[n]=c(e[n],t[n]));return e}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var f=function(){function e(){var e=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))}return e.prototype.wrapCallback=function(e){var t=this;return function(n,r){n?t.reject(n):t.resolve(r),"function"==typeof e&&(t.promise.catch((function(){})),1===e.length?e(n):e(n,r))}},e}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function h(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function p(){try{return"[object process]"===Object.prototype.toString.call(e.process)}catch(e){return!1}}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var d=function(e){function t(n,r){var i=e.call(this,r)||this;return i.code=n,i.name="FirebaseError",Object.setPrototypeOf(i,t.prototype),Error.captureStackTrace&&Error.captureStackTrace(i,v.prototype.create),i}return r.__extends(t,e),t}(Error),v=function(){function e(e,t,n){this.service=e,this.serviceName=t,this.errors=n}return e.prototype.create=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=t[0]||{},i=this.service+"/"+e,o=this.errors[e],a=o?_(o,r):"Error",s=this.serviceName+": "+a+" ("+i+").",u=new d(i,s),l=0,c=Object.keys(r);l<c.length;l++){var f=c[l];"_"!==f.slice(-1)&&(f in u&&console.warn('Overwriting FirebaseError base field "'+f+'" can cause unexpected behavior.'),u[f]=r[f])}return u},e}();function _(e,t){return e.replace(y,(function(e,n){var r=t[n];return null!=r?r.toString():"<"+n+"?>"}))}var y=/\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function g(e){return JSON.parse(e)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var m=function(e){var t={},n={},r={},i="";try{var o=e.split(".");t=g(l(o[0])||""),n=g(l(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(e){}return{header:t,claims:n,data:r,signature:i}};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var b=function(){function e(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}return e.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},e.prototype.compress_=function(e,t){t||(t=0);var n=this.W_;if("string"==typeof e)for(var r=0;r<16;r++)n[r]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(r=0;r<16;r++)n[r]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],l=this.chain_[2],c=this.chain_[3],f=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(o=c^u&(l^c),a=1518500249):(o=u^l^c,a=1859775393):r<60?(o=u&l|c&(u|l),a=2400959708):(o=u^l^c,a=3395469782);i=(s<<5|s>>>27)+o+f+a+n[r]&4294967295;f=c,c=l,l=4294967295&(u<<30|u>>>2),u=s,s=i}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+l&4294967295,this.chain_[3]=this.chain_[3]+c&4294967295,this.chain_[4]=this.chain_[4]+f&4294967295},e.prototype.update=function(e,t){if(null!=e){void 0===t&&(t=e.length);for(var n=t-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<t;){if(0===o)for(;r<=n;)this.compress_(e,r),r+=this.blockSize;if("string"==typeof e){for(;r<t;)if(i[o]=e.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<t;)if(i[o]=e[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=t}},e.prototype.digest=function(){var e=[],t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&t,t/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)e[r]=this.chain_[n]>>i&255,++r;return e},e}();var w=function(){function e(e,t){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((function(){e(n)})).catch((function(e){n.error(e)}))}return e.prototype.next=function(e){this.forEachObserver((function(t){t.next(e)}))},e.prototype.error=function(e){this.forEachObserver((function(t){t.error(e)})),this.close(e)},e.prototype.complete=function(){this.forEachObserver((function(e){e.complete()})),this.close()},e.prototype.subscribe=function(e,t,n){var r,i=this;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(e,t){if("object"!=typeof e||null===e)return!1;for(var n=0,r=t;n<r.length;n++){var i=r[n];if(i in e&&"function"==typeof e[i])return!0}return!1}(e,["next","error","complete"])?e:{next:e,error:t,complete:n}).next&&(r.next=E),void 0===r.error&&(r.error=E),void 0===r.complete&&(r.complete=E);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(e){}})),this.observers.push(r),o},e.prototype.unsubscribeOne=function(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},e.prototype.forEachObserver=function(e){if(!this.finalized)for(var t=0;t<this.observers.length;t++)this.sendOne(t,e)},e.prototype.sendOne=function(e,t){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[e])try{t(n.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))},e.prototype.close=function(e){var t=this;this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((function(){t.observers=void 0,t.onNoObservers=void 0})))},e}();function E(){}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function T(e,t,n){var r="";switch(t){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}var i=e+" failed: ";return i+=r+" argument "}t.CONSTANTS=i,t.Deferred=f,t.ErrorFactory=v,t.FirebaseError=d,t.Sha1=b,t.assert=o,t.assertionError=a,t.async=function(e,t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then((function(){e.apply(void 0,n)})).catch((function(e){t&&t(e)}))}},t.base64=u,t.base64Decode=l,t.base64Encode=function(e){var t=s(e);return u.encodeByteArray(t,!0)},t.contains=
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.createSubscribe=function(e,t){var n=new w(e,t);return n.subscribe.bind(n)},t.decode=m,t.deepCopy=
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e){return c(void 0,e)},t.deepExtend=c,t.errorPrefix=T,t.getUA=h,t.isAdmin=function(e){var t=m(e).claims;return"object"==typeof t&&!0===t.admin},t.isBrowser=function(){return"object"==typeof self&&self.self===self},t.isBrowserExtension=function(){var e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id},t.isElectron=function(){return h().indexOf("Electron/")>=0},t.isEmpty=function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0},t.isIE=function(){var e=h();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0},t.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(h())},t.isNode=p,t.isNodeSdk=function(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN},t.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},t.isSafari=function(){return!p()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")},t.isUWP=function(){return h().indexOf("MSAppHost/")>=0},t.isValidFormat=function(e){var t=m(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},t.isValidTimestamp=function(e){var t=m(e).claims,n=Math.floor((new Date).getTime()/1e3),r=0,i=0;return"object"==typeof t&&(t.hasOwnProperty("nbf")?r=t.nbf:t.hasOwnProperty("iat")&&(r=t.iat),i=t.hasOwnProperty("exp")?t.exp:r+86400),!!n&&!!r&&!!i&&n>=r&&n<=i},t.issuedAtTime=function(e){var t=m(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},t.jsonEval=g,t.map=function(e,t,n){var r={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(r[i]=t.call(n,e[i],i,e));return r}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */,t.querystring=function(e){for(var t=[],n=function(e,n){Array.isArray(n)?n.forEach((function(n){t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))})):t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))},r=0,i=Object.entries(e);r<i.length;r++){var o=i[r];n(o[0],o[1])}return t.length?"&"+t.join("&"):""},t.querystringDecode=function(e){var t={};return e.replace(/^\?/,"").split("&").forEach((function(e){if(e){var n=e.split("=");t[n[0]]=n[1]}})),t},t.safeGet=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0},t.stringLength=function(e){for(var t=0,n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t++:r<2048?t+=2:r>=55296&&r<=56319?(t+=4,n++):t+=3}return t},t.stringToByteArray=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var i=e.charCodeAt(r);if(i>=55296&&i<=56319){var a=i-55296;r++,o(r<e.length,"Surrogate pair missing trail surrogate."),i=65536+(a<<10)+(e.charCodeAt(r)-56320)}i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):i<65536?(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},t.stringify=function(e){return JSON.stringify(e)},t.validateArgCount=function(e,t,n,r){var i;if(r<t?i="at least "+t:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(e+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")},t.validateCallback=function(e,t,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(T(e,t,r)+"must be a valid function.")},t.validateContextObject=function(e,t,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(T(e,t,r)+"must be a valid context object.")}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */,t.validateNamespace=function(e,t,n,r){if((!r||n)&&"string"!=typeof n)throw new Error(T(e,t,r)+"must be a valid firebase namespace.")}}).call(this,n(57))},function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],u=t.base?o[0]+t.base:o[0],l=n[u]||0,c="".concat(u," ").concat(l);n[u]=l+1;var f=s(c),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(a[f].references++,a[f].updater(h)):a.push({identifier:c,updater:_(h,t),references:1}),r.push(c)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function h(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function p(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var d=null,v=0;function _(e,t){var n,r,i;if(t.singleton){var o=v++;n=d||(d=l(t)),r=h.bind(null,n,o,!1),i=h.bind(null,n,o,!0)}else n=l(t),r=p.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=s(n[r]);a[i].references--}for(var o=u(e,t),l=0;l<n.length;l++){var c=s(n[l]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}n=o}}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(u," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}var a,s,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);r&&i[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){"use strict";(function(e){var r,i=n(103);n(363),n(367);(r="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&r(e);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var o={apiKey:"AIzaSyCcAA-aownqfbMYUw6KYUMboxvLGjL6DJo",authDomain:"airplanes-on-a-grid.firebaseapp.com",databaseURL:"https://airplanes-on-a-grid.firebaseio.com",projectId:"airplanes-on-a-grid",storageBucket:"airplanes-on-a-grid.appspot.com",messagingSenderId:"653896723601",appId:"1:653896723601:web:0a6df08045003c186ea330",measurementId:"G-23L0WFZLBD"};i.initializeApp(o);var a,s,u=i;t.a=u,(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(a.register(o,"config","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\fire.js"),a.register(u,"default","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\fire.js")),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(e)}).call(this,n(22)(e))},function(e,t,n){"use strict";var r,i=(r=n(2))&&"object"==typeof r&&"default"in r?r.default:r;
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
i.registerVersion("firebase","7.15.1","app"),e.exports=i},function(e,t,n){e.exports=!n(11)&&!n(7)((function(){return 7!=Object.defineProperty(n(72)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){t.f=n(9)},function(e,t,n){var r=n(18),i=n(19),o=n(58)(!1),a=n(74)("IE_PROTO");e.exports=function(e,t){var n,s=i(e),u=0,l=[];for(n in s)n!=a&&r(s,n)&&l.push(n);for(;t.length>u;)r(s,n=t[u++])&&(~o(l,n)||l.push(n));return l}},function(e,t,n){var r=n(12),i=n(3),o=n(39);e.exports=n(11)?Object.defineProperties:function(e,t){i(e);for(var n,a=o(t),s=a.length,u=0;s>u;)r.f(e,n=a[u++],t[n]);return e}},function(e,t,n){var r=n(19),i=n(42).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==o.call(e)?function(e){try{return i(e)}catch(e){return a.slice()}}(e):i(r(e))}},function(e,t,n){"use strict";var r=n(11),i=n(39),o=n(59),a=n(54),s=n(13),u=n(53),l=Object.assign;e.exports=!l||n(7)((function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=l({},e)[n]||Object.keys(l({},t)).join("")!=r}))?function(e,t){for(var n=s(e),l=arguments.length,c=1,f=o.f,h=a.f;l>c;)for(var p,d=u(arguments[c++]),v=f?i(d).concat(f(d)):i(d),_=v.length,y=0;_>y;)p=v[y++],r&&!h.call(d,p)||(n[p]=d[p]);return n}:l},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){"use strict";var r=n(14),i=n(8),o=n(112),a=[].slice,s={},u=function(e,t,n){if(!(t in s)){for(var r=[],i=0;i<t;i++)r[i]="a["+i+"]";s[t]=Function("F,a","return new F("+r.join(",")+")")}return s[t](e,n)};e.exports=Function.bind||function(e){var t=r(this),n=a.call(arguments,1),s=function(){var r=n.concat(a.call(arguments));return this instanceof s?u(t,r.length,r):o(t,r,e)};return i(t.prototype)&&(s.prototype=t.prototype),s}},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var r=n(5).parseInt,i=n(50).trim,o=n(78),a=/^[-+]?0[xX]/;e.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(e,t){var n=i(String(e),3);return r(n,t>>>0||(a.test(n)?16:10))}:r},function(e,t,n){var r=n(5).parseFloat,i=n(50).trim;e.exports=1/r(n(78)+"-0")!=-1/0?function(e){var t=i(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},function(e,t,n){var r=n(25);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},function(e,t,n){var r=n(8),i=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&i(e)===e}},function(e,t){e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},function(e,t,n){var r=n(81),i=Math.pow,o=i(2,-52),a=i(2,-23),s=i(2,127)*(2-a),u=i(2,-126);e.exports=Math.fround||function(e){var t,n,i=Math.abs(e),l=r(e);return i<u?l*(i/u/a+1/o-1/o)*u*a:(n=(t=(1+a/o)*i)-(t-i))>s||n!=n?l*(1/0):l*n}},function(e,t,n){var r=n(3);e.exports=function(e,t,n,i){try{return i?t(r(n)[0],n[1]):t(n)}catch(t){var o=e.return;throw void 0!==o&&r(o.call(e)),t}}},function(e,t,n){var r=n(14),i=n(13),o=n(53),a=n(10);e.exports=function(e,t,n,s,u){r(t);var l=i(e),c=o(l),f=a(l.length),h=u?f-1:0,p=u?-1:1;if(n<2)for(;;){if(h in c){s=c[h],h+=p;break}if(h+=p,u?h<0:f<=h)throw TypeError("Reduce of empty array with no initial value")}for(;u?h>=0:f>h;h+=p)h in c&&(s=t(s,c[h],h,l));return s}},function(e,t,n){"use strict";var r=n(13),i=n(40),o=n(10);e.exports=[].copyWithin||function(e,t){var n=r(this),a=o(n.length),s=i(e,a),u=i(t,a),l=arguments.length>2?arguments[2]:void 0,c=Math.min((void 0===l?a:i(l,a))-u,a-s),f=1;for(u<s&&s<u+c&&(f=-1,u+=c-1,s+=c-1);c-- >0;)u in n?n[s]=n[u]:delete n[s],s+=f,u+=f;return n}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r=n(93);n(1)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){n(11)&&"g"!=/./g.flags&&n(12).f(RegExp.prototype,"flags",{configurable:!0,get:n(55)})},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){var r=n(3),i=n(8),o=n(97);e.exports=function(e,t){if(r(e),i(t)&&t.constructor===e)return t;var n=o.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";var r=n(128),i=n(47);e.exports=n(67)("Map",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(e){var t=r.getEntry(i(this,"Map"),e);return t&&t.v},set:function(e,t){return r.def(i(this,"Map"),0===e?0:e,t)}},r,!0)},function(e,t,n){"use strict";var r=n(12).f,i=n(41),o=n(46),a=n(24),s=n(44),u=n(45),l=n(83),c=n(122),f=n(43),h=n(11),p=n(35).fastKey,d=n(47),v=h?"_s":"size",_=function(e,t){var n,r=p(t);if("F"!==r)return e._i[r];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,l){var c=e((function(e,r){s(e,c,t,"_i"),e._t=t,e._i=i(null),e._f=void 0,e._l=void 0,e[v]=0,null!=r&&u(r,n,e[l],e)}));return o(c.prototype,{clear:function(){for(var e=d(this,t),n=e._i,r=e._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];e._f=e._l=void 0,e[v]=0},delete:function(e){var n=d(this,t),r=_(n,e);if(r){var i=r.n,o=r.p;delete n._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),n._f==r&&(n._f=i),n._l==r&&(n._l=o),n[v]--}return!!r},forEach:function(e){d(this,t);for(var n,r=a(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!_(d(this,t),e)}}),h&&r(c.prototype,"size",{get:function(){return d(this,t)[v]}}),c},def:function(e,t,n){var r,i,o=_(e,t);return o?o.v=n:(e._l=o={i:i=p(t,!0),k:t,v:n,p:r=e._l,n:void 0,r:!1},e._f||(e._f=o),r&&(r.n=o),e[v]++,"F"!==i&&(e._i[i]=o)),e},getEntry:_,setStrong:function(e,t,n){l(e,t,(function(e,n){this._t=d(e,t),this._k=n,this._l=void 0}),(function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?c(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,c(1))}),n?"entries":"values",!n,!0),f(t)}}},function(e,t,n){"use strict";var r=n(128),i=n(47);e.exports=n(67)("Set",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(i(this,"Set"),e=0===e?0:e,e)}},r)},function(e,t,n){"use strict";var r,i=n(5),o=n(31)(0),a=n(16),s=n(35),u=n(109),l=n(131),c=n(8),f=n(47),h=n(47),p=!i.ActiveXObject&&"ActiveXObject"in i,d=s.getWeak,v=Object.isExtensible,_=l.ufstore,y=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},g={get:function(e){if(c(e)){var t=d(e);return!0===t?_(f(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return l.def(f(this,"WeakMap"),e,t)}},m=e.exports=n(67)("WeakMap",y,g,l,!0,!0);h&&p&&(u((r=l.getConstructor(y,"WeakMap")).prototype,g),s.NEED=!0,o(["delete","has","get","set"],(function(e){var t=m.prototype,n=t[e];a(t,e,(function(t,i){if(c(t)&&!v(t)){this._f||(this._f=new r);var o=this._f[e](t,i);return"set"==e?this:o}return n.call(this,t,i)}))})))},function(e,t,n){"use strict";var r=n(46),i=n(35).getWeak,o=n(3),a=n(8),s=n(44),u=n(45),l=n(31),c=n(18),f=n(47),h=l(5),p=l(6),d=0,v=function(e){return e._l||(e._l=new _)},_=function(){this.a=[]},y=function(e,t){return h(e.a,(function(e){return e[0]===t}))};_.prototype={get:function(e){var t=y(this,e);if(t)return t[1]},has:function(e){return!!y(this,e)},set:function(e,t){var n=y(this,e);n?n[1]=t:this.a.push([e,t])},delete:function(e){var t=p(this.a,(function(t){return t[0]===e}));return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,o){var l=e((function(e,r){s(e,l,t,"_i"),e._t=t,e._i=d++,e._l=void 0,null!=r&&u(r,n,e[o],e)}));return r(l.prototype,{delete:function(e){if(!a(e))return!1;var n=i(e);return!0===n?v(f(this,t)).delete(e):n&&c(n,this._i)&&delete n[this._i]},has:function(e){if(!a(e))return!1;var n=i(e);return!0===n?v(f(this,t)).has(e):n&&c(n,this._i)}}),l},def:function(e,t,n){var r=i(o(t),!0);return!0===r?v(e).set(t,n):r[e._i]=n,e},ufstore:v}},function(e,t,n){var r=n(26),i=n(10);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=i(t);if(t!==n)throw RangeError("Wrong length!");return n}},function(e,t,n){var r=n(42),i=n(59),o=n(3),a=n(5).Reflect;e.exports=a&&a.ownKeys||function(e){var t=r.f(o(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){"use strict";var r=n(60),i=n(8),o=n(10),a=n(24),s=n(9)("isConcatSpreadable");e.exports=function e(t,n,u,l,c,f,h,p){for(var d,v,_=c,y=0,g=!!h&&a(h,p,3);y<l;){if(y in u){if(d=g?g(u[y],y,n):u[y],v=!1,i(d)&&(v=void 0!==(v=d[s])?!!v:r(d)),v&&f>0)_=e(t,n,d,o(d.length),_,f-1)-1;else{if(_>=9007199254740991)throw TypeError();t[_]=d}_++}y++}return _}},function(e,t,n){var r=n(10),i=n(80),o=n(29);e.exports=function(e,t,n,a){var s=String(o(e)),u=s.length,l=void 0===n?" ":String(n),c=r(t);if(c<=u||""==l)return s;var f=c-u,h=i.call(l,Math.ceil(f/l.length));return h.length>f&&(h=h.slice(0,f)),a?h+s:s+h}},function(e,t,n){var r=n(11),i=n(39),o=n(19),a=n(54).f;e.exports=function(e){return function(t){for(var n,s=o(t),u=i(s),l=u.length,c=0,f=[];l>c;)n=u[c++],r&&!a.call(s,n)||f.push(e?[n,s[n]]:s[n]);return f}}},function(e,t,n){var r=n(49),i=n(138);e.exports=function(e){return function(){if(r(this)!=e)throw TypeError(e+"#toJSON isn't generic");return i(this)}}},function(e,t,n){var r=n(45);e.exports=function(e,t){var n=[];return r(e,!1,n.push,n,t),n}},function(e,t){e.exports=Math.scale||function(e,t,n,r,i){return 0===arguments.length||e!=e||t!=t||n!=n||r!=r||i!=i?NaN:e===1/0||e===-1/0?e:(e-t)*(i-r)/(n-t)+r}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,u=a(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))i.call(n,c)&&(u[c]=n[c]);if(r){s=r(n);for(var f=0;f<s.length;f++)o.call(n,s[f])&&(u[s[f]]=n[s[f]])}}return u}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(362),i=n(99),o=function(){function e(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return e.prototype.setInstantiationMode=function(e){return this.instantiationMode=e,this},e.prototype.setMultipleInstances=function(e){return this.multipleInstances=e,this},e.prototype.setServiceProps=function(e){return this.serviceProps=e,this},e}(),a=function(){function e(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return e.prototype.get=function(e){void 0===e&&(e="[DEFAULT]");var t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){var n=new i.Deferred;this.instancesDeferred.set(t,n);try{var r=this.getOrInitializeService(t);r&&n.resolve(r)}catch(e){}}return this.instancesDeferred.get(t).promise},e.prototype.getImmediate=function(e){var t=r.__assign({identifier:"[DEFAULT]",optional:!1},e),n=t.identifier,i=t.optional,o=this.normalizeInstanceIdentifier(n);try{var a=this.getOrInitializeService(o);if(!a){if(i)return null;throw Error("Service "+this.name+" is not available")}return a}catch(e){if(i)return null;throw e}},e.prototype.getComponent=function(){return this.component},e.prototype.setComponent=function(e){var t,n;if(e.name!==this.name)throw Error("Mismatching Component "+e.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=e,function(e){return"EAGER"===e.instantiationMode}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(e))try{this.getOrInitializeService("[DEFAULT]")}catch(e){}try{for(var i=r.__values(this.instancesDeferred.entries()),o=i.next();!o.done;o=i.next()){var a=r.__read(o.value,2),s=a[0],u=a[1],l=this.normalizeInstanceIdentifier(s);try{var c=this.getOrInitializeService(l);u.resolve(c)}catch(e){}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}},e.prototype.clearInstance=function(e){void 0===e&&(e="[DEFAULT]"),this.instancesDeferred.delete(e),this.instances.delete(e)},e.prototype.delete=function(){return r.__awaiter(this,void 0,void 0,(function(){var e;return r.__generator(this,(function(t){switch(t.label){case 0:return e=Array.from(this.instances.values()),[4,Promise.all(e.filter((function(e){return"INTERNAL"in e})).map((function(e){return e.INTERNAL.delete()})))];case 1:return t.sent(),[2]}}))}))},e.prototype.isComponentSet=function(){return null!=this.component},e.prototype.getOrInitializeService=function(e){var t=this.instances.get(e);return!t&&this.component&&(t=this.component.instanceFactory(this.container,function(e){return"[DEFAULT]"===e?void 0:e}(e)),this.instances.set(e,t)),t||null},e.prototype.normalizeInstanceIdentifier=function(e){return this.component?this.component.multipleInstances?e:"[DEFAULT]":e},e}();var s=function(){function e(e){this.name=e,this.providers=new Map}return e.prototype.addComponent=function(e){var t=this.getProvider(e.name);if(t.isComponentSet())throw new Error("Component "+e.name+" has already been registered with "+this.name);t.setComponent(e)},e.prototype.addOrOverwriteComponent=function(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)},e.prototype.getProvider=function(e){if(this.providers.has(e))return this.providers.get(e);var t=new a(e,this);return this.providers.set(e,t),t},e.prototype.getProviders=function(){return Array.from(this.providers.values())},e}();t.Component=o,t.ComponentContainer=s,t.Provider=a},function(e,t,n){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function r(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var i;n.r(t),n.d(t,"LogLevel",(function(){return o})),n.d(t,"Logger",(function(){return f})),n.d(t,"setLogLevel",(function(){return h})),n.d(t,"setUserLogHandler",(function(){return p}));var o,a=[];!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(o||(o={}));var s={debug:o.DEBUG,verbose:o.VERBOSE,info:o.INFO,warn:o.WARN,error:o.ERROR,silent:o.SILENT},u=o.INFO,l=((i={})[o.DEBUG]="log",i[o.VERBOSE]="log",i[o.INFO]="info",i[o.WARN]="warn",i[o.ERROR]="error",i),c=function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(t<e.logLevel)){var o=(new Date).toISOString(),a=l[t];if(!a)throw new Error("Attempted to log a message with an invalid logType (value: "+t+")");console[a].apply(console,r(["["+o+"]  "+e.name+":"],n))}},f=function(){function e(e){this.name=e,this._logLevel=u,this._logHandler=c,this._userLogHandler=null,a.push(this)}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){if(!(e in o))throw new TypeError('Invalid value "'+e+'" assigned to `logLevel`');this._logLevel=e},enumerable:!0,configurable:!0}),e.prototype.setLogLevel=function(e){this._logLevel="string"==typeof e?s[e]:e},Object.defineProperty(e.prototype,"logHandler",{get:function(){return this._logHandler},set:function(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(e){this._userLogHandler=e},enumerable:!0,configurable:!0}),e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.DEBUG],e)),this._logHandler.apply(this,r([this,o.DEBUG],e))},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.VERBOSE],e)),this._logHandler.apply(this,r([this,o.VERBOSE],e))},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.INFO],e)),this._logHandler.apply(this,r([this,o.INFO],e))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.WARN],e)),this._logHandler.apply(this,r([this,o.WARN],e))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.ERROR],e)),this._logHandler.apply(this,r([this,o.ERROR],e))},e}();function h(e){a.forEach((function(t){t.setLogLevel(e)}))}function p(e,t){for(var n=function(n){var r=null;t&&t.level&&(r=s[t.level]),n.userLogHandler=null===e?null:function(t,n){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];var s=i.map((function(e){if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}})).filter((function(e){return e})).join(" ");n>=(null!=r?r:t.logLevel)&&e({level:o[n].toLowerCase(),message:s,args:i,type:t.name})}},r=0,i=a;r<i.length;r++){n(i[r])}}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(357)},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return App}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_navbar_jsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(145),_about_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(146),_game_jsx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(147),_howtoplay_jsx__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(149),_holdon_jsx__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(150),_privatejoin_jsx__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(151),_user_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(6),enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var i=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},App=function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(){var e;_classCallCheck(this,App),(e=_super.call(this)).state={page:"about",queries:{}};var t,n,r=window.location.pathname;return window.URLSearchParams?n=(t=new URLSearchParams(window.location.search)).get("lang")||"en":alert("This browser does not offer well support for this website. We recommend using Chrome, Edge or Opera"),"/about"==r||"/"==r?e.state.page="about":"/game"==r?(e.state.page="game",Object.assign(e.state.queries,{gameId:t.get("gameId")})):"/how-to-play"==r&&(e.state.page="how-to-play"),e.state.lang=n,e}return _createClass(App,[{key:"componentDidMount",value:function(){window.app=this,Object(_user_js__WEBPACK_IMPORTED_MODULE_7__.c)()}},{key:"render",value:function(){var e;return"about"==this.state.page?e=_about_jsx__WEBPACK_IMPORTED_MODULE_2__.a:"game"==this.state.page?e=_game_jsx__WEBPACK_IMPORTED_MODULE_3__.a:"how-to-play"==this.state.page?e=_howtoplay_jsx__WEBPACK_IMPORTED_MODULE_4__.a:"hold-on"==this.state.page?e=_holdon_jsx__WEBPACK_IMPORTED_MODULE_5__.a:"private-join"==this.state.page&&(e=_privatejoin_jsx__WEBPACK_IMPORTED_MODULE_6__.a),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_navbar_jsx__WEBPACK_IMPORTED_MODULE_1__.a,{lang:this.state.lang}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(e,null))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),App}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component),reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(App,"App","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\app.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(22)(module))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return Navbar}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_user_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(6),_public_css_nav_css__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(369),_public_css_nav_css__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(_public_css_nav_css__WEBPACK_IMPORTED_MODULE_2__),enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function asyncGeneratorStep(e,t,n,r,i,o,a){try{var s=e[o](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,i)}function _asyncToGenerator(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){asyncGeneratorStep(o,r,i,a,s,"next",e)}function s(e){asyncGeneratorStep(o,r,i,a,s,"throw",e)}a(void 0)}))}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var i=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},nameFor={en:"English",ro:"Română"},Navbar=function(_React$Component){_inherits(Navbar,_React$Component);var _super=_createSuper(Navbar),_publicGame2;function Navbar(){var e;return _classCallCheck(this,Navbar),(e=_super.call(this)).state={lang:{}},e}return _createClass(Navbar,[{key:"componentDidMount",value:function(){var e=this;this.state.lang.displayed=document.querySelector("#displayed-lang"),this.state.lang.langDrop=document.querySelector("#languages"),this.state.lang.selected=document.querySelector('button.lang[data-lang="'.concat(this.props.lang,'"]')),this.state.lang.displayed.addEventListener("blur",(function(t){return e.langBlur(t)})),this.state.lang.short=this.props.lang,document.body.className=this.props.lang}},{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("nav",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{id:"changeLangBtn",className:"nav-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{id:"displayed-lang",className:"nav-btn",onClick:function(){return e.dropdownLang()}},nameFor[this.props.lang]),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{id:"languages",hidden:!0},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{"data-lang":"en",className:"lang",onClick:function(t){return e.langClick(t)},onBlur:function(t){return e.langBlur(t)}},"English"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{"data-lang":"ro",className:"lang",onClick:function(t){return e.langClick(t)},onBlur:function(t){return e.langBlur(t)}},"Română"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{id:"private-game",className:"nav-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{className:"nav-btn",onClick:function(){return e.navigate("private-join")}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"en"},"Private Game"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"ro"},"Joc Privat"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{id:"public-game",className:"nav-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{className:"nav-btn",onClick:function(){return e.publicGame()}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"en"},"Public Game"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"ro"},"Joc Public"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{id:"rules",className:"nav-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{className:"nav-btn",onClick:function(){return e.navigate("how-to-play")}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"en"},"How to play"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"ro"},"Cum se joaca"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{id:"about",className:"nav-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{className:"nav-btn",onClick:function(){return e.navigate("about")}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"en"},"About"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"ro"},"Despre"))))}},{key:"langClick",value:function(e){var t=e.target.getAttribute("data-lang");this.changeLang(t,e.target)}},{key:"changeLang",value:function(e,t){document.body.className=e,this.state.lang.short=e,this.state.lang.displayed.innerHTML=nameFor[e],this.state.lang.selected.classList.remove("selected-lang"),t.classList.add("selected-lang"),this.state.lang.selected=t,this.dropdownLang(!1)}},{key:"dropdownLang",value:function(e){e=null!=e?e:this.state.lang.langDrop.hidden,this.state.lang.langDrop.hidden=!e,e&&this.state.lang.selected.focus()}},{key:"langBlur",value:function(e){var t;(null===(t=e.relatedTarget)||void 0===t?void 0:t.classList.contains("lang"))||e.relatedTarget==this.state.lang.displayed||this.dropdownLang(!1)}},{key:"publicGame",value:(_publicGame2=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.navigate("hold-on"),e.next=3,Object(_user_js__WEBPACK_IMPORTED_MODULE_1__.f)();case 3:this.navigate("game"),_user_js__WEBPACK_IMPORTED_MODULE_1__.g.set({isPlaying:!0});case 5:case"end":return e.stop()}}),e,this)}))),function(){return _publicGame2.apply(this,arguments)})},{key:"navigate",value:function(e){_user_js__WEBPACK_IMPORTED_MODULE_1__.g.get().isPlaying?confirm("Are you sure you want to leave? You will abort the game")&&(Object(_user_js__WEBPACK_IMPORTED_MODULE_1__.a)(),app.setState({page:e})):app.setState({page:e})}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Navbar}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component),reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&(reactHotLoader.register(nameFor,"nameFor","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\navbar.jsx"),reactHotLoader.register(Navbar,"Navbar","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\navbar.jsx")),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(22)(module))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return l}));var r,i=n(0),o=n.n(i),a=n(4);(r="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&r(e);var s,u;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function l(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(a.a,{size:"2em",style:{margin:"0 8px 0 8px"}},o.a.createElement("p",null,o.a.createElement("span",{lang:"en"},"Welcome to Airplanes on a Grid!"),o.a.createElement("span",{lang:"ro"},"Bun venit la Airplanes on a Grid!")),o.a.createElement("h3",{className:"underlined"},o.a.createElement("span",{lang:"en"},"What is it?"),o.a.createElement("span",{lang:"ro"},"Ce este?")),o.a.createElement("p",null,o.a.createElement("span",{lang:"en"},"It's a relaxing originally pen-and-paper game turned into an online website. "),o.a.createElement("span",{lang:"ro"},"Este un joc relaxant original cu hartie si creion transformat intr-un website online. ")),o.a.createElement("h3",{className:"underlined"},o.a.createElement("span",{lang:"en"},"How to play?"),o.a.createElement("span",{lang:"ro"},"Cum se joaca?")),o.a.createElement("p",null,o.a.createElement("span",{lang:"en"},"You can start a public or a private session from the navigation bar at the top of the page. You can also join an already open session from the same buttons. Joining a public game randomly connects you to one of the pending ones. Joining a private game requires you to enter the session's 12-character id. For the game rules, check out the ",o.a.createElement("a",{href:"./how-to-play?lang=en"},"How to Play")," section from the navigation bar above."),o.a.createElement("span",{lang:"ro"},"Poti incepe o sesiune publica sau privata din bara de navigate deasupra paginii. Poti de asemenea sa te alaturi unei sesiuni deja creata din aceleasi butoane. Alaturandu-te unui joc public te vei conecta la unul din cele aflate in asteptare, ales in mod intamplator. Daca vrei sa te alaturi unui joc privat, va trebui sa introduci id-ul de 12 caractere al sesiunii. Pentru reguli, citeste sectiunea ",o.a.createElement("a",{href:"./how-to-play?lang=ro"},"Cum se Joaca")," din bara de navigare de deasupra."))))}(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&s.register(l,"AboutPage","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\about.jsx"),(u="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&u(e)}).call(this,n(22)(e))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return GamePage}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_public_css_game_css__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(371),_public_css_game_css__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_public_css_game_css__WEBPACK_IMPORTED_MODULE_1__),_utils_jsx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(4),_user_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(6),_defs_jsx__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(148),enterModule;function asyncGeneratorStep(e,t,n,r,i,o,a){try{var s=e[o](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,i)}function _asyncToGenerator(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){asyncGeneratorStep(o,r,i,a,s,"next",e)}function s(e){asyncGeneratorStep(o,r,i,a,s,"throw",e)}a(void 0)}))}}function ownKeys(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(n),!0).forEach((function(t){_defineProperty(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _iterableToArrayLimit(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var i=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},GamePage=function(_React$Component){_inherits(GamePage,_React$Component);var _super=_createSuper(GamePage);function GamePage(){var e;return _classCallCheck(this,GamePage),(e=_super.call(this)).state={ownStatus:_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.PLACING,partnerStatus:_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().initialPartnerStatus},e.ownPanel=react__WEBPACK_IMPORTED_MODULE_0___default.a.createRef(),e.partnerPanel=react__WEBPACK_IMPORTED_MODULE_0___default.a.createRef(),e}return _createClass(GamePage,[{key:"componentDidMount",value:function(){_user_js__WEBPACK_IMPORTED_MODULE_3__.g.set({gameComponent:this})}},{key:"startGame",value:function(){var e=[_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.WAITING,_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.GUESSING];this.setState({ownStatus:e[+_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().isPlayer1],partnerStatus:e[1-_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().isPlayer1]}),Object(_user_js__WEBPACK_IMPORTED_MODULE_3__.b)(_defineProperty({},_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().dbKey,e[0+_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().isPlayer1]))}},{key:"gameReady",value:function(){Object(_user_js__WEBPACK_IMPORTED_MODULE_3__.b)(_defineProperty({},_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().dbKey,_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.READY)),this.setState({ownStatus:_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.READY}),this.state.partnerStatus==_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.READY&&this.startGame()}},{key:"onOwnStatusChanged",value:function(e){this.setState({ownStatus:e})}},{key:"onPartnerStatusChanged",value:function(e){this.setState({partnerStatus:e}),e==_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.READY&&this.state.ownStatus==_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.READY&&this.startGame()}},{key:"onQuestion",value:function(e){var t=!1;this.state.ownStatus==_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.WAITING&&(t=this.ownPanel.current.onQuestion(e)),t&&this.ownPanel.current.sendBoard()}},{key:"onAnswer",value:function(e){var t,n=!1;this.state.ownStatus==_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.GUESSING&&(n=this.partnerPanel.current.onAnswer(e));var r=_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().isPlayer1?1:2,i="player"+r+"Status",o="player"+(3-r)+"Status";n&&this.ownPanel.current.sendBoard(),Object(_user_js__WEBPACK_IMPORTED_MODULE_3__.b)((_defineProperty(t={},i,n?_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.WON:_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.WAITING),_defineProperty(t,o,n?_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.LOST:_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.GUESSING),t))}},{key:"render",value:function(){var e=this;this.state.ownStatus,_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.WAITING;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{width:"100%",height:"auto"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(GamePanel,{player:1,playerStatus:this.state.ownStatus,onReady:function(t){return e.gameReady()},ref:this.ownPanel}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(GamePanel,{player:2,playerStatus:this.state.partnerStatus,ref:this.partnerPanel})))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),GamePage}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component),GamePanel=function(_React$Component2){_inherits(GamePanel,_React$Component2);var _super2=_createSuper(GamePanel),_switchBoard,_showPartnerBoard;function GamePanel(){var e;return _classCallCheck(this,GamePanel),(e=_super2.call(this)).state={hover:null,contextTile:null,airplanes:{},outlineOn:null,selected:null,moving:null,guessOn:null,hits:[],marks:[],guessing:0,destroyed:0,remaining:3,storage:null},e.tilemap=Array(10).fill(0).map((function(e){return Array(10).fill(0).map((function(e){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createRef()}))})),e.toolbar=react__WEBPACK_IMPORTED_MODULE_0___default.a.createRef(),e.key_root=1,e}return _createClass(GamePanel,[{key:"onQuestion",value:function(e){var t=_slicedToArray(e,2),n=(t[0],t[1]),r=this.tilemap[n[0]][n[1]].current.has,i=this.state.remaining-("H"==r);Object(_user_js__WEBPACK_IMPORTED_MODULE_3__.b)({answer:[+_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().isPlayer1+n.join(""),r]});var o=this.state.hits;return o.push(n),this.setState({hits:o,remaining:i}),0==i}},{key:"onAnswer",value:function(e){var t=_slicedToArray(e,2),n=(t[0],t[1]),r=this.state.destroyed+("H"==n),i=this.state.marks,o=this.state.guessOn;return i.push([o[0],o[1],n]),this.setState({guessing:0,marks:i,destroyed:r}),3==r}},{key:"tool",value:function(e){var t=this.toolbar.current,n=0;"H"!=e?(t.setState({tool:e}),this.activeTool=e):(n=2,Object(_user_js__WEBPACK_IMPORTED_MODULE_3__.b)({question:[+_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().isPlayer1,this.state.guessOn]}),t.setState({tool:null}),this.activeTool=null),this.setState({selected:null,outlineOn:null,moving:null,hover:null,guessing:n})}},{key:"hoverTile",value:function(e,t){if("A"==this.activeTool&&this.setState({hover:e?"target":null,contextTile:t}),"X"==this.activeTool){var n=this.tilemap[t.row][t.col].current;"H"!=n.has&&"B"!=n.has||this.setState({outlineOn:e?{key:n.akey,color:"red"}:null})}if("R"==this.activeTool&&!this.state.selected){var r=this.tilemap[t.row][t.col].current;"H"!=r.has&&"B"!=r.has||this.setState({outlineOn:e?{key:r.akey,color:"blue"}:null})}if("M"==this.activeTool&&!this.state.moving){var i=this.tilemap[t.row][t.col].current;"H"!=i.has&&"B"!=i.has||this.setState({outlineOn:e?{key:i.akey,color:"gold"}:null})}"M"==this.activeTool&&this.state.moving&&this.setState({hover:e?"airplane":null,contextTile:t}),"G"==this.activeTool&&this.setState({hover:e?"guess":null,contextTile:t})}},{key:"clickTile",value:function(e,t){var n=this;if("A"==this.activeTool&&Object.values(this.state.airplanes).length<3){var r=this.key_root++;[0,90,-90,180].some((function(i){return n.addAirplane({row:e,col:t,r:i},r)}))&&(this.activeTool="r",this.setState({hover:null,outlineOn:{key:r,color:"blue"},selected:r}),this.toolbar.current.setState({tool:"R"}))}if("X"==this.activeTool){var i=this.tilemap[e][t].current;"H"!=i.has&&"B"!=i.has||this.removeAirplane(i.akey)}if("R"==this.activeTool&&!this.state.selected){var o=this.tilemap[e][t].current;"H"!=o.has&&"B"!=o.has||this.setState({selected:o.akey})}if("M"==this.activeTool){var a=this.tilemap[e][t].current;if(this.state.moving||"H"!=a.has&&"B"!=a.has){if(this.state.moving){var s=this.state.moving.translate;this.addAirplane({row:e-s[0],col:t-s[1],r:this.state.moving.r},this.state.moving.key)&&this.setState({moving:null,hover:null,contextTile:null})}}else{var u=this.state.airplanes[a.akey],l=[e-u.row,t-u.col];this.setState({moving:{key:a.akey,r:this.state.airplanes[a.akey].r,translate:l},hover:"airplane",contextTile:{row:e,col:t}}),this.removeAirplane(a.akey)}}if("G"==this.activeTool){if(this.state.marks.some((function(n){var r=_slicedToArray(n,3),i=r[0],o=r[1];r[2];return i==e&&o==t})))return;this.setState({guessOn:[e,t],guessing:1})}}},{key:"addAirplane",value:function(e,t){var n=Object.values(this.state.airplanes).length;if(!this.check(e))return!1;var r=_objectSpread({},this.state.airplanes);return r[t]=e,this.setState({airplanes:r}),this.registerAirplane(e,t),this.toolbar.current.setState({finished:2==n}),!0}},{key:"removeAirplane",value:function(e){var t=_objectSpread({},this.state.airplanes),n=t[e];delete t[e],this.setState({outlineOn:null,airplanes:t}),this.registerAirplane(n,e,!1),this.toolbar.current.setState({finished:!1})}},{key:"registerAirplane",value:function(e,t){var n=this,r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=[[0,0],[0,1],[-1,1],[-2,1],[1,1],[2,1],[0,2],[0,3],[-1,3],[1,3]],o=function(e){return 0==e?1:90==e||-90==e?0:180==e?-1:null},a=function(e){return 0==e?0:90==e?1:-90==e?-1:180==e?0:null},s=function(e,t,n){return[e*o(n)-t*a(n),t*o(n)+e*a(n)]};i.forEach((function(i){var o=_slicedToArray(i,2),a=o[0],u=o[1],l=_slicedToArray(s(a,u,e.r),2);if(a=l[0],u=l[1],0<=e.row+u&&e.row+u<10&&0<=e.col+a&&e.col+a<10){var c=n.tilemap[e.row+u][e.col+a].current;c.has=r?0==a&&0==u?"H":"B":"A",c.akey=r?t:null}}))}},{key:"rotateAirplane",value:function(e,t){var n=_objectSpread({},this.state.airplanes);this.registerAirplane(n[e],e,!1),n[e].r=t,this.setState({airplanes:n}),this.registerAirplane(n[e],e,!0)}},{key:"rotateOk",value:function(){"r"==this.activeTool&&(this.toolbar.current.setState({tool:"A"}),this.activeTool="A"),this.setState({outlineOn:null,selected:null})}},{key:"check",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=[[0,0],[0,1],[-1,1],[-2,1],[1,1],[2,1],[0,2],[0,3],[-1,3],[1,3]],i=function(e){return 0==e?1:90==e||-90==e?0:180==e?-1:null},o=function(e){return 0==e?0:90==e?1:-90==e?-1:180==e?0:null},a=function(e,t,n){return[e*i(n)-t*o(n),t*i(n)+e*o(n)]};return r.every((function(r){var i=_slicedToArray(r,2),o=i[0],s=i[1],u=_slicedToArray(a(o,s,e.r),2);if(o=u[0],s=u[1],!(0<=e.row+s&&e.row+s<10&&0<=e.col+o&&e.col+o<10))return!1;var l=t.tilemap[e.row+s][e.col+o].current;return"H"!=l.has&&"B"!=l.has||l.akey==n}))}},{key:"checkRotation",value:function(e,t){return this.check(_objectSpread(_objectSpread({},this.state.airplanes[e]),{},{r:t}),e)}},{key:"ready",value:function(){this.setState({selected:null}),this.activeTool=null,this.props.onReady()}},{key:"sendBoard",value:function(){var e="board"+ +_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().isPlayer1;Object(_user_js__WEBPACK_IMPORTED_MODULE_3__.b)(_defineProperty({},e,this.state.airplanes))}},{key:"showPartnerBoard",value:(_showPartnerBoard=_asyncToGenerator(regeneratorRuntime.mark((function e(){var t,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=+!_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().isPlayer1,e.next=3,_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().dbGame.child("board"+t).once("value");case 3:n=e.sent.val(),this.setState({storage:{airplanes:this.state.airplanes,hits:this.state.hits},airplanes:n,hits:[]});case 5:case"end":return e.stop()}}),e,this)}))),function(){return _showPartnerBoard.apply(this,arguments)})},{key:"showOwnBoard",value:function(){var e=this.state.storage,t=e.airplanes,n=e.hits;this.setState({airplanes:t,hits:n,storage:null})}},{key:"switchBoard",value:(_switchBoard=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.state.storage?this.showOwnBoard():this.showPartnerBoard();case 1:case"end":return e.stop()}}),e,this)}))),function(){return _switchBoard.apply(this,arguments)})},{key:"render",value:function(){var e,t,n,r,i=this,o=[];return this.active&&(o=Array(10).fill(0)),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"game-panel-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"game-panel"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{className:"game-svg",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 100 100"},o.map((function(e,t){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,{key:t},o.map((function(e,n){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Tile,{row:t,col:n,key:n,onhover:i.hoverTile.bind(i),click:i.clickTile.bind(i),ref:i.tilemap[t][n]})})))})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_defs_jsx__WEBPACK_IMPORTED_MODULE_4__.a,null),Object.entries(this.state.airplanes).map((function(e){var t=_slicedToArray(e,2),n=t[0],r=t[1],i=r.row,o=r.col,a=r.r;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#airplane",key:n,fill:"white",stroke:"black",strokeWidth:"0.5",transform:"translate(".concat(10*o+5," ").concat(10*i+5,") rotate(").concat(a,")")})})),this.state.outlineOn&&(n=this.state.airplanes[this.state.outlineOn.key],r=this.state.outlineOn.color,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#airplane",stroke:r,strokeWidth:"0.5",fill:"white",transform:"translate(".concat(10*n.col+5," ").concat(10*n.row+5,") rotate(").concat(n.r,")")})),this.state.guessing&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{x:10*this.state.guessOn[1],y:10*this.state.guessOn[0],width:"10",height:"10",viewBox:"0 0 100 100",style:{pointerEvents:"none"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#target-no-stroke",stroke:"#527",transform:"rotate(45,50,50)"})),null===(e=this.state.hits)||void 0===e?void 0:e.map((function(e,t){var n=_slicedToArray(e,2),r=n[0],i=n[1];return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{x:10*i,y:10*r,viewBox:"0 0 100 100",width:"10",height:"10",key:t,style:{pointerEvents:"none"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#cross-no-color",stroke:"#732"}))})),null===(t=this.state.marks)||void 0===t?void 0:t.map((function(e,t){var n=_slicedToArray(e,3),r=n[0],i=n[1],o=n[2];return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{x:10*i,y:10*r,viewBox:"0 0 100 100",width:"10",height:"10",key:t,style:{pointerEvents:"none"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#mark-"+o}))})),this.state.selected&&function(e){var t=[90,180,-90,0];return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,null,[-90,0,90,180].map((function(n,r){return o=i.checkRotation(i.state.selected,t[r]),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#circle-btn",key:n,onClick:o?function(e){return i.rotateAirplane(i.state.selected,t[r])}:null,transform:"translate(".concat(10*e.col+5," ").concat(10*e.row+5,") rotate(").concat(n,")"),className:e.r!=t[r]&&o?"blue-btn":"grey-btn"});var o})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("g",{onClick:i.rotateOk.bind(i)},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("circle",{cx:10*e.col+5,cy:10*e.row+5,r:"3",className:"green-btn"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("path",{d:"M-2 0 L0 2 L3 -4",stroke:"white",fill:"none",strokeWidth:"0.5",transform:"translate(".concat(10*e.col+5," ").concat(10*e.row+5,")"),style:{pointerEvents:"none"}})))}(this.state.airplanes[this.state.selected]),this.state.contextTile&&"target"==this.state.hover?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{x:10*this.state.contextTile.col,y:10*this.state.contextTile.row,width:"10",height:"10",viewBox:"0 0 100 100",style:{pointerEvents:"none"}},"A"==this.activeTool&&Object.values(this.state.airplanes).length<3?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#target"}):react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#no-target"})):"airplane"==this.state.hover?function(e,t){return function(e){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#airplane",fill:i.check(e)?"#fffa":"#fbba",stroke:"#000a",strokeWidth:"0.5",transform:"translate(".concat(10*e.col+5," ").concat(10*e.row+5,") rotate(").concat(e.r,")")})}({row:e.row-t.translate[0],col:e.col-t.translate[1],r:t.r})}(this.state.contextTile,this.state.moving):"guess"==this.state.hover&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{x:10*this.state.contextTile.col,y:10*this.state.contextTile.row,width:"10",height:"10",viewBox:"0 0 100 100",style:{pointerEvents:"none"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#guess"}))),2==this.props.player&&-1!=[-1,0,1,2].indexOf(this.props.playerStatus)&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"game-messages"},-1==this.props.playerStatus&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"message"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"en"},"Copy and send this code to a friend: ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{readOnly:!0,value:_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().gameId})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"ro"},"Copiaza si trimite codul unui prieten: ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{readOnly:!0,value:_user_js__WEBPACK_IMPORTED_MODULE_3__.g.get().gameId}))),this.props.playerStatus==_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.NOT_ENTERED&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"message"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"en"},"Waiting for partner to join..."),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"ro"},"Se asteapta alaturarea partenerului...")),this.props.playerStatus==_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.PLACING&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"message"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"en"},"Your game partner is placing the airplanes..."),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"ro"},"Partenerul de joc isi asaza acum avioanele...")),this.props.playerStatus==_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.READY&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"message"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"en"},"Your game partner is ready to play."),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"ro"},"Partenerul de joc este gata sa inceapa."))),1==this.props.player&&this.props.playerStatus<_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.READY?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(GameTools,{ref:this.toolbar,tool:this.tool.bind(this),onReady:function(e){return i.ready()},player:1}):2==this.props.player&&this.props.playerStatus>_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.READY&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(GameTools,{ref:this.toolbar,tool:this.tool.bind(this),hasTurn:this.props.playerStatus==_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.WAITING,guessStatus:this.state.guessing,player:2}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"indicator",hidden:this.props.playerStatus!=_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.WAITING},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"en"},"It's your ",1==this.props.player&&"partner's"," turn."),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"ro"},"Este randul ",1==this.props.player&&"partenerului"," tau.")),this.props.playerStatus>=_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.LOST&&(2==this.props.player?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"indicator"},this.props.playerStatus==_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.LOST?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"en"},"Congratulations, you won! :))"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"ro"},"Felicitari, ai castigat! :))")):react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"en"},"Too bad! You lost! :( Better luck next time!"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"ro"},"Ce pacat! Ai pierdut! :( Mai mult noroc data viitoare! "))):react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"indicator btn",onClick:this.switchBoard.bind(this)},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"en"},"Check your ",!this.state.storage&&"partner's"," board"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{lang:"ro"},"Vezi tabla ",this.state.storage?"partenerului":"ta")))))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}},{key:"active",get:function(){return 1==this.props.player||this.props.playerStatus>_utils_jsx__WEBPACK_IMPORTED_MODULE_2__.b.READY}}]),GamePanel}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component),GameTools=function(_React$Component3){_inherits(GameTools,_React$Component3);var _super3=_createSuper(GameTools);function GameTools(){var e;return _classCallCheck(this,GameTools),(e=_super3.call(this)).state={tool:null},e}return _createClass(GameTools,[{key:"render",value:function(){var e=this;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"game-tools"},2==this.props.player?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"gtools-group"},this.props.hasTurn&&2!=this.props.guessStatus&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"g-tool G "+("G"==this.state.tool&&"active"),onClick:function(t){return e.props.tool("G")}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{viewBox:"0 0 100 100"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#hit"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"g-tool H "+(1===this.props.guessStatus&&"visible"),onClick:function(t){return e.props.tool("H")}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{viewBox:"0 0 100 100"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#send"})))," ")):null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"g-tool A"+("A"==this.state.tool?" active":""),onClick:function(t){return e.props.tool("A")}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{viewBox:"0 0 100 100"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#add"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"g-tool X"+("X"==this.state.tool?" active":""),onClick:function(t){return e.props.tool("X")}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{viewBox:"0 0 100 100"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#cross"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"g-tool R"+("R"==this.state.tool?" active":""),onClick:function(t){return e.props.tool("R")}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{viewBox:"0 0 100 100"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#rotate"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"g-tool M"+("M"==this.state.tool?" active":""),onClick:function(t){return e.props.tool("M")}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{viewBox:"0 0 100 100"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#move"}))),1==this.props.player?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"g-tool ok"+(this.state.finished?" active ":""),onClick:function(t){return e.props.onReady()}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg",{viewBox:"0 0 100 100"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use",{xlinkHref:"#play"}))):null)}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),GameTools}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component),Tile=function(_React$Component4){_inherits(Tile,_React$Component4);var _super4=_createSuper(Tile);function Tile(e){var t;return _classCallCheck(this,Tile),(t=_super4.call(this,e)).state={},t.has="A",t}return _createClass(Tile,[{key:"render",value:function(){var e=this,t=this.props,n=t.row,r=t.col,i=10*r,o=10*n;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("rect",{x:i,y:o,width:"10",height:"10",stroke:"black",strokeWidth:"0.5",fill:"transparent",onMouseOver:function(t){return e.props.onhover(!0,{row:n,col:r})},onMouseOut:function(t){return e.props.onhover(!1,{row:n,col:r})},onClick:function(t){return e.props.click(n,r)}}))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),Tile}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component),reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&(reactHotLoader.register(GamePage,"GamePage","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\game.jsx"),reactHotLoader.register(GamePanel,"GamePanel","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\game.jsx"),reactHotLoader.register(GameTools,"GameTools","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\game.jsx"),reactHotLoader.register(Tile,"Tile","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\game.jsx")),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(22)(module))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return u}));var r,i=n(0),o=n.n(i);(r="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&r(e);var a,s;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function u(){return o.a.createElement("defs",{xmlns:"http://www.w3.org/2000/svg"},o.a.createElement("path",{id:"plus",d:"M20 50 H80 M50 20 V80 Z",strokeWidth:"10%"}),o.a.createElement("use",{id:"add",xlinkHref:"#plus",stroke:"black"}),o.a.createElement("use",{id:"cross-no-color",xlinkHref:"#plus",transform:"rotate(45 50 50)"}),o.a.createElement("use",{id:"cross",xlinkHref:"#cross-no-color",stroke:"black"}),o.a.createElement("polygon",{id:"arrowhead",points:"-12,0 12,0 0,-16",fill:"black"}),o.a.createElement("g",{id:"rotate"},o.a.createElement("path",{d:"M75 50 A25 25 0 1 1 50 25",strokeWidth:"10%",stroke:"black",fill:"none"}),o.a.createElement("use",{xlinkHref:"#arrowhead",transform:"translate(75 50)"})),o.a.createElement("g",{id:"move"},o.a.createElement("use",{xlinkHref:"#add",transform:"matrix(0.83, 0, 0, 0.83, 8.5, 8.5)"}),o.a.createElement("use",{xlinkHref:"#arrowhead",transform:"translate(50 25)"}),o.a.createElement("use",{xlinkHref:"#arrowhead",transform:"translate(50 75) rotate(180)"}),o.a.createElement("use",{xlinkHref:"#arrowhead",transform:"translate(25 50) rotate(-90)"}),o.a.createElement("use",{xlinkHref:"#arrowhead",transform:"translate(75 50) rotate(90)"})),o.a.createElement("use",{id:"hit",xlinkHref:"#target-no-stroke",stroke:"white"}),o.a.createElement("g",{id:"send"},o.a.createElement("path",null)),o.a.createElement("polygon",{id:"play",points:"25,20 25,80 75,50",fill:"black"}),o.a.createElement("mask",{id:"target-hole"},o.a.createElement("rect",{x:"0",y:"0",width:"100",height:"100",fill:"white"}),o.a.createElement("circle",(n="black",(t="fill")in(e={cx:"50",cy:"50",r:"15",fill:"silver"})?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e))),o.a.createElement("g",{id:"target-no-stroke"},o.a.createElement("use",{xlinkHref:"#plus",mask:"url(#target-hole)"}),o.a.createElement("circle",{cx:"50",cy:"50",r:"15",fill:"transparent",strokeWidth:"10"})),o.a.createElement("use",{id:"target",xlinkHref:"#target-no-stroke",stroke:"red"}),o.a.createElement("use",{id:"no-target",xlinkHref:"#target-no-stroke",stroke:"#333"}),o.a.createElement("use",{id:"guess",xlinkHref:"#target-no-stroke",stroke:"#c27"}),o.a.createElement("polygon",{id:"airplane",points:"0,-5 -5,5 -25,5 -25,15 -5,15 -5,25 -15,25 -15,35 15,35 15,25 5,25 5,15 25,15 25,5 5,5 0,-5",style:{pointerEvents:"none"}}),o.a.createElement("g",{id:"circle-btn"},o.a.createElement("circle",{cx:"0",cy:"-10",r:"3"}),o.a.createElement("path",{d:"M-1 -9.5 l1 -1 l1 1",stroke:"white",fill:"none",strokeWidth:"0.5"})),o.a.createElement("rect",{id:"square-mark",x:"30",y:"30",width:"40",height:"40"}),o.a.createElement("use",{id:"mark-H",xlinkHref:"#square-mark",transform:"rotate(45 50 50)",fill:"grey"}),o.a.createElement("use",{id:"mark-B",xlinkHref:"#square-mark",fill:"grey"}),o.a.createElement("circle",{id:"mark-A",cx:"50",cy:"50",r:"20",stroke:"grey",strokeWidth:"10",fill:"transparent"}),o.a.createElement("g",{id:"linearGradients"},o.a.createElement("linearGradient",{id:"blue",gradientTransform:"rotate(90)"},o.a.createElement("stop",{stopColor:"#99c9ff",offset:"2%"}),o.a.createElement("stop",{stopColor:"#1176e8",offset:"50%"}),o.a.createElement("stop",{stopColor:"#106ad1",offset:"50%"}),o.a.createElement("stop",{stopColor:"#1268ca",offset:"88%"}),o.a.createElement("stop",{stopColor:"#115eb6",offset:"100%"})),o.a.createElement("linearGradient",{id:"blue",gradientTransform:"rotate(90)"},o.a.createElement("stop",{stopColor:"#99c9ff",offset:"2%"}),o.a.createElement("stop",{stopColor:"#1176e8",offset:"50%"}),o.a.createElement("stop",{stopColor:"#106ad1",offset:"50%"}),o.a.createElement("stop",{stopColor:"#1268ca",offset:"88%"}),o.a.createElement("stop",{stopColor:"#115eb6",offset:"100%"})),o.a.createElement("linearGradient",{id:"blue-hover",gradientTransform:"rotate(90)"},o.a.createElement("stop",{stopColor:"#115eb6",offset:"2%"}),o.a.createElement("stop",{stopColor:"#1268ca",offset:"50%"}),o.a.createElement("stop",{stopColor:"#106ad1",offset:"50%"}),o.a.createElement("stop",{stopColor:"#1176e8",offset:"88%"}),o.a.createElement("stop",{stopColor:"#99c9ff",offset:"100%"})),o.a.createElement("linearGradient",{id:"green",gradientTransform:"rotate(90)"},o.a.createElement("stop",{stopColor:"#99ff99",offset:"2%"}),o.a.createElement("stop",{stopColor:"#12e912",offset:"50%"}),o.a.createElement("stop",{stopColor:"#10d110",offset:"50%"}),o.a.createElement("stop",{stopColor:"#11c911",offset:"88%"}),o.a.createElement("stop",{stopColor:"#11b411",offset:"100%"})),o.a.createElement("linearGradient",{id:"green-hover",gradientTransform:"rotate(90)"},o.a.createElement("stop",{stopColor:"#11b411",offset:"2%"}),o.a.createElement("stop",{stopColor:"#11c911",offset:"50%"}),o.a.createElement("stop",{stopColor:"#10d110",offset:"50%"}),o.a.createElement("stop",{stopColor:"#12e912",offset:"88%"}),o.a.createElement("stop",{stopColor:"#99ff99",offset:"100%"})),o.a.createElement("linearGradient",{id:"gold",gradientTransform:"rotate(90)"},o.a.createElement("stop",{stopColor:"#fdff99",offset:"2%"}),o.a.createElement("stop",{stopColor:"#e5e811",offset:"50%"}),o.a.createElement("stop",{stopColor:"#dbdf11",offset:"50%"}),o.a.createElement("stop",{stopColor:"#c7ca12",offset:"88%"}),o.a.createElement("stop",{stopColor:"#b3b611",offset:"100%"})),o.a.createElement("linearGradient",{id:"gold-hover",gradientTransform:"rotate(90)"},o.a.createElement("stop",{stopColor:"#b3b611",offset:"2%"}),o.a.createElement("stop",{stopColor:"#c7ca12",offset:"50%"}),o.a.createElement("stop",{stopColor:"#dbdf11",offset:"50%"}),o.a.createElement("stop",{stopColor:"#e5e811",offset:"88%"}),o.a.createElement("stop",{stopColor:"#fdff99",offset:"100%"}))));var e,t,n}(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&a.register(u,"GameDefs","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\defs.jsx"),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(e)}).call(this,n(22)(e))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return u}));var r,i=n(0),o=n.n(i);(r="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&r(e);var a,s;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function u(e){e.lang;return o.a.createElement(o.a.Fragment,null)}(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&a.register(u,"HowToPlayPage","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\howtoplay.jsx"),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&s(e)}).call(this,n(22)(e))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return l}));var r,i=n(0),o=n.n(i),a=n(4);(r="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&r(e);var s,u;"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;function l(){return o.a.createElement(a.a,{size:"2em",className:"middle-message"},o.a.createElement("span",{lang:"en"},"Hold On A Moment..."),o.a.createElement("span",{lang:"ro"},"O clipa..."))}(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&s.register(l,"HoldOnPage","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\holdon.jsx"),(u="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&u(e)}).call(this,n(22)(e))},function(module,__webpack_exports__,__webpack_require__){"use strict";(function(module){__webpack_require__.d(__webpack_exports__,"a",(function(){return PrivateJoinPage}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_public_css_private_css__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(373),_public_css_private_css__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_public_css_private_css__WEBPACK_IMPORTED_MODULE_1__),_user__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(6),enterModule;function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function asyncGeneratorStep(e,t,n,r,i,o,a){try{var s=e[o](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,i)}function _asyncToGenerator(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){asyncGeneratorStep(o,r,i,a,s,"next",e)}function s(e){asyncGeneratorStep(o,r,i,a,s,"throw",e)}a(void 0)}))}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(e){var t=_isNativeReflectConstruct();return function(){var n,r=_getPrototypeOf(e);if(t){var i=_getPrototypeOf(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return _possibleConstructorReturn(this,n)}}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}enterModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0,enterModule&&enterModule(module);var __signature__="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default.signature:function(e){return e},PrivateJoinPage=function(_React$Component){_inherits(PrivateJoinPage,_React$Component);var _super=_createSuper(PrivateJoinPage),_joinGame;function PrivateJoinPage(){var e;return _classCallCheck(this,PrivateJoinPage),(e=_super.call(this)).state={join:!1,code:""},e}return _createClass(PrivateJoinPage,[{key:"componentDidMount",value:function(){_user__WEBPACK_IMPORTED_MODULE_2__.g.reinit()}},{key:"newGame",value:function(){Object(_user__WEBPACK_IMPORTED_MODULE_2__.e)();app.setState({page:"game"})}},{key:"joinGame",value:(_joinGame=_asyncToGenerator(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:Object(_user__WEBPACK_IMPORTED_MODULE_2__.d)(this.state.code);case 1:case"end":return e.stop()}}),e,this)}))),function(){return _joinGame.apply(this,arguments)})},{key:"setCode",value:function(e){this.setState({code:e.target.value})}},{key:"render",value:function(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"private-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"start-new-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{className:"start-new-btn",onClick:this.newGame.bind(this)},"New Private Game")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"code-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"input-container"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"code",value:this.state.code,onChange:this.setCode.bind(this)})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{className:"go",onClick:this.joinGame.bind(this)},"Start Game")))}},{key:"__reactstandin__regenerateByEval",value:function __reactstandin__regenerateByEval(key,code){this[key]=eval(code)}}]),PrivateJoinPage}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component),reactHotLoader,leaveModule;reactHotLoader="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0,reactHotLoader&&reactHotLoader.register(PrivateJoinPage,"PrivateJoinPage","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\privatejoin.jsx"),leaveModule="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0,leaveModule&&leaveModule(module)}).call(this,__webpack_require__(22)(module))},function(e,t,n){n(153),e.exports=n(355)},function(e,t,n){"use strict";(function(e){if(n(154),n(351),n(352),e._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");e._babelPolyfill=!0;function t(e,t,n){e[t]||Object.defineProperty(e,t,{writable:!0,configurable:!0,value:n})}t(String.prototype,"padLeft","".padStart),t(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach((function(e){[][e]&&t(Array,e,Function.call.bind([][e]))}))}).call(this,n(57))},function(e,t,n){n(155),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(230),n(231),n(232),n(233),n(235),n(236),n(238),n(239),n(240),n(241),n(242),n(243),n(244),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(92),n(259),n(123),n(260),n(124),n(261),n(262),n(263),n(264),n(265),n(127),n(129),n(130),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(276),n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(286),n(287),n(288),n(289),n(290),n(291),n(292),n(293),n(294),n(295),n(296),n(297),n(298),n(299),n(300),n(301),n(302),n(303),n(304),n(305),n(306),n(307),n(308),n(309),n(310),n(311),n(312),n(313),n(314),n(315),n(316),n(317),n(318),n(319),n(320),n(321),n(322),n(323),n(324),n(325),n(326),n(327),n(328),n(329),n(330),n(331),n(332),n(333),n(334),n(335),n(336),n(337),n(338),n(339),n(340),n(341),n(342),n(343),n(344),n(345),n(346),n(347),n(348),n(349),n(350),e.exports=n(23)},function(e,t,n){"use strict";var r=n(5),i=n(18),o=n(11),a=n(1),s=n(16),u=n(35).KEY,l=n(7),c=n(52),f=n(48),h=n(38),p=n(9),d=n(105),v=n(73),_=n(157),y=n(60),g=n(3),m=n(8),b=n(13),w=n(19),E=n(28),T=n(37),C=n(41),S=n(108),P=n(20),O=n(59),I=n(12),k=n(39),x=P.f,A=I.f,D=S.f,N=r.Symbol,R=r.JSON,M=R&&R.stringify,L=p("_hidden"),F=p("toPrimitive"),j={}.propertyIsEnumerable,U=c("symbol-registry"),W=c("symbols"),B=c("op-symbols"),H=Object.prototype,K="function"==typeof N&&!!O.f,V=r.QObject,G=!V||!V.prototype||!V.prototype.findChild,q=o&&l((function(){return 7!=C(A({},"a",{get:function(){return A(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=x(H,t);r&&delete H[t],A(e,t,n),r&&e!==H&&A(H,t,r)}:A,z=function(e){var t=W[e]=C(N.prototype);return t._k=e,t},Q=K&&"symbol"==typeof N.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof N},Y=function(e,t,n){return e===H&&Y(B,t,n),g(e),t=E(t,!0),g(n),i(W,t)?(n.enumerable?(i(e,L)&&e[L][t]&&(e[L][t]=!1),n=C(n,{enumerable:T(0,!1)})):(i(e,L)||A(e,L,T(1,{})),e[L][t]=!0),q(e,t,n)):A(e,t,n)},$=function(e,t){g(e);for(var n,r=_(t=w(t)),i=0,o=r.length;o>i;)Y(e,n=r[i++],t[n]);return e},X=function(e){var t=j.call(this,e=E(e,!0));return!(this===H&&i(W,e)&&!i(B,e))&&(!(t||!i(this,e)||!i(W,e)||i(this,L)&&this[L][e])||t)},J=function(e,t){if(e=w(e),t=E(t,!0),e!==H||!i(W,t)||i(B,t)){var n=x(e,t);return!n||!i(W,t)||i(e,L)&&e[L][t]||(n.enumerable=!0),n}},Z=function(e){for(var t,n=D(w(e)),r=[],o=0;n.length>o;)i(W,t=n[o++])||t==L||t==u||r.push(t);return r},ee=function(e){for(var t,n=e===H,r=D(n?B:w(e)),o=[],a=0;r.length>a;)!i(W,t=r[a++])||n&&!i(H,t)||o.push(W[t]);return o};K||(s((N=function(){if(this instanceof N)throw TypeError("Symbol is not a constructor!");var e=h(arguments.length>0?arguments[0]:void 0),t=function(n){this===H&&t.call(B,n),i(this,L)&&i(this[L],e)&&(this[L][e]=!1),q(this,e,T(1,n))};return o&&G&&q(H,e,{configurable:!0,set:t}),z(e)}).prototype,"toString",(function(){return this._k})),P.f=J,I.f=Y,n(42).f=S.f=Z,n(54).f=X,O.f=ee,o&&!n(34)&&s(H,"propertyIsEnumerable",X,!0),d.f=function(e){return z(p(e))}),a(a.G+a.W+a.F*!K,{Symbol:N});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;te.length>ne;)p(te[ne++]);for(var re=k(p.store),ie=0;re.length>ie;)v(re[ie++]);a(a.S+a.F*!K,"Symbol",{for:function(e){return i(U,e+="")?U[e]:U[e]=N(e)},keyFor:function(e){if(!Q(e))throw TypeError(e+" is not a symbol!");for(var t in U)if(U[t]===e)return t},useSetter:function(){G=!0},useSimple:function(){G=!1}}),a(a.S+a.F*!K,"Object",{create:function(e,t){return void 0===t?C(e):$(C(e),t)},defineProperty:Y,defineProperties:$,getOwnPropertyDescriptor:J,getOwnPropertyNames:Z,getOwnPropertySymbols:ee});var oe=l((function(){O.f(1)}));a(a.S+a.F*oe,"Object",{getOwnPropertySymbols:function(e){return O.f(b(e))}}),R&&a(a.S+a.F*(!K||l((function(){var e=N();return"[null]"!=M([e])||"{}"!=M({a:e})||"{}"!=M(Object(e))}))),"JSON",{stringify:function(e){for(var t,n,r=[e],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=t=r[1],(m(t)||void 0!==e)&&!Q(e))return y(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!Q(t))return t}),r[1]=t,M.apply(R,r)}}),N.prototype[F]||n(15)(N.prototype,F,N.prototype.valueOf),f(N,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){e.exports=n(52)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(39),i=n(59),o=n(54);e.exports=function(e){var t=r(e),n=i.f;if(n)for(var a,s=n(e),u=o.f,l=0;s.length>l;)u.call(e,a=s[l++])&&t.push(a);return t}},function(e,t,n){var r=n(1);r(r.S,"Object",{create:n(41)})},function(e,t,n){var r=n(1);r(r.S+r.F*!n(11),"Object",{defineProperty:n(12).f})},function(e,t,n){var r=n(1);r(r.S+r.F*!n(11),"Object",{defineProperties:n(107)})},function(e,t,n){var r=n(19),i=n(20).f;n(30)("getOwnPropertyDescriptor",(function(){return function(e,t){return i(r(e),t)}}))},function(e,t,n){var r=n(13),i=n(21);n(30)("getPrototypeOf",(function(){return function(e){return i(r(e))}}))},function(e,t,n){var r=n(13),i=n(39);n(30)("keys",(function(){return function(e){return i(r(e))}}))},function(e,t,n){n(30)("getOwnPropertyNames",(function(){return n(108).f}))},function(e,t,n){var r=n(8),i=n(35).onFreeze;n(30)("freeze",(function(e){return function(t){return e&&r(t)?e(i(t)):t}}))},function(e,t,n){var r=n(8),i=n(35).onFreeze;n(30)("seal",(function(e){return function(t){return e&&r(t)?e(i(t)):t}}))},function(e,t,n){var r=n(8),i=n(35).onFreeze;n(30)("preventExtensions",(function(e){return function(t){return e&&r(t)?e(i(t)):t}}))},function(e,t,n){var r=n(8);n(30)("isFrozen",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},function(e,t,n){var r=n(8);n(30)("isSealed",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},function(e,t,n){var r=n(8);n(30)("isExtensible",(function(e){return function(t){return!!r(t)&&(!e||e(t))}}))},function(e,t,n){var r=n(1);r(r.S+r.F,"Object",{assign:n(109)})},function(e,t,n){var r=n(1);r(r.S,"Object",{is:n(110)})},function(e,t,n){var r=n(1);r(r.S,"Object",{setPrototypeOf:n(77).set})},function(e,t,n){"use strict";var r=n(49),i={};i[n(9)("toStringTag")]="z",i+""!="[object z]"&&n(16)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},function(e,t,n){var r=n(1);r(r.P,"Function",{bind:n(111)})},function(e,t,n){var r=n(12).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||n(11)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(e){return""}}})},function(e,t,n){"use strict";var r=n(8),i=n(21),o=n(9)("hasInstance"),a=Function.prototype;o in a||n(12).f(a,o,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=i(e);)if(this.prototype===e)return!0;return!1}})},function(e,t,n){var r=n(1),i=n(113);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(e,t,n){var r=n(1),i=n(114);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(e,t,n){"use strict";var r=n(5),i=n(18),o=n(25),a=n(79),s=n(28),u=n(7),l=n(42).f,c=n(20).f,f=n(12).f,h=n(50).trim,p=r.Number,d=p,v=p.prototype,_="Number"==o(n(41)(v)),y="trim"in String.prototype,g=function(e){var t=s(e,!1);if("string"==typeof t&&t.length>2){var n,r,i,o=(t=y?t.trim():h(t,3)).charCodeAt(0);if(43===o||45===o){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===o){switch(t.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+t}for(var a,u=t.slice(2),l=0,c=u.length;l<c;l++)if((a=u.charCodeAt(l))<48||a>i)return NaN;return parseInt(u,r)}}return+t};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof p&&(_?u((function(){v.valueOf.call(n)})):"Number"!=o(n))?a(new d(g(t)),n,p):g(t)};for(var m,b=n(11)?l(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;b.length>w;w++)i(d,m=b[w])&&!i(p,m)&&f(p,m,c(d,m));p.prototype=v,v.constructor=p,n(16)(r,"Number",p)}},function(e,t,n){"use strict";var r=n(1),i=n(26),o=n(115),a=n(80),s=1..toFixed,u=Math.floor,l=[0,0,0,0,0,0],c="Number.toFixed: incorrect invocation!",f=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*l[n],l[n]=r%1e7,r=u(r/1e7)},h=function(e){for(var t=6,n=0;--t>=0;)n+=l[t],l[t]=u(n/e),n=n%e*1e7},p=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==l[e]){var n=String(l[e]);t=""===t?n:t+a.call("0",7-n.length)+n}return t},d=function(e,t,n){return 0===t?n:t%2==1?d(e,t-1,n*e):d(e*e,t/2,n)};r(r.P+r.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(7)((function(){s.call({})}))),"Number",{toFixed:function(e){var t,n,r,s,u=o(this,c),l=i(e),v="",_="0";if(l<0||l>20)throw RangeError(c);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(v="-",u=-u),u>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(u*d(2,69,1))-69)<0?u*d(2,-t,1):u/d(2,t,1),n*=4503599627370496,(t=52-t)>0){for(f(0,n),r=l;r>=7;)f(1e7,0),r-=7;for(f(d(10,r,1),0),r=t-1;r>=23;)h(1<<23),r-=23;h(1<<r),f(1,1),h(2),_=p()}else f(0,n),f(1<<-t,0),_=p()+a.call("0",l);return _=l>0?v+((s=_.length)<=l?"0."+a.call("0",l-s)+_:_.slice(0,s-l)+"."+_.slice(s-l)):v+_}})},function(e,t,n){"use strict";var r=n(1),i=n(7),o=n(115),a=1..toPrecision;r(r.P+r.F*(i((function(){return"1"!==a.call(1,void 0)}))||!i((function(){a.call({})}))),"Number",{toPrecision:function(e){var t=o(this,"Number#toPrecision: incorrect invocation!");return void 0===e?a.call(t):a.call(t,e)}})},function(e,t,n){var r=n(1);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(e,t,n){var r=n(1),i=n(5).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&i(e)}})},function(e,t,n){var r=n(1);r(r.S,"Number",{isInteger:n(116)})},function(e,t,n){var r=n(1);r(r.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(1),i=n(116),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return i(e)&&o(e)<=9007199254740991}})},function(e,t,n){var r=n(1);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){var r=n(1);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(1),i=n(114);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(e,t,n){var r=n(1),i=n(113);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(e,t,n){var r=n(1),i=n(117),o=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:i(e-1+o(e-1)*o(e+1))}})},function(e,t,n){var r=n(1),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},function(e,t,n){var r=n(1),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},function(e,t,n){var r=n(1),i=n(81);r(r.S,"Math",{cbrt:function(e){return i(e=+e)*Math.pow(Math.abs(e),1/3)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},function(e,t,n){var r=n(1),i=Math.exp;r(r.S,"Math",{cosh:function(e){return(i(e=+e)+i(-e))/2}})},function(e,t,n){var r=n(1),i=n(82);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(e,t,n){var r=n(1);r(r.S,"Math",{fround:n(118)})},function(e,t,n){var r=n(1),i=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,o=0,a=0,s=arguments.length,u=0;a<s;)u<(n=i(arguments[a++]))?(o=o*(r=u/n)*r+1,u=n):o+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*Math.sqrt(o)}})},function(e,t,n){var r=n(1),i=Math.imul;r(r.S+r.F*n(7)((function(){return-5!=i(4294967295,5)||2!=i.length})),"Math",{imul:function(e,t){var n=+e,r=+t,i=65535&n,o=65535&r;return 0|i*o+((65535&n>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},function(e,t,n){var r=n(1);r(r.S,"Math",{log1p:n(117)})},function(e,t,n){var r=n(1);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},function(e,t,n){var r=n(1);r(r.S,"Math",{sign:n(81)})},function(e,t,n){var r=n(1),i=n(82),o=Math.exp;r(r.S+r.F*n(7)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(i(e)-i(-e))/2:(o(e-1)-o(-e-1))*(Math.E/2)}})},function(e,t,n){var r=n(1),i=n(82),o=Math.exp;r(r.S,"Math",{tanh:function(e){var t=i(e=+e),n=i(-e);return t==1/0?1:n==1/0?-1:(t-n)/(o(e)+o(-e))}})},function(e,t,n){var r=n(1);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},function(e,t,n){var r=n(1),i=n(40),o=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,a=0;r>a;){if(t=+arguments[a++],i(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?o(t):o(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},function(e,t,n){var r=n(1),i=n(19),o=n(10);r(r.S,"String",{raw:function(e){for(var t=i(e.raw),n=o(t.length),r=arguments.length,a=[],s=0;n>s;)a.push(String(t[s++])),s<r&&a.push(String(arguments[s]));return a.join("")}})},function(e,t,n){"use strict";n(50)("trim",(function(e){return function(){return e(this,3)}}))},function(e,t,n){"use strict";var r=n(61)(!0);n(83)(String,"String",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})}))},function(e,t,n){"use strict";var r=n(1),i=n(61)(!1);r(r.P,"String",{codePointAt:function(e){return i(this,e)}})},function(e,t,n){"use strict";var r=n(1),i=n(10),o=n(85),a="".endsWith;r(r.P+r.F*n(86)("endsWith"),"String",{endsWith:function(e){var t=o(this,e,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=i(t.length),s=void 0===n?r:Math.min(i(n),r),u=String(e);return a?a.call(t,u,s):t.slice(s-u.length,s)===u}})},function(e,t,n){"use strict";var r=n(1),i=n(85);r(r.P+r.F*n(86)("includes"),"String",{includes:function(e){return!!~i(this,e,"includes").indexOf(e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(1);r(r.P,"String",{repeat:n(80)})},function(e,t,n){"use strict";var r=n(1),i=n(10),o=n(85),a="".startsWith;r(r.P+r.F*n(86)("startsWith"),"String",{startsWith:function(e){var t=o(this,e,"startsWith"),n=i(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return a?a.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){"use strict";n(17)("anchor",(function(e){return function(t){return e(this,"a","name",t)}}))},function(e,t,n){"use strict";n(17)("big",(function(e){return function(){return e(this,"big","","")}}))},function(e,t,n){"use strict";n(17)("blink",(function(e){return function(){return e(this,"blink","","")}}))},function(e,t,n){"use strict";n(17)("bold",(function(e){return function(){return e(this,"b","","")}}))},function(e,t,n){"use strict";n(17)("fixed",(function(e){return function(){return e(this,"tt","","")}}))},function(e,t,n){"use strict";n(17)("fontcolor",(function(e){return function(t){return e(this,"font","color",t)}}))},function(e,t,n){"use strict";n(17)("fontsize",(function(e){return function(t){return e(this,"font","size",t)}}))},function(e,t,n){"use strict";n(17)("italics",(function(e){return function(){return e(this,"i","","")}}))},function(e,t,n){"use strict";n(17)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},function(e,t,n){"use strict";n(17)("small",(function(e){return function(){return e(this,"small","","")}}))},function(e,t,n){"use strict";n(17)("strike",(function(e){return function(){return e(this,"strike","","")}}))},function(e,t,n){"use strict";n(17)("sub",(function(e){return function(){return e(this,"sub","","")}}))},function(e,t,n){"use strict";n(17)("sup",(function(e){return function(){return e(this,"sup","","")}}))},function(e,t,n){var r=n(1);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(e,t,n){"use strict";var r=n(1),i=n(13),o=n(28);r(r.P+r.F*n(7)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(e){var t=i(this),n=o(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},function(e,t,n){var r=n(1),i=n(234);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(e,t,n){"use strict";var r=n(7),i=Date.prototype.getTime,o=Date.prototype.toISOString,a=function(e){return e>9?e:"0"+e};e.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-50000000000001))}))||!r((function(){o.call(new Date(NaN))}))?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),n=e.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+a(e.getUTCMonth()+1)+"-"+a(e.getUTCDate())+"T"+a(e.getUTCHours())+":"+a(e.getUTCMinutes())+":"+a(e.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:o},function(e,t,n){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(16)(r,"toString",(function(){var e=o.call(this);return e==e?i.call(this):"Invalid Date"}))},function(e,t,n){var r=n(9)("toPrimitive"),i=Date.prototype;r in i||n(15)(i,r,n(237))},function(e,t,n){"use strict";var r=n(3),i=n(28);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return i(r(this),"number"!=e)}},function(e,t,n){var r=n(1);r(r.S,"Array",{isArray:n(60)})},function(e,t,n){"use strict";var r=n(24),i=n(1),o=n(13),a=n(119),s=n(87),u=n(10),l=n(88),c=n(89);i(i.S+i.F*!n(63)((function(e){Array.from(e)})),"Array",{from:function(e){var t,n,i,f,h=o(e),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,_=void 0!==v,y=0,g=c(h);if(_&&(v=r(v,d>2?arguments[2]:void 0,2)),null==g||p==Array&&s(g))for(n=new p(t=u(h.length));t>y;y++)l(n,y,_?v(h[y],y):h[y]);else for(f=g.call(h),n=new p;!(i=f.next()).done;y++)l(n,y,_?a(f,v,[i.value,y],!0):i.value);return n.length=y,n}})},function(e,t,n){"use strict";var r=n(1),i=n(88);r(r.S+r.F*n(7)((function(){function e(){}return!(Array.of.call(e)instanceof e)})),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)i(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(1),i=n(19),o=[].join;r(r.P+r.F*(n(53)!=Object||!n(27)(o)),"Array",{join:function(e){return o.call(i(this),void 0===e?",":e)}})},function(e,t,n){"use strict";var r=n(1),i=n(76),o=n(25),a=n(40),s=n(10),u=[].slice;r(r.P+r.F*n(7)((function(){i&&u.call(i)})),"Array",{slice:function(e,t){var n=s(this.length),r=o(this);if(t=void 0===t?n:t,"Array"==r)return u.call(this,e,t);for(var i=a(e,n),l=a(t,n),c=s(l-i),f=new Array(c),h=0;h<c;h++)f[h]="String"==r?this.charAt(i+h):this[i+h];return f}})},function(e,t,n){"use strict";var r=n(1),i=n(14),o=n(13),a=n(7),s=[].sort,u=[1,2,3];r(r.P+r.F*(a((function(){u.sort(void 0)}))||!a((function(){u.sort(null)}))||!n(27)(s)),"Array",{sort:function(e){return void 0===e?s.call(o(this)):s.call(o(this),i(e))}})},function(e,t,n){"use strict";var r=n(1),i=n(31)(0),o=n(27)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(e){return i(this,e,arguments[1])}})},function(e,t,n){var r=n(8),i=n(60),o=n(9)("species");e.exports=function(e){var t;return i(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!i(t.prototype)||(t=void 0),r(t)&&null===(t=t[o])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){"use strict";var r=n(1),i=n(31)(1);r(r.P+r.F*!n(27)([].map,!0),"Array",{map:function(e){return i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),i=n(31)(2);r(r.P+r.F*!n(27)([].filter,!0),"Array",{filter:function(e){return i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),i=n(31)(3);r(r.P+r.F*!n(27)([].some,!0),"Array",{some:function(e){return i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),i=n(31)(4);r(r.P+r.F*!n(27)([].every,!0),"Array",{every:function(e){return i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),i=n(120);r(r.P+r.F*!n(27)([].reduce,!0),"Array",{reduce:function(e){return i(this,e,arguments.length,arguments[1],!1)}})},function(e,t,n){"use strict";var r=n(1),i=n(120);r(r.P+r.F*!n(27)([].reduceRight,!0),"Array",{reduceRight:function(e){return i(this,e,arguments.length,arguments[1],!0)}})},function(e,t,n){"use strict";var r=n(1),i=n(58)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(27)(o)),"Array",{indexOf:function(e){return a?o.apply(this,arguments)||0:i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(1),i=n(19),o=n(26),a=n(10),s=[].lastIndexOf,u=!!s&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(u||!n(27)(s)),"Array",{lastIndexOf:function(e){if(u)return s.apply(this,arguments)||0;var t=i(this),n=a(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},function(e,t,n){var r=n(1);r(r.P,"Array",{copyWithin:n(121)}),n(36)("copyWithin")},function(e,t,n){var r=n(1);r(r.P,"Array",{fill:n(91)}),n(36)("fill")},function(e,t,n){"use strict";var r=n(1),i=n(31)(5),o=!0;"find"in[]&&Array(1).find((function(){o=!1})),r(r.P+r.F*o,"Array",{find:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),n(36)("find")},function(e,t,n){"use strict";var r=n(1),i=n(31)(6),o="findIndex",a=!0;o in[]&&Array(1)[o]((function(){a=!1})),r(r.P+r.F*a,"Array",{findIndex:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),n(36)(o)},function(e,t,n){n(43)("Array")},function(e,t,n){var r=n(5),i=n(79),o=n(12).f,a=n(42).f,s=n(62),u=n(55),l=r.RegExp,c=l,f=l.prototype,h=/a/g,p=/a/g,d=new l(h)!==h;if(n(11)&&(!d||n(7)((function(){return p[n(9)("match")]=!1,l(h)!=h||l(p)==p||"/a/i"!=l(h,"i")})))){l=function(e,t){var n=this instanceof l,r=s(e),o=void 0===t;return!n&&r&&e.constructor===l&&o?e:i(d?new c(r&&!o?e.source:e,t):c((r=e instanceof l)?e.source:e,r&&o?u.call(e):t),n?this:f,l)};for(var v=function(e){e in l||o(l,e,{configurable:!0,get:function(){return c[e]},set:function(t){c[e]=t}})},_=a(c),y=0;_.length>y;)v(_[y++]);f.constructor=l,l.prototype=f,n(16)(r,"RegExp",l)}n(43)("RegExp")},function(e,t,n){"use strict";n(124);var r=n(3),i=n(55),o=n(11),a=/./.toString,s=function(e){n(16)(RegExp.prototype,"toString",e,!0)};n(7)((function(){return"/a/b"!=a.call({source:"a",flags:"b"})}))?s((function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!o&&e instanceof RegExp?i.call(e):void 0)})):"toString"!=a.name&&s((function(){return a.call(this)}))},function(e,t,n){"use strict";var r=n(3),i=n(10),o=n(94),a=n(64);n(65)("match",1,(function(e,t,n,s){return[function(n){var r=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=s(n,e,this);if(t.done)return t.value;var u=r(e),l=String(this);if(!u.global)return a(u,l);var c=u.unicode;u.lastIndex=0;for(var f,h=[],p=0;null!==(f=a(u,l));){var d=String(f[0]);h[p]=d,""===d&&(u.lastIndex=o(l,i(u.lastIndex),c)),p++}return 0===p?null:h}]}))},function(e,t,n){"use strict";var r=n(3),i=n(13),o=n(10),a=n(26),s=n(94),u=n(64),l=Math.max,c=Math.min,f=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(65)("replace",2,(function(e,t,n,d){return[function(r,i){var o=e(this),a=null==r?void 0:r[t];return void 0!==a?a.call(r,o,i):n.call(String(o),r,i)},function(e,t){var i=d(n,e,this,t);if(i.done)return i.value;var f=r(e),h=String(this),p="function"==typeof t;p||(t=String(t));var _=f.global;if(_){var y=f.unicode;f.lastIndex=0}for(var g=[];;){var m=u(f,h);if(null===m)break;if(g.push(m),!_)break;""===String(m[0])&&(f.lastIndex=s(h,o(f.lastIndex),y))}for(var b,w="",E=0,T=0;T<g.length;T++){m=g[T];for(var C=String(m[0]),S=l(c(a(m.index),h.length),0),P=[],O=1;O<m.length;O++)P.push(void 0===(b=m[O])?b:String(b));var I=m.groups;if(p){var k=[C].concat(P,S,h);void 0!==I&&k.push(I);var x=String(t.apply(void 0,k))}else x=v(C,h,S,P,I,t);S>=E&&(w+=h.slice(E,S)+x,E=S+C.length)}return w+h.slice(E)}];function v(e,t,r,o,a,s){var u=r+e.length,l=o.length,c=p;return void 0!==a&&(a=i(a),c=h),n.call(s,c,(function(n,i){var s;switch(i.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(u);case"<":s=a[i.slice(1,-1)];break;default:var c=+i;if(0===c)return n;if(c>l){var h=f(c/10);return 0===h?n:h<=l?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):n}s=o[c-1]}return void 0===s?"":s}))}}))},function(e,t,n){"use strict";var r=n(3),i=n(110),o=n(64);n(65)("search",1,(function(e,t,n,a){return[function(n){var r=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=a(n,e,this);if(t.done)return t.value;var s=r(e),u=String(this),l=s.lastIndex;i(l,0)||(s.lastIndex=0);var c=o(s,u);return i(s.lastIndex,l)||(s.lastIndex=l),null===c?-1:c.index}]}))},function(e,t,n){"use strict";var r=n(62),i=n(3),o=n(56),a=n(94),s=n(10),u=n(64),l=n(93),c=n(7),f=Math.min,h=[].push,p="length",d=!c((function(){RegExp(4294967295,"y")}));n(65)("split",2,(function(e,t,n,c){var v;return v="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[p]||2!="ab".split(/(?:ab)*/)[p]||4!=".".split(/(.?)(.?)/)[p]||".".split(/()()/)[p]>1||"".split(/.?/)[p]?function(e,t){var i=String(this);if(void 0===e&&0===t)return[];if(!r(e))return n.call(i,e,t);for(var o,a,s,u=[],c=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,d=void 0===t?4294967295:t>>>0,v=new RegExp(e.source,c+"g");(o=l.call(v,i))&&!((a=v.lastIndex)>f&&(u.push(i.slice(f,o.index)),o[p]>1&&o.index<i[p]&&h.apply(u,o.slice(1)),s=o[0][p],f=a,u[p]>=d));)v.lastIndex===o.index&&v.lastIndex++;return f===i[p]?!s&&v.test("")||u.push(""):u.push(i.slice(f)),u[p]>d?u.slice(0,d):u}:"0".split(void 0,0)[p]?function(e,t){return void 0===e&&0===t?[]:n.call(this,e,t)}:n,[function(n,r){var i=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,i,r):v.call(String(i),n,r)},function(e,t){var r=c(v,e,this,t,v!==n);if(r.done)return r.value;var l=i(e),h=String(this),p=o(l,RegExp),_=l.unicode,y=(l.ignoreCase?"i":"")+(l.multiline?"m":"")+(l.unicode?"u":"")+(d?"y":"g"),g=new p(d?l:"^(?:"+l.source+")",y),m=void 0===t?4294967295:t>>>0;if(0===m)return[];if(0===h.length)return null===u(g,h)?[h]:[];for(var b=0,w=0,E=[];w<h.length;){g.lastIndex=d?w:0;var T,C=u(g,d?h:h.slice(w));if(null===C||(T=f(s(g.lastIndex+(d?0:w)),h.length))===b)w=a(h,w,_);else{if(E.push(h.slice(b,w)),E.length===m)return E;for(var S=1;S<=C.length-1;S++)if(E.push(C[S]),E.length===m)return E;w=b=T}}return E.push(h.slice(b)),E}]}))},function(e,t,n){"use strict";var r,i,o,a,s=n(34),u=n(5),l=n(24),c=n(49),f=n(1),h=n(8),p=n(14),d=n(44),v=n(45),_=n(56),y=n(95).set,g=n(96)(),m=n(97),b=n(125),w=n(66),E=n(126),T=u.TypeError,C=u.process,S=C&&C.versions,P=S&&S.v8||"",O=u.Promise,I="process"==c(C),k=function(){},x=i=m.f,A=!!function(){try{var e=O.resolve(1),t=(e.constructor={})[n(9)("species")]=function(e){e(k,k)};return(I||"function"==typeof PromiseRejectionEvent)&&e.then(k)instanceof t&&0!==P.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(e){}}(),D=function(e){var t;return!(!h(e)||"function"!=typeof(t=e.then))&&t},N=function(e,t){if(!e._n){e._n=!0;var n=e._c;g((function(){for(var r=e._v,i=1==e._s,o=0,a=function(t){var n,o,a,s=i?t.ok:t.fail,u=t.resolve,l=t.reject,c=t.domain;try{s?(i||(2==e._h&&L(e),e._h=1),!0===s?n=r:(c&&c.enter(),n=s(r),c&&(c.exit(),a=!0)),n===t.promise?l(T("Promise-chain cycle")):(o=D(n))?o.call(n,u,l):u(n)):l(r)}catch(e){c&&!a&&c.exit(),l(e)}};n.length>o;)a(n[o++]);e._c=[],e._n=!1,t&&!e._h&&R(e)}))}},R=function(e){y.call(u,(function(){var t,n,r,i=e._v,o=M(e);if(o&&(t=b((function(){I?C.emit("unhandledRejection",i,e):(n=u.onunhandledrejection)?n({promise:e,reason:i}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",i)})),e._h=I||M(e)?2:1),e._a=void 0,o&&t.e)throw t.v}))},M=function(e){return 1!==e._h&&0===(e._a||e._c).length},L=function(e){y.call(u,(function(){var t;I?C.emit("rejectionHandled",e):(t=u.onrejectionhandled)&&t({promise:e,reason:e._v})}))},F=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),N(t,!0))},j=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw T("Promise can't be resolved itself");(t=D(e))?g((function(){var r={_w:n,_d:!1};try{t.call(e,l(j,r,1),l(F,r,1))}catch(e){F.call(r,e)}})):(n._v=e,n._s=1,N(n,!1))}catch(e){F.call({_w:n,_d:!1},e)}}};A||(O=function(e){d(this,O,"Promise","_h"),p(e),r.call(this);try{e(l(j,this,1),l(F,this,1))}catch(e){F.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(46)(O.prototype,{then:function(e,t){var n=x(_(this,O));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=I?C.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&N(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),o=function(){var e=new r;this.promise=e,this.resolve=l(j,e,1),this.reject=l(F,e,1)},m.f=x=function(e){return e===O||e===a?new o(e):i(e)}),f(f.G+f.W+f.F*!A,{Promise:O}),n(48)(O,"Promise"),n(43)("Promise"),a=n(23).Promise,f(f.S+f.F*!A,"Promise",{reject:function(e){var t=x(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(s||!A),"Promise",{resolve:function(e){return E(s&&this===a?O:this,e)}}),f(f.S+f.F*!(A&&n(63)((function(e){O.all(e).catch(k)}))),"Promise",{all:function(e){var t=this,n=x(t),r=n.resolve,i=n.reject,o=b((function(){var n=[],o=0,a=1;v(e,!1,(function(e){var s=o++,u=!1;n.push(void 0),a++,t.resolve(e).then((function(e){u||(u=!0,n[s]=e,--a||r(n))}),i)})),--a||r(n)}));return o.e&&i(o.v),n.promise},race:function(e){var t=this,n=x(t),r=n.reject,i=b((function(){v(e,!1,(function(e){t.resolve(e).then(n.resolve,r)}))}));return i.e&&r(i.v),n.promise}})},function(e,t,n){"use strict";var r=n(131),i=n(47);n(67)("WeakSet",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(i(this,"WeakSet"),e,!0)}},r,!1,!0)},function(e,t,n){"use strict";var r=n(1),i=n(68),o=n(98),a=n(3),s=n(40),u=n(10),l=n(8),c=n(5).ArrayBuffer,f=n(56),h=o.ArrayBuffer,p=o.DataView,d=i.ABV&&c.isView,v=h.prototype.slice,_=i.VIEW;r(r.G+r.W+r.F*(c!==h),{ArrayBuffer:h}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(e){return d&&d(e)||l(e)&&_ in e}}),r(r.P+r.U+r.F*n(7)((function(){return!new h(2).slice(1,void 0).byteLength})),"ArrayBuffer",{slice:function(e,t){if(void 0!==v&&void 0===t)return v.call(a(this),e);for(var n=a(this).byteLength,r=s(e,n),i=s(void 0===t?n:t,n),o=new(f(this,h))(u(i-r)),l=new p(this),c=new p(o),d=0;r<i;)c.setUint8(d++,l.getUint8(r++));return o}}),n(43)("ArrayBuffer")},function(e,t,n){var r=n(1);r(r.G+r.W+r.F*!n(68).ABV,{DataView:n(98).DataView})},function(e,t,n){n(32)("Int8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(32)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(32)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}),!0)},function(e,t,n){n(32)("Int16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(32)("Uint16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(32)("Int32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(32)("Uint32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(32)("Float32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(32)("Float64",8,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){var r=n(1),i=n(14),o=n(3),a=(n(5).Reflect||{}).apply,s=Function.apply;r(r.S+r.F*!n(7)((function(){a((function(){}))})),"Reflect",{apply:function(e,t,n){var r=i(e),u=o(n);return a?a(r,t,u):s.call(r,t,u)}})},function(e,t,n){var r=n(1),i=n(41),o=n(14),a=n(3),s=n(8),u=n(7),l=n(111),c=(n(5).Reflect||{}).construct,f=u((function(){function e(){}return!(c((function(){}),[],e)instanceof e)})),h=!u((function(){c((function(){}))}));r(r.S+r.F*(f||h),"Reflect",{construct:function(e,t){o(e),a(t);var n=arguments.length<3?e:o(arguments[2]);if(h&&!f)return c(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(l.apply(e,r))}var u=n.prototype,p=i(s(u)?u:Object.prototype),d=Function.apply.call(e,p,t);return s(d)?d:p}})},function(e,t,n){var r=n(12),i=n(1),o=n(3),a=n(28);i(i.S+i.F*n(7)((function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(e,t,n){o(e),t=a(t,!0),o(n);try{return r.f(e,t,n),!0}catch(e){return!1}}})},function(e,t,n){var r=n(1),i=n(20).f,o=n(3);r(r.S,"Reflect",{deleteProperty:function(e,t){var n=i(o(e),t);return!(n&&!n.configurable)&&delete e[t]}})},function(e,t,n){"use strict";var r=n(1),i=n(3),o=function(e){this._t=i(e),this._i=0;var t,n=this._k=[];for(t in e)n.push(t)};n(84)(o,"Object",(function(){var e,t=this._k;do{if(this._i>=t.length)return{value:void 0,done:!0}}while(!((e=t[this._i++])in this._t));return{value:e,done:!1}})),r(r.S,"Reflect",{enumerate:function(e){return new o(e)}})},function(e,t,n){var r=n(20),i=n(21),o=n(18),a=n(1),s=n(8),u=n(3);a(a.S,"Reflect",{get:function e(t,n){var a,l,c=arguments.length<3?t:arguments[2];return u(t)===c?t[n]:(a=r.f(t,n))?o(a,"value")?a.value:void 0!==a.get?a.get.call(c):void 0:s(l=i(t))?e(l,n,c):void 0}})},function(e,t,n){var r=n(20),i=n(1),o=n(3);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(e,t){return r.f(o(e),t)}})},function(e,t,n){var r=n(1),i=n(21),o=n(3);r(r.S,"Reflect",{getPrototypeOf:function(e){return i(o(e))}})},function(e,t,n){var r=n(1);r(r.S,"Reflect",{has:function(e,t){return t in e}})},function(e,t,n){var r=n(1),i=n(3),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(e){return i(e),!o||o(e)}})},function(e,t,n){var r=n(1);r(r.S,"Reflect",{ownKeys:n(133)})},function(e,t,n){var r=n(1),i=n(3),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(e){i(e);try{return o&&o(e),!0}catch(e){return!1}}})},function(e,t,n){var r=n(12),i=n(20),o=n(21),a=n(18),s=n(1),u=n(37),l=n(3),c=n(8);s(s.S,"Reflect",{set:function e(t,n,s){var f,h,p=arguments.length<4?t:arguments[3],d=i.f(l(t),n);if(!d){if(c(h=o(t)))return e(h,n,s,p);d=u(0)}if(a(d,"value")){if(!1===d.writable||!c(p))return!1;if(f=i.f(p,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=s,r.f(p,n,f)}else r.f(p,n,u(0,s));return!0}return void 0!==d.set&&(d.set.call(p,s),!0)}})},function(e,t,n){var r=n(1),i=n(77);i&&r(r.S,"Reflect",{setPrototypeOf:function(e,t){i.check(e,t);try{return i.set(e,t),!0}catch(e){return!1}}})},function(e,t,n){"use strict";var r=n(1),i=n(58)(!0);r(r.P,"Array",{includes:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),n(36)("includes")},function(e,t,n){"use strict";var r=n(1),i=n(134),o=n(13),a=n(10),s=n(14),u=n(90);r(r.P,"Array",{flatMap:function(e){var t,n,r=o(this);return s(e),t=a(r.length),n=u(r,0),i(n,r,r,t,0,1,e,arguments[1]),n}}),n(36)("flatMap")},function(e,t,n){"use strict";var r=n(1),i=n(134),o=n(13),a=n(10),s=n(26),u=n(90);r(r.P,"Array",{flatten:function(){var e=arguments[0],t=o(this),n=a(t.length),r=u(t,0);return i(r,t,t,n,0,void 0===e?1:s(e)),r}}),n(36)("flatten")},function(e,t,n){"use strict";var r=n(1),i=n(61)(!0);r(r.P,"String",{at:function(e){return i(this,e)}})},function(e,t,n){"use strict";var r=n(1),i=n(135),o=n(66),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);r(r.P+r.F*a,"String",{padStart:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},function(e,t,n){"use strict";var r=n(1),i=n(135),o=n(66),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);r(r.P+r.F*a,"String",{padEnd:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},function(e,t,n){"use strict";n(50)("trimLeft",(function(e){return function(){return e(this,1)}}),"trimStart")},function(e,t,n){"use strict";n(50)("trimRight",(function(e){return function(){return e(this,2)}}),"trimEnd")},function(e,t,n){"use strict";var r=n(1),i=n(29),o=n(10),a=n(62),s=n(55),u=RegExp.prototype,l=function(e,t){this._r=e,this._s=t};n(84)(l,"RegExp String",(function(){var e=this._r.exec(this._s);return{value:e,done:null===e}})),r(r.P,"String",{matchAll:function(e){if(i(this),!a(e))throw TypeError(e+" is not a regexp!");var t=String(this),n="flags"in u?String(e.flags):s.call(e),r=new RegExp(e.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=o(e.lastIndex),new l(r,t)}})},function(e,t,n){n(73)("asyncIterator")},function(e,t,n){n(73)("observable")},function(e,t,n){var r=n(1),i=n(133),o=n(19),a=n(20),s=n(88);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=o(e),u=a.f,l=i(r),c={},f=0;l.length>f;)void 0!==(n=u(r,t=l[f++]))&&s(c,t,n);return c}})},function(e,t,n){var r=n(1),i=n(136)(!1);r(r.S,"Object",{values:function(e){return i(e)}})},function(e,t,n){var r=n(1),i=n(136)(!0);r(r.S,"Object",{entries:function(e){return i(e)}})},function(e,t,n){"use strict";var r=n(1),i=n(13),o=n(14),a=n(12);n(11)&&r(r.P+n(69),"Object",{__defineGetter__:function(e,t){a.f(i(this),e,{get:o(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(1),i=n(13),o=n(14),a=n(12);n(11)&&r(r.P+n(69),"Object",{__defineSetter__:function(e,t){a.f(i(this),e,{set:o(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(1),i=n(13),o=n(28),a=n(21),s=n(20).f;n(11)&&r(r.P+n(69),"Object",{__lookupGetter__:function(e){var t,n=i(this),r=o(e,!0);do{if(t=s(n,r))return t.get}while(n=a(n))}})},function(e,t,n){"use strict";var r=n(1),i=n(13),o=n(28),a=n(21),s=n(20).f;n(11)&&r(r.P+n(69),"Object",{__lookupSetter__:function(e){var t,n=i(this),r=o(e,!0);do{if(t=s(n,r))return t.set}while(n=a(n))}})},function(e,t,n){var r=n(1);r(r.P+r.R,"Map",{toJSON:n(137)("Map")})},function(e,t,n){var r=n(1);r(r.P+r.R,"Set",{toJSON:n(137)("Set")})},function(e,t,n){n(70)("Map")},function(e,t,n){n(70)("Set")},function(e,t,n){n(70)("WeakMap")},function(e,t,n){n(70)("WeakSet")},function(e,t,n){n(71)("Map")},function(e,t,n){n(71)("Set")},function(e,t,n){n(71)("WeakMap")},function(e,t,n){n(71)("WeakSet")},function(e,t,n){var r=n(1);r(r.G,{global:n(5)})},function(e,t,n){var r=n(1);r(r.S,"System",{global:n(5)})},function(e,t,n){var r=n(1),i=n(25);r(r.S,"Error",{isError:function(e){return"Error"===i(e)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{clamp:function(e,t,n){return Math.min(n,Math.max(t,e))}})},function(e,t,n){var r=n(1);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(e,t,n){var r=n(1),i=180/Math.PI;r(r.S,"Math",{degrees:function(e){return e*i}})},function(e,t,n){var r=n(1),i=n(139),o=n(118);r(r.S,"Math",{fscale:function(e,t,n,r,a){return o(i(e,t,n,r,a))}})},function(e,t,n){var r=n(1);r(r.S,"Math",{iaddh:function(e,t,n,r){var i=e>>>0,o=n>>>0;return(t>>>0)+(r>>>0)+((i&o|(i|o)&~(i+o>>>0))>>>31)|0}})},function(e,t,n){var r=n(1);r(r.S,"Math",{isubh:function(e,t,n,r){var i=e>>>0,o=n>>>0;return(t>>>0)-(r>>>0)-((~i&o|~(i^o)&i-o>>>0)>>>31)|0}})},function(e,t,n){var r=n(1);r(r.S,"Math",{imulh:function(e,t){var n=+e,r=+t,i=65535&n,o=65535&r,a=n>>16,s=r>>16,u=(a*o>>>0)+(i*o>>>16);return a*s+(u>>16)+((i*s>>>0)+(65535&u)>>16)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(e,t,n){var r=n(1),i=Math.PI/180;r(r.S,"Math",{radians:function(e){return e*i}})},function(e,t,n){var r=n(1);r(r.S,"Math",{scale:n(139)})},function(e,t,n){var r=n(1);r(r.S,"Math",{umulh:function(e,t){var n=+e,r=+t,i=65535&n,o=65535&r,a=n>>>16,s=r>>>16,u=(a*o>>>0)+(i*o>>>16);return a*s+(u>>>16)+((i*s>>>0)+(65535&u)>>>16)}})},function(e,t,n){var r=n(1);r(r.S,"Math",{signbit:function(e){return(e=+e)!=e?e:0==e?1/e==1/0:e>0}})},function(e,t,n){"use strict";var r=n(1),i=n(23),o=n(5),a=n(56),s=n(126);r(r.P+r.R,"Promise",{finally:function(e){var t=a(this,i.Promise||o.Promise),n="function"==typeof e;return this.then(n?function(n){return s(t,e()).then((function(){return n}))}:e,n?function(n){return s(t,e()).then((function(){throw n}))}:e)}})},function(e,t,n){"use strict";var r=n(1),i=n(97),o=n(125);r(r.S,"Promise",{try:function(e){var t=i.f(this),n=o(e);return(n.e?t.reject:t.resolve)(n.v),t.promise}})},function(e,t,n){var r=n(33),i=n(3),o=r.key,a=r.set;r.exp({defineMetadata:function(e,t,n,r){a(e,t,i(n),o(r))}})},function(e,t,n){var r=n(33),i=n(3),o=r.key,a=r.map,s=r.store;r.exp({deleteMetadata:function(e,t){var n=arguments.length<3?void 0:o(arguments[2]),r=a(i(t),n,!1);if(void 0===r||!r.delete(e))return!1;if(r.size)return!0;var u=s.get(t);return u.delete(n),!!u.size||s.delete(t)}})},function(e,t,n){var r=n(33),i=n(3),o=n(21),a=r.has,s=r.get,u=r.key,l=function(e,t,n){if(a(e,t,n))return s(e,t,n);var r=o(t);return null!==r?l(e,r,n):void 0};r.exp({getMetadata:function(e,t){return l(e,i(t),arguments.length<3?void 0:u(arguments[2]))}})},function(e,t,n){var r=n(129),i=n(138),o=n(33),a=n(3),s=n(21),u=o.keys,l=o.key,c=function(e,t){var n=u(e,t),o=s(e);if(null===o)return n;var a=c(o,t);return a.length?n.length?i(new r(n.concat(a))):a:n};o.exp({getMetadataKeys:function(e){return c(a(e),arguments.length<2?void 0:l(arguments[1]))}})},function(e,t,n){var r=n(33),i=n(3),o=r.get,a=r.key;r.exp({getOwnMetadata:function(e,t){return o(e,i(t),arguments.length<3?void 0:a(arguments[2]))}})},function(e,t,n){var r=n(33),i=n(3),o=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(e){return o(i(e),arguments.length<2?void 0:a(arguments[1]))}})},function(e,t,n){var r=n(33),i=n(3),o=n(21),a=r.has,s=r.key,u=function(e,t,n){if(a(e,t,n))return!0;var r=o(t);return null!==r&&u(e,r,n)};r.exp({hasMetadata:function(e,t){return u(e,i(t),arguments.length<3?void 0:s(arguments[2]))}})},function(e,t,n){var r=n(33),i=n(3),o=r.has,a=r.key;r.exp({hasOwnMetadata:function(e,t){return o(e,i(t),arguments.length<3?void 0:a(arguments[2]))}})},function(e,t,n){var r=n(33),i=n(3),o=n(14),a=r.key,s=r.set;r.exp({metadata:function(e,t){return function(n,r){s(e,t,(void 0!==r?i:o)(n),a(r))}}})},function(e,t,n){var r=n(1),i=n(96)(),o=n(5).process,a="process"==n(25)(o);r(r.G,{asap:function(e){var t=a&&o.domain;i(t?t.bind(e):e)}})},function(e,t,n){"use strict";var r=n(1),i=n(5),o=n(23),a=n(96)(),s=n(9)("observable"),u=n(14),l=n(3),c=n(44),f=n(46),h=n(15),p=n(45),d=p.RETURN,v=function(e){return null==e?void 0:u(e)},_=function(e){var t=e._c;t&&(e._c=void 0,t())},y=function(e){return void 0===e._o},g=function(e){y(e)||(e._o=void 0,_(e))},m=function(e,t){l(e),this._c=void 0,this._o=e,e=new b(this);try{var n=t(e),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:u(n),this._c=n)}catch(t){return void e.error(t)}y(this)&&_(this)};m.prototype=f({},{unsubscribe:function(){g(this)}});var b=function(e){this._s=e};b.prototype=f({},{next:function(e){var t=this._s;if(!y(t)){var n=t._o;try{var r=v(n.next);if(r)return r.call(n,e)}catch(e){try{g(t)}finally{throw e}}}},error:function(e){var t=this._s;if(y(t))throw e;var n=t._o;t._o=void 0;try{var r=v(n.error);if(!r)throw e;e=r.call(n,e)}catch(e){try{_(t)}finally{throw e}}return _(t),e},complete:function(e){var t=this._s;if(!y(t)){var n=t._o;t._o=void 0;try{var r=v(n.complete);e=r?r.call(n,e):void 0}catch(e){try{_(t)}finally{throw e}}return _(t),e}}});var w=function(e){c(this,w,"Observable","_f")._f=u(e)};f(w.prototype,{subscribe:function(e){return new m(e,this._f)},forEach:function(e){var t=this;return new(o.Promise||i.Promise)((function(n,r){u(e);var i=t.subscribe({next:function(t){try{return e(t)}catch(e){r(e),i.unsubscribe()}},error:r,complete:n})}))}}),f(w,{from:function(e){var t="function"==typeof this?this:w,n=v(l(e)[s]);if(n){var r=l(n.call(e));return r.constructor===t?r:new t((function(e){return r.subscribe(e)}))}return new t((function(t){var n=!1;return a((function(){if(!n){try{if(p(e,!1,(function(e){if(t.next(e),n)return d}))===d)return}catch(e){if(n)throw e;return void t.error(e)}t.complete()}})),function(){n=!0}}))},of:function(){for(var e=0,t=arguments.length,n=new Array(t);e<t;)n[e]=arguments[e++];return new("function"==typeof this?this:w)((function(e){var t=!1;return a((function(){if(!t){for(var r=0;r<n.length;++r)if(e.next(n[r]),t)return;e.complete()}})),function(){t=!0}}))}}),h(w.prototype,s,(function(){return this})),r(r.G,{Observable:w}),n(43)("Observable")},function(e,t,n){var r=n(5),i=n(1),o=n(66),a=[].slice,s=/MSIE .\./.test(o),u=function(e){return function(t,n){var r=arguments.length>2,i=!!r&&a.call(arguments,2);return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,i)}:t,n)}};i(i.G+i.B+i.F*s,{setTimeout:u(r.setTimeout),setInterval:u(r.setInterval)})},function(e,t,n){var r=n(1),i=n(95);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(e,t,n){for(var r=n(92),i=n(39),o=n(16),a=n(5),s=n(15),u=n(51),l=n(9),c=l("iterator"),f=l("toStringTag"),h=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var _,y=d[v],g=p[y],m=a[y],b=m&&m.prototype;if(b&&(b[c]||s(b,c,h),b[f]||s(b,f,y),u[y]=h,g))for(_ in r)b[_]||o(b,_,r[_],!0)}},function(e,t,n){(function(t){!function(t){"use strict";var n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag",u="object"==typeof e,l=t.regeneratorRuntime;if(l)u&&(e.exports=l);else{(l=t.regeneratorRuntime=u?e.exports:{}).wrap=v;var c={},f={};f[o]=function(){return this};var h=Object.getPrototypeOf,p=h&&h(h(P([])));p&&p!==n&&r.call(p,o)&&(f=p);var d=m.prototype=y.prototype=Object.create(f);g.prototype=d.constructor=m,m.constructor=g,m[s]=g.displayName="GeneratorFunction",l.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},l.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,s in e||(e[s]="GeneratorFunction")),e.prototype=Object.create(d),e},l.awrap=function(e){return{__await:e}},b(w.prototype),w.prototype[a]=function(){return this},l.AsyncIterator=w,l.async=function(e,t,n,r){var i=new w(v(e,t,n,r));return l.isGeneratorFunction(t)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},b(d),d[s]="Generator",d[o]=function(){return this},d.toString=function(){return"[object Generator]"},l.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},l.values=P,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!e)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],a=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var s=r.call(o,"catchLoc"),u=r.call(o,"finallyLoc");if(s&&u){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,c):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),c},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),c}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;C(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:P(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),c}}}function v(e,t,n,r){var i=t&&t.prototype instanceof y?t:y,o=Object.create(i.prototype),a=new S(r||[]);return o._invoke=function(e,t,n){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return O()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=E(a,n);if(s){if(s===c)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=_(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===c)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(e,n,a),o}function _(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function y(){}function g(){}function m(){}function b(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function w(e){function n(t,i,o,a){var s=_(e[t],e,i);if("throw"!==s.type){var u=s.arg,l=u.value;return l&&"object"==typeof l&&r.call(l,"__await")?Promise.resolve(l.__await).then((function(e){n("next",e,o,a)}),(function(e){n("throw",e,o,a)})):Promise.resolve(l).then((function(e){u.value=e,o(u)}),a)}a(s.arg)}var i;"object"==typeof t.process&&t.process.domain&&(n=t.process.domain.bind(n)),this._invoke=function(e,t){function r(){return new Promise((function(r,i){n(e,t,r,i)}))}return i=i?i.then(r,r):r()}}function E(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,E(e,t),"throw"===t.method))return c;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var r=_(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,c;var i=r.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,c):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,c)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function P(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,i=function t(){for(;++n<e.length;)if(r.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}return{next:O}}function O(){return{value:void 0,done:!0}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(57))},function(e,t,n){n(353),e.exports=n(23).RegExp.escape},function(e,t,n){var r=n(1),i=n(354)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(e){return i(e)}})},function(e,t){e.exports=function(e,t){var n=t===Object(t)?function(e){return t[e]}:t;return function(t){return String(t).replace(e,n)}}},function(e,t,n){"use strict";n.r(t),function(e){var t,r=n(0),i=n.n(r),o=n(143),a=n(144);(t="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&t(e);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var s,u,l=function(e){return Object(o.render)(i.a.createElement(e,null),document.querySelector("#root"))};l(a.a),(s="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&s.register(l,"hotRender","C:\\Users\\HP\\Desktop\\Stefan\\airplanes3\\js\\index.jsx"),(u="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&u(e)}.call(this,n(22)(e))},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(140),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,s=i?Symbol.for("react.fragment"):60107,u=i?Symbol.for("react.strict_mode"):60108,l=i?Symbol.for("react.profiler"):60114,c=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,h=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113,d=i?Symbol.for("react.memo"):60115,v=i?Symbol.for("react.lazy"):60116,_="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||g}function w(){}function E(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||g}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=b.prototype;var T=E.prototype=new w;T.constructor=E,r(T,b.prototype),T.isPureReactComponent=!0;var C={current:null},S=Object.prototype.hasOwnProperty,P={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,i={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!P.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];i.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:o,type:e,key:a,ref:s,props:i,_owner:C.current}}function I(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var k=/\/+/g,x=[];function A(e,t,n,r){if(x.length){var i=x.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function D(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>x.length&&x.push(e)}function N(e,t,n){return null==e?0:function e(t,n,r,i){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var u=!1;if(null===t)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case o:case a:u=!0}}if(u)return r(i,t,""===n?"."+R(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var c=n+R(s=t[l],l);u+=e(s,c,r,i)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=_&&t[_]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),l=0;!(s=t.next()).done;)u+=e(s=s.value,c=n+R(s,l++),r,i);else if("object"===s)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function M(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,(function(e){return e})):null!=e&&(I(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(k,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(k,"$&/")+"/"),N(e,L,t=A(t,o,r,i)),D(t)}var j={current:null};function U(){var e=j.current;if(null===e)throw Error(y(321));return e}var W={ReactCurrentDispatcher:j,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:C,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;N(e,M,t=A(null,null,t,n)),D(t)},count:function(e){return N(e,(function(){return null}),null)},toArray:function(e){var t=[];return F(e,t,null,(function(e){return e})),t},only:function(e){if(!I(e))throw Error(y(143));return e}},t.Component=b,t.Fragment=s,t.Profiler=l,t.PureComponent=E,t.StrictMode=u,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var i=r({},e.props),a=e.key,s=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,u=C.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)S.call(t,c)&&!P.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){l=Array(c);for(var f=0;f<c;f++)l[f]=arguments[f+2];i.children=l}return{$$typeof:o,type:e.type,key:a,ref:s,props:i,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},t.createElement=O,t.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:h,render:e}},t.isValidElement=I,t.lazy=function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return U().useCallback(e,t)},t.useContext=function(e,t){return U().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return U().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return U().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return U().useLayoutEffect(e,t)},t.useMemo=function(e,t){return U().useMemo(e,t)},t.useReducer=function(e,t,n){return U().useReducer(e,t,n)},t.useRef=function(e){return U().useRef(e)},t.useState=function(e){return U().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(140),o=n(358);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function s(e,t,n,r,i,o,a,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var u=!1,l=null,c=!1,f=null,h={onError:function(e){u=!0,l=e}};function p(e,t,n,r,i,o,a,c,f){u=!1,l=null,s.apply(h,arguments)}var d=null,v=null,_=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=_(n),function(e,t,n,r,i,o,s,h,d){if(p.apply(this,arguments),u){if(!u)throw Error(a(198));var v=l;u=!1,l=null,c||(c=!0,f=v)}}(r,t,void 0,e),e.currentTarget=null}var g=null,m={};function b(){if(g)for(var e in m){var t=m[e],n=g.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!E[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in E[n]=t,n=t.eventTypes){var i=void 0,o=n[r],s=t,u=r;if(T.hasOwnProperty(u))throw Error(a(99,u));T[u]=o;var l=o.phasedRegistrationNames;if(l){for(i in l)l.hasOwnProperty(i)&&w(l[i],s,u);i=!0}else o.registrationName?(w(o.registrationName,s,u),i=!0):i=!1;if(!i)throw Error(a(98,r,e))}}}}function w(e,t,n){if(C[e])throw Error(a(100,e));C[e]=t,S[e]=t.eventTypes[n].dependencies}var E=[],T={},C={},S={};function P(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!m.hasOwnProperty(t)||m[t]!==r){if(m[t])throw Error(a(102,t));m[t]=r,n=!0}}n&&b()}var O=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),I=null,k=null,x=null;function A(e){if(e=v(e)){if("function"!=typeof I)throw Error(a(280));var t=e.stateNode;t&&(t=d(t),I(e.stateNode,e.type,t))}}function D(e){k?x?x.push(e):x=[e]:k=e}function N(){if(k){var e=k,t=x;if(x=k=null,A(e),t)for(e=0;e<t.length;e++)A(t[e])}}function R(e,t){return e(t)}function M(e,t,n,r,i){return e(t,n,r,i)}function L(){}var F=R,j=!1,U=!1;function W(){null===k&&null===x||(L(),N())}function B(e,t,n){if(U)return e(t,n);U=!0;try{return F(e,t,n)}finally{U=!1,W()}}var H=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,K=Object.prototype.hasOwnProperty,V={},G={};function q(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var z={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){z[e]=new q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];z[t]=new q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){z[e]=new q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){z[e]=new q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){z[e]=new q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){z[e]=new q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){z[e]=new q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){z[e]=new q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){z[e]=new q(e,5,!1,e.toLowerCase(),null,!1)}));var Q=/[\-:]([a-z])/g;function Y(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Q,Y);z[t]=new q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Q,Y);z[t]=new q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Q,Y);z[t]=new q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){z[e]=new q(e,1,!1,e.toLowerCase(),null,!1)})),z.xlinkHref=new q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){z[e]=new q(e,1,!1,e.toLowerCase(),null,!0)}));var $=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,r){var i=z.hasOwnProperty(t)?z[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!K.call(G,e)||!K.call(V,e)&&(H.test(e)?G[e]=!0:(V[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}$.hasOwnProperty("ReactCurrentDispatcher")||($.ReactCurrentDispatcher={current:null}),$.hasOwnProperty("ReactCurrentBatchConfig")||($.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,ie=Z?Symbol.for("react.profiler"):60114,oe=Z?Symbol.for("react.provider"):60109,ae=Z?Symbol.for("react.context"):60110,se=Z?Symbol.for("react.concurrent_mode"):60111,ue=Z?Symbol.for("react.forward_ref"):60112,le=Z?Symbol.for("react.suspense"):60113,ce=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,he=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,de="function"==typeof Symbol&&Symbol.iterator;function ve(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=de&&e[de]||e["@@iterator"])?e:null}function _e(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ie:return"Profiler";case re:return"StrictMode";case le:return"Suspense";case ce:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case oe:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return _e(e.type);case pe:return _e(e.render);case he:if(e=1===e._status?e._result:null)return _e(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=_e(e.type);n=null,r&&(n=_e(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(J,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function me(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function be(e){e._valueTracker||(e._valueTracker=function(e){var t=me(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=me(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Ee(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Te(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ce(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function Se(e,t){Ce(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Oe(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Pe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Oe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ie(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ke(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function xe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function De(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ne(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Re="http://www.w3.org/1999/xhtml",Me="http://www.w3.org/2000/svg";function Le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var je,Ue=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Me||"innerHTML"in e)e.innerHTML=t;else{for((je=je||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=je.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function We(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Be(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var He={animationend:Be("Animation","AnimationEnd"),animationiteration:Be("Animation","AnimationIteration"),animationstart:Be("Animation","AnimationStart"),transitionend:Be("Transition","TransitionEnd")},Ke={},Ve={};function Ge(e){if(Ke[e])return Ke[e];if(!He[e])return e;var t,n=He[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ve)return Ke[e]=n[t];return e}O&&(Ve=document.createElement("div").style,"AnimationEvent"in window||(delete He.animationend.animation,delete He.animationiteration.animation,delete He.animationstart.animation),"TransitionEvent"in window||delete He.transitionend.transition);var qe=Ge("animationend"),ze=Ge("animationiteration"),Qe=Ge("animationstart"),Ye=Ge("transitionend"),$e="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Xe=new("function"==typeof WeakMap?WeakMap:Map);function Je(e){var t=Xe.get(e);return void 0===t&&(t=new Map,Xe.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return tt(i),e;if(o===r)return tt(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,u=i.child;u;){if(u===n){s=!0,n=i,r=o;break}if(u===r){s=!0,r=i,n=o;break}u=u.sibling}if(!s){for(u=o.child;u;){if(u===n){s=!0,n=o,r=i;break}if(u===r){s=!0,r=o,n=i;break}u=u.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function it(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var ot=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function st(e){if(null!==e&&(ot=rt(ot,e)),e=ot,ot=null,e){if(it(e,at),ot)throw Error(a(95));if(c)throw e=f,c=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function lt(e){if(!O)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function ht(e,t,n,r){if(ct.length){var i=ct.pop();return i.topLevelType=e,i.eventSystemFlags=r,i.nativeEvent=t,i.targetInst=n,i}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=On(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=ut(e.nativeEvent);r=e.topLevelType;var o=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var s=null,u=0;u<E.length;u++){var l=E[u];l&&(l=l.extractEvents(r,t,o,i,a))&&(s=rt(s,l))}st(s)}}function dt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Qt(t,"scroll",!0);break;case"focus":case"blur":Qt(t,"focus",!0),Qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":lt(e)&&Qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===$e.indexOf(e)&&zt(e,t)}n.set(e,null)}}var vt,_t,yt,gt=!1,mt=[],bt=null,wt=null,Et=null,Tt=new Map,Ct=new Map,St=[],Pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ot="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function It(e,t,n,r,i){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:i,container:r}}function kt(e,t){switch(e){case"focus":case"blur":bt=null;break;case"dragenter":case"dragleave":wt=null;break;case"mouseover":case"mouseout":Et=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ct.delete(t.pointerId)}}function xt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=It(t,n,r,i,o),null!==t&&(null!==(t=In(t))&&_t(t)),e):(e.eventSystemFlags|=r,e)}function At(e){var t=On(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Dt(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=In(t);return null!==n&&_t(n),e.blockedOn=t,!1}return!0}function Nt(e,t,n){Dt(e)&&n.delete(t)}function Rt(){for(gt=!1;0<mt.length;){var e=mt[0];if(null!==e.blockedOn){null!==(e=In(e.blockedOn))&&vt(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:mt.shift()}null!==bt&&Dt(bt)&&(bt=null),null!==wt&&Dt(wt)&&(wt=null),null!==Et&&Dt(Et)&&(Et=null),Tt.forEach(Nt),Ct.forEach(Nt)}function Mt(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Rt)))}function Lt(e){function t(t){return Mt(t,e)}if(0<mt.length){Mt(mt[0],e);for(var n=1;n<mt.length;n++){var r=mt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==bt&&Mt(bt,e),null!==wt&&Mt(wt,e),null!==Et&&Mt(Et,e),Tt.forEach(t),Ct.forEach(t),n=0;n<St.length;n++)(r=St[n]).blockedOn===e&&(r.blockedOn=null);for(;0<St.length&&null===(n=St[0]).blockedOn;)At(n),null===n.blockedOn&&St.shift()}var Ft={},jt=new Map,Ut=new Map,Wt=["abort","abort",qe,"animationEnd",ze,"animationIteration",Qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ye,"transitionEnd","waiting","waiting"];function Bt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1],o="on"+(i[0].toUpperCase()+i.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],eventPriority:t},Ut.set(r,t),jt.set(r,o),Ft[i]=o}}Bt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Bt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Bt(Wt,2);for(var Ht="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Kt=0;Kt<Ht.length;Kt++)Ut.set(Ht[Kt],0);var Vt=o.unstable_UserBlockingPriority,Gt=o.unstable_runWithPriority,qt=!0;function zt(e,t){Qt(t,e,!1)}function Qt(e,t,n){var r=Ut.get(t);switch(void 0===r?2:r){case 0:r=Yt.bind(null,t,1,e);break;case 1:r=$t.bind(null,t,1,e);break;default:r=Xt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Yt(e,t,n,r){j||L();var i=Xt,o=j;j=!0;try{M(i,e,t,n,r)}finally{(j=o)||W()}}function $t(e,t,n,r){Gt(Vt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){if(qt)if(0<mt.length&&-1<Pt.indexOf(e))e=It(null,e,t,n,r),mt.push(e);else{var i=Jt(e,t,n,r);if(null===i)kt(e,r);else if(-1<Pt.indexOf(e))e=It(i,e,t,n,r),mt.push(e);else if(!function(e,t,n,r,i){switch(t){case"focus":return bt=xt(bt,e,t,n,r,i),!0;case"dragenter":return wt=xt(wt,e,t,n,r,i),!0;case"mouseover":return Et=xt(Et,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return Tt.set(o,xt(Tt.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,Ct.set(o,xt(Ct.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r)){kt(e,r),e=ht(e,r,null,t);try{B(pt,e)}finally{ft(e)}}}}function Jt(e,t,n,r){if(null!==(n=On(n=ut(r)))){var i=Ze(n);if(null===i)n=null;else{var o=i.tag;if(13===o){if(null!==(n=et(i)))return n;n=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;n=null}else i!==n&&(n=null)}}e=ht(e,r,n,t);try{B(pt,e)}finally{ft(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var sn=Re;function un(e,t){var n=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=S[t];for(var r=0;r<t.length;r++)dt(t[r],e,n)}function ln(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function hn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function dn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vn=null,_n=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var mn="function"==typeof setTimeout?setTimeout:void 0,bn="function"==typeof clearTimeout?clearTimeout:void 0;function wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function En(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Tn=Math.random().toString(36).slice(2),Cn="__reactInternalInstance$"+Tn,Sn="__reactEventHandlers$"+Tn,Pn="__reactContainere$"+Tn;function On(e){var t=e[Cn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Pn]||n[Cn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=En(e);null!==e;){if(n=e[Cn])return n;e=En(e)}return t}n=(e=n).parentNode}return null}function In(e){return!(e=e[Cn]||e[Pn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function kn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function xn(e){return e[Sn]||null}function An(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Dn(e,t){var n=e.stateNode;if(!n)return null;var r=d(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Nn(e,t,n){(t=Dn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Rn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=An(t);for(t=n.length;0<t--;)Nn(n[t],"captured",e);for(t=0;t<n.length;t++)Nn(n[t],"bubbled",e)}}function Mn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Dn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Ln(e){e&&e.dispatchConfig.registrationName&&Mn(e._targetInst,null,e)}function Fn(e){it(e,Rn)}var jn=null,Un=null,Wn=null;function Bn(){if(Wn)return Wn;var e,t,n=Un,r=n.length,i="value"in jn?jn.value:jn.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Wn=i.slice(e,1<t?1-t:void 0)}function Hn(){return!0}function Kn(){return!1}function Vn(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Hn:Kn,this.isPropagationStopped=Kn,this}function Gn(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function zn(e){e.eventPool=[],e.getPooled=Gn,e.release=qn}i(Vn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Hn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Hn)},persist:function(){this.isPersistent=Hn},isPersistent:Kn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Kn,this._dispatchInstances=this._dispatchListeners=null}}),Vn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Vn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,zn(n),n},zn(Vn);var Qn=Vn.extend({data:null}),Yn=Vn.extend({data:null}),$n=[9,13,27,32],Xn=O&&"CompositionEvent"in window,Jn=null;O&&"documentMode"in document&&(Jn=document.documentMode);var Zn=O&&"TextEvent"in window&&!Jn,er=O&&(!Xn||Jn&&8<Jn&&11>=Jn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ir(e,t){switch(e){case"keyup":return-1!==$n.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function or(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var sr={eventTypes:nr,extractEvents:function(e,t,n,r){var i;if(Xn)e:{switch(e){case"compositionstart":var o=nr.compositionStart;break e;case"compositionend":o=nr.compositionEnd;break e;case"compositionupdate":o=nr.compositionUpdate;break e}o=void 0}else ar?ir(e,n)&&(o=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=nr.compositionStart);return o?(er&&"ko"!==n.locale&&(ar||o!==nr.compositionStart?o===nr.compositionEnd&&ar&&(i=Bn()):(Un="value"in(jn=r)?jn.value:jn.textContent,ar=!0)),o=Qn.getPooled(o,t,n,r),i?o.data=i:null!==(i=or(n))&&(o.data=i),Fn(o),i=o):i=null,(e=Zn?function(e,t){switch(e){case"compositionend":return or(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Xn&&ir(e,t)?(e=Bn(),Wn=Un=jn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Yn.getPooled(nr.beforeInput,t,n,r)).data=e,Fn(t)):t=null,null===i?t:null===t?i:[i,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function lr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var cr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Vn.getPooled(cr.change,e,t,n)).type="change",D(n),Fn(e),e}var hr=null,pr=null;function dr(e){st(e)}function vr(e){if(we(kn(e)))return e}function _r(e,t){if("change"===e)return t}var yr=!1;function gr(){hr&&(hr.detachEvent("onpropertychange",mr),pr=hr=null)}function mr(e){if("value"===e.propertyName&&vr(pr))if(e=fr(pr,e,ut(e)),j)st(e);else{j=!0;try{R(dr,e)}finally{j=!1,W()}}}function br(e,t,n){"focus"===e?(gr(),pr=n,(hr=t).attachEvent("onpropertychange",mr)):"blur"===e&&gr()}function wr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return vr(pr)}function Er(e,t){if("click"===e)return vr(t)}function Tr(e,t){if("input"===e||"change"===e)return vr(t)}O&&(yr=lt("input")&&(!document.documentMode||9<document.documentMode));var Cr={eventTypes:cr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var i=t?kn(t):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var a=_r;else if(lr(i))if(yr)a=Tr;else{a=wr;var s=br}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(a=Er);if(a&&(a=a(e,t)))return fr(a,n,r);s&&s(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Oe(i,"number",i.value)}},Sr=Vn.extend({view:null,detail:null}),Pr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Or(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Pr[e])&&!!t[e]}function Ir(){return Or}var kr=0,xr=0,Ar=!1,Dr=!1,Nr=Sr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Ir,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=kr;return kr=e.screenX,Ar?"mousemove"===e.type?e.screenX-t:0:(Ar=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=xr;return xr=e.screenY,Dr?"mousemove"===e.type?e.screenY-t:0:(Dr=!0,0)}}),Rr=Nr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Mr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Lr={eventTypes:Mr,extractEvents:function(e,t,n,r,i){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?On(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var s=Nr,u=Mr.mouseLeave,l=Mr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(s=Rr,u=Mr.pointerLeave,l=Mr.pointerEnter,c="pointer");if(e=null==a?o:kn(a),o=null==t?o:kn(t),(u=s.getPooled(u,a,n,r)).type=c+"leave",u.target=e,u.relatedTarget=o,(n=s.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=e,c=t,(r=a)&&c)e:{for(l=c,a=0,e=s=r;e;e=An(e))a++;for(e=0,t=l;t;t=An(t))e++;for(;0<a-e;)s=An(s),a--;for(;0<e-a;)l=An(l),e--;for(;a--;){if(s===l||s===l.alternate)break e;s=An(s),l=An(l)}s=null}else s=null;for(l=s,s=[];r&&r!==l&&(null===(a=r.alternate)||a!==l);)s.push(r),r=An(r);for(r=[];c&&c!==l&&(null===(a=c.alternate)||a!==l);)r.push(c),c=An(c);for(c=0;c<s.length;c++)Mn(s[c],"bubbled",u);for(c=r.length;0<c--;)Mn(r[c],"captured",n);return 0==(64&i)?[u]:[u,n]}};var Fr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},jr=Object.prototype.hasOwnProperty;function Ur(e,t){if(Fr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!jr.call(t,n[r])||!Fr(e[n[r]],t[n[r]]))return!1;return!0}var Wr=O&&"documentMode"in document&&11>=document.documentMode,Br={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Hr=null,Kr=null,Vr=null,Gr=!1;function qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Gr||null==Hr||Hr!==cn(n)?null:("selectionStart"in(n=Hr)&&dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Vr&&Ur(Vr,n)?null:(Vr=n,(e=Vn.getPooled(Br.select,Kr,e,t)).type="select",e.target=Hr,Fn(e),e))}var zr={eventTypes:Br,extractEvents:function(e,t,n,r,i,o){if(!(o=!(i=o||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{i=Je(i),o=S.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?kn(t):window,e){case"focus":(lr(i)||"true"===i.contentEditable)&&(Hr=i,Kr=t,Vr=null);break;case"blur":Vr=Kr=Hr=null;break;case"mousedown":Gr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Gr=!1,qr(n,r);case"selectionchange":if(Wr)break;case"keydown":case"keyup":return qr(n,r)}return null}},Qr=Vn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Yr=Vn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),$r=Sr.extend({relatedTarget:null});function Xr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Jr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ei=Sr.extend({key:function(e){if(e.key){var t=Jr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Xr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Ir,charCode:function(e){return"keypress"===e.type?Xr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Xr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ti=Nr.extend({dataTransfer:null}),ni=Sr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Ir}),ri=Vn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ii=Nr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),oi={eventTypes:Ft,extractEvents:function(e,t,n,r){var i=jt.get(e);if(!i)return null;switch(e){case"keypress":if(0===Xr(n))return null;case"keydown":case"keyup":e=ei;break;case"blur":case"focus":e=$r;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Nr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ti;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ni;break;case qe:case ze:case Qe:e=Qr;break;case Ye:e=ri;break;case"scroll":e=Sr;break;case"wheel":e=ii;break;case"copy":case"cut":case"paste":e=Yr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Rr;break;default:e=Vn}return Fn(t=e.getPooled(i,t,n,r)),t}};if(g)throw Error(a(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),b(),d=xn,v=In,_=kn,P({SimpleEventPlugin:oi,EnterLeaveEventPlugin:Lr,ChangeEventPlugin:Cr,SelectEventPlugin:zr,BeforeInputEventPlugin:sr});var ai=[],si=-1;function ui(e){0>si||(e.current=ai[si],ai[si]=null,si--)}function li(e,t){si++,ai[si]=e.current,e.current=t}var ci={},fi={current:ci},hi={current:!1},pi=ci;function di(e,t){var n=e.type.contextTypes;if(!n)return ci;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function vi(e){return null!=(e=e.childContextTypes)}function _i(){ui(hi),ui(fi)}function yi(e,t,n){if(fi.current!==ci)throw Error(a(168));li(fi,t),li(hi,n)}function gi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,_e(t)||"Unknown",o));return i({},n,{},r)}function mi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ci,pi=fi.current,li(fi,e),li(hi,hi.current),!0}function bi(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=gi(e,t,pi),r.__reactInternalMemoizedMergedChildContext=e,ui(hi),ui(fi),li(fi,e)):ui(hi),li(hi,n)}var wi=o.unstable_runWithPriority,Ei=o.unstable_scheduleCallback,Ti=o.unstable_cancelCallback,Ci=o.unstable_requestPaint,Si=o.unstable_now,Pi=o.unstable_getCurrentPriorityLevel,Oi=o.unstable_ImmediatePriority,Ii=o.unstable_UserBlockingPriority,ki=o.unstable_NormalPriority,xi=o.unstable_LowPriority,Ai=o.unstable_IdlePriority,Di={},Ni=o.unstable_shouldYield,Ri=void 0!==Ci?Ci:function(){},Mi=null,Li=null,Fi=!1,ji=Si(),Ui=1e4>ji?Si:function(){return Si()-ji};function Wi(){switch(Pi()){case Oi:return 99;case Ii:return 98;case ki:return 97;case xi:return 96;case Ai:return 95;default:throw Error(a(332))}}function Bi(e){switch(e){case 99:return Oi;case 98:return Ii;case 97:return ki;case 96:return xi;case 95:return Ai;default:throw Error(a(332))}}function Hi(e,t){return e=Bi(e),wi(e,t)}function Ki(e,t,n){return e=Bi(e),Ei(e,t,n)}function Vi(e){return null===Mi?(Mi=[e],Li=Ei(Oi,qi)):Mi.push(e),Di}function Gi(){if(null!==Li){var e=Li;Li=null,Ti(e)}qi()}function qi(){if(!Fi&&null!==Mi){Fi=!0;var e=0;try{var t=Mi;Hi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Mi=null}catch(t){throw null!==Mi&&(Mi=Mi.slice(e+1)),Ei(Oi,Gi),t}finally{Fi=!1}}}function zi(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Qi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Yi={current:null},$i=null,Xi=null,Ji=null;function Zi(){Ji=Xi=$i=null}function eo(e){var t=Yi.current;ui(Yi),e.type._context._currentValue=t}function to(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function no(e,t){$i=e,Ji=Xi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(xa=!0),e.firstContext=null)}function ro(e,t){if(Ji!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Ji=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xi){if(null===$i)throw Error(a(308));Xi=t,$i.dependencies={expirationTime:0,firstContext:t,responders:null}}else Xi=Xi.next=t;return e._currentValue}var io=!1;function oo(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function ao(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function so(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function uo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function lo(e,t){var n=e.alternate;null!==n&&ao(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function co(e,t,n,r){var o=e.updateQueue;io=!1;var a=o.baseQueue,s=o.shared.pending;if(null!==s){if(null!==a){var u=a.next;a.next=s.next,s.next=u}a=s,o.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=s))}if(null!==a){u=a.next;var l=o.baseState,c=0,f=null,h=null,p=null;if(null!==u)for(var d=u;;){if((s=d.expirationTime)<r){var v={expirationTime:d.expirationTime,suspenseConfig:d.suspenseConfig,tag:d.tag,payload:d.payload,callback:d.callback,next:null};null===p?(h=p=v,f=l):p=p.next=v,s>c&&(c=s)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:d.suspenseConfig,tag:d.tag,payload:d.payload,callback:d.callback,next:null}),ou(s,d.suspenseConfig);e:{var _=e,y=d;switch(s=t,v=n,y.tag){case 1:if("function"==typeof(_=y.payload)){l=_.call(v,l,s);break e}l=_;break e;case 3:_.effectTag=-4097&_.effectTag|64;case 0:if(null==(s="function"==typeof(_=y.payload)?_.call(v,l,s):_))break e;l=i({},l,s);break e;case 2:io=!0}}null!==d.callback&&(e.effectTag|=32,null===(s=o.effects)?o.effects=[d]:s.push(d))}if(null===(d=d.next)||d===u){if(null===(s=o.shared.pending))break;d=a.next=s.next,s.next=u,o.baseQueue=a=s,o.shared.pending=null}}null===p?f=l:p.next=h,o.baseState=f,o.baseQueue=p,au(c),e.expirationTime=c,e.memoizedState=l}}function fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=i,i=n,"function"!=typeof r)throw Error(a(191,r));r.call(i)}}}var ho=$.ReactCurrentBatchConfig,po=(new r.Component).refs;function vo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var _o={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=qs(),i=ho.suspense;(i=so(r=zs(r,e,i),i)).payload=t,null!=n&&(i.callback=n),uo(e,i),Qs(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=qs(),i=ho.suspense;(i=so(r=zs(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),uo(e,i),Qs(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=qs(),r=ho.suspense;(r=so(n=zs(n,e,r),r)).tag=2,null!=t&&(r.callback=t),uo(e,r),Qs(e,n)}};function yo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!Ur(n,r)||!Ur(i,o))}function go(e,t,n){var r=!1,i=ci,o=t.contextType;return"object"==typeof o&&null!==o?o=ro(o):(i=vi(t)?pi:fi.current,o=(r=null!=(r=t.contextTypes))?di(e,i):ci),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=_o,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function mo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&_o.enqueueReplaceState(t,t.state,null)}function bo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=po,oo(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=ro(o):(o=vi(t)?pi:fi.current,i.context=di(e,o)),co(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(vo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&_o.enqueueReplaceState(i,i.state,null),co(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var wo=Array.isArray;function Eo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===po&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function To(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Co(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Pu(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=ku(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=Eo(e,t,n),r.return=e,r):((r=Ou(n.type,n.key,n.props,null,e.mode,r)).ref=Eo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=xu(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Iu(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function h(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=ku(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Ou(t.type,t.key,t.props,null,e.mode,n)).ref=Eo(e,null,t),n.return=e,n;case te:return(t=xu(t,e.mode,n)).return=e,t}if(wo(t)||ve(t))return(t=Iu(t,e.mode,n,null)).return=e,t;To(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===i?n.type===ne?f(e,t,n.props.children,r,i):l(e,t,n,r):null;case te:return n.key===i?c(e,t,n,r):null}if(wo(n)||ve(n))return null!==i?null:f(e,t,n,r,null);To(e,n)}return null}function d(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,i,r.key):l(t,e,r,i);case te:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(wo(r)||ve(r))return f(t,e=e.get(n)||null,r,i,null);To(t,r)}return null}function v(i,a,s,u){for(var l=null,c=null,f=a,v=a=0,_=null;null!==f&&v<s.length;v++){f.index>v?(_=f,f=null):_=f.sibling;var y=p(i,f,s[v],u);if(null===y){null===f&&(f=_);break}e&&f&&null===y.alternate&&t(i,f),a=o(y,a,v),null===c?l=y:c.sibling=y,c=y,f=_}if(v===s.length)return n(i,f),l;if(null===f){for(;v<s.length;v++)null!==(f=h(i,s[v],u))&&(a=o(f,a,v),null===c?l=f:c.sibling=f,c=f);return l}for(f=r(i,f);v<s.length;v++)null!==(_=d(f,i,v,s[v],u))&&(e&&null!==_.alternate&&f.delete(null===_.key?v:_.key),a=o(_,a,v),null===c?l=_:c.sibling=_,c=_);return e&&f.forEach((function(e){return t(i,e)})),l}function _(i,s,u,l){var c=ve(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,v=s,_=s=0,y=null,g=u.next();null!==v&&!g.done;_++,g=u.next()){v.index>_?(y=v,v=null):y=v.sibling;var m=p(i,v,g.value,l);if(null===m){null===v&&(v=y);break}e&&v&&null===m.alternate&&t(i,v),s=o(m,s,_),null===f?c=m:f.sibling=m,f=m,v=y}if(g.done)return n(i,v),c;if(null===v){for(;!g.done;_++,g=u.next())null!==(g=h(i,g.value,l))&&(s=o(g,s,_),null===f?c=g:f.sibling=g,f=g);return c}for(v=r(i,v);!g.done;_++,g=u.next())null!==(g=d(v,i,_,g.value,l))&&(e&&null!==g.alternate&&v.delete(null===g.key?_:g.key),s=o(g,s,_),null===f?c=g:f.sibling=g,f=g);return e&&v.forEach((function(e){return t(i,e)})),c}return function(e,r,o,u){var l="object"==typeof o&&null!==o&&o.type===ne&&null===o.key;l&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case ee:e:{for(c=o.key,l=r;null!==l;){if(l.key===c){switch(l.tag){case 7:if(o.type===ne){n(e,l.sibling),(r=i(l,o.props.children)).return=e,e=r;break e}break;default:if(l.elementType===o.type){n(e,l.sibling),(r=i(l,o.props)).ref=Eo(e,l,o),r.return=e,e=r;break e}}n(e,l);break}t(e,l),l=l.sibling}o.type===ne?((r=Iu(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=Ou(o.type,o.key,o.props,null,e.mode,u)).ref=Eo(e,r,o),u.return=e,e=u)}return s(e);case te:e:{for(l=o.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=xu(o,e.mode,u)).return=e,e=r}return s(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=ku(o,e.mode,u)).return=e,e=r),s(e);if(wo(o))return v(e,r,o,u);if(ve(o))return _(e,r,o,u);if(c&&To(e,o),void 0===o&&!l)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var So=Co(!0),Po=Co(!1),Oo={},Io={current:Oo},ko={current:Oo},xo={current:Oo};function Ao(e){if(e===Oo)throw Error(a(174));return e}function Do(e,t){switch(li(xo,t),li(ko,e),li(Io,Oo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Fe(null,"");break;default:t=Fe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ui(Io),li(Io,t)}function No(){ui(Io),ui(ko),ui(xo)}function Ro(e){Ao(xo.current);var t=Ao(Io.current),n=Fe(t,e.type);t!==n&&(li(ko,e),li(Io,n))}function Mo(e){ko.current===e&&(ui(Io),ui(ko))}var Lo={current:0};function Fo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function jo(e,t){return{responder:e,props:t}}var Uo=$.ReactCurrentDispatcher,Wo=$.ReactCurrentBatchConfig,Bo=0,Ho=null,Ko=null,Vo=null,Go=!1;function qo(){throw Error(a(321))}function zo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Fr(e[n],t[n]))return!1;return!0}function Qo(e,t,n,r,i,o){if(Bo=o,Ho=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Uo.current=null===e||null===e.memoizedState?ya:ga,e=n(r,i),t.expirationTime===Bo){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(a(301));o+=1,Vo=Ko=null,t.updateQueue=null,Uo.current=ma,e=n(r,i)}while(t.expirationTime===Bo)}if(Uo.current=_a,t=null!==Ko&&null!==Ko.next,Bo=0,Vo=Ko=Ho=null,Go=!1,t)throw Error(a(300));return e}function Yo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Vo?Ho.memoizedState=Vo=e:Vo=Vo.next=e,Vo}function $o(){if(null===Ko){var e=Ho.alternate;e=null!==e?e.memoizedState:null}else e=Ko.next;var t=null===Vo?Ho.memoizedState:Vo.next;if(null!==t)Vo=t,Ko=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Ko=e).memoizedState,baseState:Ko.baseState,baseQueue:Ko.baseQueue,queue:Ko.queue,next:null},null===Vo?Ho.memoizedState=Vo=e:Vo=Vo.next=e}return Vo}function Xo(e,t){return"function"==typeof t?t(e):t}function Jo(e){var t=$o(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Ko,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var u=s=o=null,l=i;do{var c=l.expirationTime;if(c<Bo){var f={expirationTime:l.expirationTime,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===u?(s=u=f,o=r):u=u.next=f,c>Ho.expirationTime&&(Ho.expirationTime=c,au(c))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),ou(c,l.suspenseConfig),r=l.eagerReducer===e?l.eagerState:e(r,l.action);l=l.next}while(null!==l&&l!==i);null===u?o=r:u.next=s,Fr(r,t.memoizedState)||(xa=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Zo(e){var t=$o(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{o=e(o,s.action),s=s.next}while(s!==i);Fr(o,t.memoizedState)||(xa=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ea(e){var t=Yo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Xo,lastRenderedState:e}).dispatch=va.bind(null,Ho,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ho.updateQueue)?(t={lastEffect:null},Ho.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return $o().memoizedState}function ra(e,t,n,r){var i=Yo();Ho.effectTag|=e,i.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function ia(e,t,n,r){var i=$o();r=void 0===r?null:r;var o=void 0;if(null!==Ko){var a=Ko.memoizedState;if(o=a.destroy,null!==r&&zo(r,a.deps))return void ta(t,n,o,r)}Ho.effectTag|=e,i.memoizedState=ta(1|t,n,o,r)}function oa(e,t){return ra(516,4,e,t)}function aa(e,t){return ia(516,4,e,t)}function sa(e,t){return ia(4,2,e,t)}function ua(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function la(e,t,n){return n=null!=n?n.concat([e]):null,ia(4,2,ua.bind(null,t,e),n)}function ca(){}function fa(e,t){return Yo().memoizedState=[e,void 0===t?null:t],e}function ha(e,t){var n=$o();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&zo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=$o();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&zo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function da(e,t,n){var r=Wi();Hi(98>r?98:r,(function(){e(!0)})),Hi(97<r?97:r,(function(){var r=Wo.suspense;Wo.suspense=void 0===t?null:t;try{e(!1),n()}finally{Wo.suspense=r}}))}function va(e,t,n){var r=qs(),i=ho.suspense;i={expirationTime:r=zs(r,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===Ho||null!==o&&o===Ho)Go=!0,i.expirationTime=Bo,Ho.expirationTime=Bo;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,s=o(a,n);if(i.eagerReducer=o,i.eagerState=s,Fr(s,a))return}catch(e){}Qs(e,r)}}var _a={readContext:ro,useCallback:qo,useContext:qo,useEffect:qo,useImperativeHandle:qo,useLayoutEffect:qo,useMemo:qo,useReducer:qo,useRef:qo,useState:qo,useDebugValue:qo,useResponder:qo,useDeferredValue:qo,useTransition:qo},ya={readContext:ro,useCallback:fa,useContext:ro,useEffect:oa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,ua.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Yo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Yo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=va.bind(null,Ho,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Yo().memoizedState=e},useState:ea,useDebugValue:ca,useResponder:jo,useDeferredValue:function(e,t){var n=ea(e),r=n[0],i=n[1];return oa((function(){var n=Wo.suspense;Wo.suspense=void 0===t?null:t;try{i(e)}finally{Wo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(da.bind(null,t,e),[t,e]),n]}},ga={readContext:ro,useCallback:ha,useContext:ro,useEffect:aa,useImperativeHandle:la,useLayoutEffect:sa,useMemo:pa,useReducer:Jo,useRef:na,useState:function(){return Jo(Xo)},useDebugValue:ca,useResponder:jo,useDeferredValue:function(e,t){var n=Jo(Xo),r=n[0],i=n[1];return aa((function(){var n=Wo.suspense;Wo.suspense=void 0===t?null:t;try{i(e)}finally{Wo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Jo(Xo),n=t[0];return t=t[1],[ha(da.bind(null,t,e),[t,e]),n]}},ma={readContext:ro,useCallback:ha,useContext:ro,useEffect:aa,useImperativeHandle:la,useLayoutEffect:sa,useMemo:pa,useReducer:Zo,useRef:na,useState:function(){return Zo(Xo)},useDebugValue:ca,useResponder:jo,useDeferredValue:function(e,t){var n=Zo(Xo),r=n[0],i=n[1];return aa((function(){var n=Wo.suspense;Wo.suspense=void 0===t?null:t;try{i(e)}finally{Wo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zo(Xo),n=t[0];return t=t[1],[ha(da.bind(null,t,e),[t,e]),n]}},ba=null,wa=null,Ea=!1;function Ta(e,t){var n=Cu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ca(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Sa(e){if(Ea){var t=wa;if(t){var n=t;if(!Ca(e,t)){if(!(t=wn(n.nextSibling))||!Ca(e,t))return e.effectTag=-1025&e.effectTag|2,Ea=!1,void(ba=e);Ta(ba,n)}ba=e,wa=wn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ea=!1,ba=e}}function Pa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ba=e}function Oa(e){if(e!==ba)return!1;if(!Ea)return Pa(e),Ea=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=wa;t;)Ta(e,t),t=wn(t.nextSibling);if(Pa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){wa=wn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}wa=null}}else wa=ba?wn(e.stateNode.nextSibling):null;return!0}function Ia(){wa=ba=null,Ea=!1}var ka=$.ReactCurrentOwner,xa=!1;function Aa(e,t,n,r){t.child=null===e?Po(t,null,n,r):So(t,e.child,n,r)}function Da(e,t,n,r,i){n=n.render;var o=t.ref;return no(t,i),r=Qo(e,t,n,r,o,i),null===e||xa?(t.effectTag|=1,Aa(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Qa(e,t,i))}function Na(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Su(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ou(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ra(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:Ur)(i,r)&&e.ref===t.ref)?Qa(e,t,o):(t.effectTag|=1,(e=Pu(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ra(e,t,n,r,i,o){return null!==e&&Ur(e.memoizedProps,r)&&e.ref===t.ref&&(xa=!1,i<o)?(t.expirationTime=e.expirationTime,Qa(e,t,o)):La(e,t,n,r,o)}function Ma(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function La(e,t,n,r,i){var o=vi(n)?pi:fi.current;return o=di(t,o),no(t,i),n=Qo(e,t,n,r,o,i),null===e||xa?(t.effectTag|=1,Aa(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Qa(e,t,i))}function Fa(e,t,n,r,i){if(vi(n)){var o=!0;mi(t)}else o=!1;if(no(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),go(t,n,r),bo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var u=a.context,l=n.contextType;"object"==typeof l&&null!==l?l=ro(l):l=di(t,l=vi(n)?pi:fi.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||u!==l)&&mo(t,a,r,l),io=!1;var h=t.memoizedState;a.state=h,co(t,r,a,i),u=t.memoizedState,s!==r||h!==u||hi.current||io?("function"==typeof c&&(vo(t,n,c,r),u=t.memoizedState),(s=io||yo(t,n,s,r,h,u,l))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=l,r=s):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,ao(e,t),s=t.memoizedProps,a.props=t.type===t.elementType?s:Qi(t.type,s),u=a.context,"object"==typeof(l=n.contextType)&&null!==l?l=ro(l):l=di(t,l=vi(n)?pi:fi.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||u!==l)&&mo(t,a,r,l),io=!1,u=t.memoizedState,a.state=u,co(t,r,a,i),h=t.memoizedState,s!==r||u!==h||hi.current||io?("function"==typeof c&&(vo(t,n,c,r),h=t.memoizedState),(c=io||yo(t,n,s,r,u,h,l))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return ja(e,t,n,r,o,i)}function ja(e,t,n,r,i,o){Ma(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&bi(t,n,!1),Qa(e,t,o);r=t.stateNode,ka.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=So(t,e.child,null,o),t.child=So(t,null,s,o)):Aa(e,t,s,o),t.memoizedState=r.state,i&&bi(t,n,!0),t.child}function Ua(e){var t=e.stateNode;t.pendingContext?yi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yi(0,t.context,!1),Do(e,t.containerInfo)}var Wa,Ba,Ha,Ka={dehydrated:null,retryTime:0};function Va(e,t,n){var r,i=t.mode,o=t.pendingProps,a=Lo.current,s=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(s=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),li(Lo,1&a),null===e){if(void 0!==o.fallback&&Sa(t),s){if(s=o.fallback,(o=Iu(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Iu(s,i,n,null)).return=t,o.sibling=n,t.memoizedState=Ka,t.child=o,n}return i=o.children,t.memoizedState=null,t.child=Po(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,s){if(o=o.fallback,(n=Pu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(s=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=s;null!==s;)s.return=n,s=s.sibling;return(i=Pu(i,o)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=Ka,t.child=n,i}return n=So(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,s){if(s=o.fallback,(o=Iu(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Iu(s,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Ka,t.child=o,n}return t.memoizedState=null,t.child=So(t,e,o.children,n)}function Ga(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),to(e.return,t)}function qa(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=i,a.lastEffect=o)}function za(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(Aa(e,t,r.children,n),0!=(2&(r=Lo.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ga(e,n);else if(19===e.tag)Ga(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(li(Lo,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Fo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),qa(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Fo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}qa(t,!0,n,null,o,t.lastEffect);break;case"together":qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Qa(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&au(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Pu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Pu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ya(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function $a(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vi(t.type)&&_i(),null;case 3:return No(),ui(hi),ui(fi),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Oa(t)||(t.effectTag|=4),null;case 5:Mo(t),n=Ao(xo.current);var o=t.type;if(null!==e&&null!=t.stateNode)Ba(e,t,o,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ao(Io.current),Oa(t)){r=t.stateNode,o=t.type;var s=t.memoizedProps;switch(r[Cn]=t,r[Sn]=s,o){case"iframe":case"object":case"embed":zt("load",r);break;case"video":case"audio":for(e=0;e<$e.length;e++)zt($e[e],r);break;case"source":zt("error",r);break;case"img":case"image":case"link":zt("error",r),zt("load",r);break;case"form":zt("reset",r),zt("submit",r);break;case"details":zt("toggle",r);break;case"input":Te(r,s),zt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!s.multiple},zt("invalid",r),un(n,"onChange");break;case"textarea":Ae(r,s),zt("invalid",r),un(n,"onChange")}for(var u in on(o,s),e=null,s)if(s.hasOwnProperty(u)){var l=s[u];"children"===u?"string"==typeof l?r.textContent!==l&&(e=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(e=["children",""+l]):C.hasOwnProperty(u)&&null!=l&&un(n,u)}switch(o){case"input":be(r),Pe(r,s,!0);break;case"textarea":be(r),Ne(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=ln)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===sn&&(e=Le(o)),e===sn?"script"===o?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(o,{is:r.is}):(e=u.createElement(o),"select"===o&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,o),e[Cn]=t,e[Sn]=r,Wa(e,t),t.stateNode=e,u=an(o,r),o){case"iframe":case"object":case"embed":zt("load",e),l=r;break;case"video":case"audio":for(l=0;l<$e.length;l++)zt($e[l],e);l=r;break;case"source":zt("error",e),l=r;break;case"img":case"image":case"link":zt("error",e),zt("load",e),l=r;break;case"form":zt("reset",e),zt("submit",e),l=r;break;case"details":zt("toggle",e),l=r;break;case"input":Te(e,r),l=Ee(e,r),zt("invalid",e),un(n,"onChange");break;case"option":l=Ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},l=i({},r,{value:void 0}),zt("invalid",e),un(n,"onChange");break;case"textarea":Ae(e,r),l=xe(e,r),zt("invalid",e),un(n,"onChange");break;default:l=r}on(o,l);var c=l;for(s in c)if(c.hasOwnProperty(s)){var f=c[s];"style"===s?nn(e,f):"dangerouslySetInnerHTML"===s?null!=(f=f?f.__html:void 0)&&Ue(e,f):"children"===s?"string"==typeof f?("textarea"!==o||""!==f)&&We(e,f):"number"==typeof f&&We(e,""+f):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(C.hasOwnProperty(s)?null!=f&&un(n,s):null!=f&&X(e,s,f,u))}switch(o){case"input":be(e),Pe(e,r,!1);break;case"textarea":be(e),Ne(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?ke(e,!!r.multiple,n,!1):null!=r.defaultValue&&ke(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=ln)}yn(o,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ha(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ao(xo.current),Ao(Io.current),Oa(t)?(n=t.stateNode,r=t.memoizedProps,n[Cn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Cn]=t,t.stateNode=n)}return null;case 13:return ui(Lo),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Oa(t):(r=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=o,o.nextEffect=s):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Lo.current)?Os===bs&&(Os=ws):(Os!==bs&&Os!==ws||(Os=Es),0!==Ds&&null!==Cs&&(Nu(Cs,Ps),Ru(Cs,Ds)))),(n||r)&&(t.effectTag|=4),null);case 4:return No(),null;case 10:return eo(t),null;case 17:return vi(t.type)&&_i(),null;case 19:if(ui(Lo),null===(r=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(s=r.rendering)){if(o)Ya(r,!1);else if(Os!==bs||null!==e&&0!=(64&e.effectTag))for(s=t.child;null!==s;){if(null!==(e=Fo(s))){for(t.effectTag|=64,Ya(r,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)s=n,(o=r).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=s,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,s=e.dependencies,o.dependencies=null===s?null:{expirationTime:s.expirationTime,firstContext:s.firstContext,responders:s.responders}),r=r.sibling;return li(Lo,1&Lo.current|2),t.child}s=s.sibling}}else{if(!o)if(null!==(e=Fo(s))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ya(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Ui()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,Ya(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Ui()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Ui(),n.sibling=null,t=Lo.current,li(Lo,o?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Xa(e){switch(e.tag){case 1:vi(e.type)&&_i();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(No(),ui(hi),ui(fi),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Mo(e),null;case 13:return ui(Lo),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ui(Lo),null;case 4:return No(),null;case 10:return eo(e),null;default:return null}}function Ja(e,t){return{value:e,source:t,stack:ye(t)}}Wa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ba=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var s,u,l=t.stateNode;switch(Ao(Io.current),e=null,n){case"input":a=Ee(l,a),r=Ee(l,r),e=[];break;case"option":a=Ie(l,a),r=Ie(l,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=xe(l,a),r=xe(l,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=ln)}for(s in on(n,r),n=null,a)if(!r.hasOwnProperty(s)&&a.hasOwnProperty(s)&&null!=a[s])if("style"===s)for(u in l=a[s])l.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(C.hasOwnProperty(s)?e||(e=[]):(e=e||[]).push(s,null));for(s in r){var c=r[s];if(l=null!=a?a[s]:void 0,r.hasOwnProperty(s)&&c!==l&&(null!=c||null!=l))if("style"===s)if(l){for(u in l)!l.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in c)c.hasOwnProperty(u)&&l[u]!==c[u]&&(n||(n={}),n[u]=c[u])}else n||(e||(e=[]),e.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(e=e||[]).push(s,c)):"children"===s?l===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(C.hasOwnProperty(s)?(null!=c&&un(o,s),e||l===c||(e=[])):(e=e||[]).push(s,c))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},Ha=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Za="function"==typeof WeakSet?WeakSet:Set;function es(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&_e(n.type),t=t.value,null!==e&&1===e.tag&&_e(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ts(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gu(e,t)}else t.current=null}function ns(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function rs(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function is(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function os(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void is(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Qi(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Lt(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function as(e,t,n){switch("function"==typeof Eu&&Eu(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Hi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){gu(i,e)}}e=e.next}while(e!==r)}))}break;case 1:ts(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gu(e,t)}}(t,n);break;case 5:ts(t);break;case 4:cs(e,t,n)}}function ss(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ss(t)}function us(e){return 5===e.tag||3===e.tag||4===e.tag}function ls(e){e:{for(var t=e.return;null!==t;){if(us(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(We(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||us(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=ln));else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function cs(e,t,n){for(var r,i,o=t,s=!1;;){if(!s){s=o.return;e:for(;;){if(null===s)throw Error(a(160));switch(r=s.stateNode,s.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}s=s.return}s=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,c=n,f=l;;)if(as(u,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===l)break e;for(;null===f.sibling;){if(null===f.return||f.return===l)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(u=r,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(as(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(s=!1)}o.sibling.return=o.return,o=o.sibling}}function fs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rs(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Sn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ce(n,r),an(e,i),t=an(e,r),i=0;i<o.length;i+=2){var s=o[i],u=o[i+1];"style"===s?nn(n,u):"dangerouslySetInnerHTML"===s?Ue(n,u):"children"===s?We(n,u):X(n,s,u,t)}switch(e){case"input":Se(n,r);break;case"textarea":De(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?ke(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?ke(n,!!r.multiple,r.defaultValue,!0):ke(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Lt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Rs=Ui()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=tn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void hs(t);case 19:return void hs(t);case 17:return}throw Error(a(163))}function hs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Za),t.forEach((function(t){var r=bu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var ps="function"==typeof WeakMap?WeakMap:Map;function ds(e,t,n){(n=so(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ls||(Ls=!0,Fs=r),es(e,t)},n}function vs(e,t,n){(n=so(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return es(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===js?js=new Set([this]):js.add(this),es(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var _s,ys=Math.ceil,gs=$.ReactCurrentDispatcher,ms=$.ReactCurrentOwner,bs=0,ws=3,Es=4,Ts=0,Cs=null,Ss=null,Ps=0,Os=bs,Is=null,ks=1073741823,xs=1073741823,As=null,Ds=0,Ns=!1,Rs=0,Ms=null,Ls=!1,Fs=null,js=null,Us=!1,Ws=null,Bs=90,Hs=null,Ks=0,Vs=null,Gs=0;function qs(){return 0!=(48&Ts)?1073741821-(Ui()/10|0):0!==Gs?Gs:Gs=1073741821-(Ui()/10|0)}function zs(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Wi();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Ts))return Ps;if(null!==n)e=zi(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=zi(e,150,100);break;case 97:case 96:e=zi(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Cs&&e===Ps&&--e,e}function Qs(e,t){if(50<Ks)throw Ks=0,Vs=null,Error(a(185));if(null!==(e=Ys(e,t))){var n=Wi();1073741823===t?0!=(8&Ts)&&0==(48&Ts)?Zs(e):(Xs(e),0===Ts&&Gi()):Xs(e),0==(4&Ts)||98!==n&&99!==n||(null===Hs?Hs=new Map([[e,t]]):(void 0===(n=Hs.get(e))||n>t)&&Hs.set(e,t))}}function Ys(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(Cs===i&&(au(t),Os===Es&&Nu(i,Ps)),Ru(i,t)),i}function $s(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Du(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Xs(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Vi(Zs.bind(null,e));else{var t=$s(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=qs();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Di&&Ti(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Vi(Zs.bind(null,e)):Ki(r,Js.bind(null,e),{timeout:10*(1073741821-t)-Ui()}),e.callbackNode=t}}}function Js(e,t){if(Gs=0,t)return Mu(e,t=qs()),Xs(e),null;var n=$s(e);if(0!==n){if(t=e.callbackNode,0!=(48&Ts))throw Error(a(327));if(vu(),e===Cs&&n===Ps||nu(e,n),null!==Ss){var r=Ts;Ts|=16;for(var i=iu();;)try{uu();break}catch(t){ru(e,t)}if(Zi(),Ts=r,gs.current=i,1===Os)throw t=Is,nu(e,n),Nu(e,n),Xs(e),t;if(null===Ss)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Os,Cs=null,r){case bs:case 1:throw Error(a(345));case 2:Mu(e,2<n?2:n);break;case ws:if(Nu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(i)),1073741823===ks&&10<(i=Rs+500-Ui())){if(Ns){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(o=$s(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=mn(hu.bind(null,e),i);break}hu(e);break;case Es:if(Nu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(i)),Ns&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(i=$s(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==xs?r=10*(1073741821-xs)-Ui():1073741823===ks?r=0:(r=10*(1073741821-ks)-5e3,0>(r=(i=Ui())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ys(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=mn(hu.bind(null,e),r);break}hu(e);break;case 5:if(1073741823!==ks&&null!==As){o=ks;var s=As;if(0>=(r=0|s.busyMinDurationMs)?r=0:(i=0|s.busyDelayMs,r=(o=Ui()-(10*(1073741821-o)-(0|s.timeoutMs||5e3)))<=i?0:i+r-o),10<r){Nu(e,n),e.timeoutHandle=mn(hu.bind(null,e),r);break}}hu(e);break;default:throw Error(a(329))}if(Xs(e),e.callbackNode===t)return Js.bind(null,e)}}return null}function Zs(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&Ts))throw Error(a(327));if(vu(),e===Cs&&t===Ps||nu(e,t),null!==Ss){var n=Ts;Ts|=16;for(var r=iu();;)try{su();break}catch(t){ru(e,t)}if(Zi(),Ts=n,gs.current=r,1===Os)throw n=Is,nu(e,t),Nu(e,t),Xs(e),n;if(null!==Ss)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Cs=null,hu(e),Xs(e)}return null}function eu(e,t){var n=Ts;Ts|=1;try{return e(t)}finally{0===(Ts=n)&&Gi()}}function tu(e,t){var n=Ts;Ts&=-2,Ts|=8;try{return e(t)}finally{0===(Ts=n)&&Gi()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,bn(n)),null!==Ss)for(n=Ss.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&_i();break;case 3:No(),ui(hi),ui(fi);break;case 5:Mo(r);break;case 4:No();break;case 13:case 19:ui(Lo);break;case 10:eo(r)}n=n.return}Cs=e,Ss=Pu(e.current,null),Ps=t,Os=bs,Is=null,xs=ks=1073741823,As=null,Ds=0,Ns=!1}function ru(e,t){for(;;){try{if(Zi(),Uo.current=_a,Go)for(var n=Ho.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Bo=0,Vo=Ko=Ho=null,Go=!1,null===Ss||null===Ss.return)return Os=1,Is=t,Ss=null;e:{var i=e,o=Ss.return,a=Ss,s=t;if(t=Ps,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&a.mode)){var l=a.alternate;l?(a.updateQueue=l.updateQueue,a.memoizedState=l.memoizedState,a.expirationTime=l.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var c=0!=(1&Lo.current),f=o;do{var h;if(h=13===f.tag){var p=f.memoizedState;if(null!==p)h=null!==p.dehydrated;else{var d=f.memoizedProps;h=void 0!==d.fallback&&(!0!==d.unstable_avoidThisFallback||!c)}}if(h){var v=f.updateQueue;if(null===v){var _=new Set;_.add(u),f.updateQueue=_}else v.add(u);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var y=so(1073741823,null);y.tag=2,uo(a,y)}a.expirationTime=1073741823;break e}s=void 0,a=t;var g=i.pingCache;if(null===g?(g=i.pingCache=new ps,s=new Set,g.set(u,s)):void 0===(s=g.get(u))&&(s=new Set,g.set(u,s)),!s.has(a)){s.add(a);var m=mu.bind(null,i,u,a);u.then(m,m)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);s=Error((_e(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(a))}5!==Os&&(Os=2),s=Ja(s,a),f=o;do{switch(f.tag){case 3:u=s,f.effectTag|=4096,f.expirationTime=t,lo(f,ds(f,u,t));break e;case 1:u=s;var b=f.type,w=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof b.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===js||!js.has(w)))){f.effectTag|=4096,f.expirationTime=t,lo(f,vs(f,u,t));break e}}f=f.return}while(null!==f)}Ss=cu(Ss)}catch(e){t=e;continue}break}}function iu(){var e=gs.current;return gs.current=_a,null===e?_a:e}function ou(e,t){e<ks&&2<e&&(ks=e),null!==t&&e<xs&&2<e&&(xs=e,As=t)}function au(e){e>Ds&&(Ds=e)}function su(){for(;null!==Ss;)Ss=lu(Ss)}function uu(){for(;null!==Ss&&!Ni();)Ss=lu(Ss)}function lu(e){var t=_s(e.alternate,e,Ps);return e.memoizedProps=e.pendingProps,null===t&&(t=cu(e)),ms.current=null,t}function cu(e){Ss=e;do{var t=Ss.alternate;if(e=Ss.return,0==(2048&Ss.effectTag)){if(t=$a(t,Ss,Ps),1===Ps||1!==Ss.childExpirationTime){for(var n=0,r=Ss.child;null!==r;){var i=r.expirationTime,o=r.childExpirationTime;i>n&&(n=i),o>n&&(n=o),r=r.sibling}Ss.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Ss.firstEffect),null!==Ss.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ss.firstEffect),e.lastEffect=Ss.lastEffect),1<Ss.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ss:e.firstEffect=Ss,e.lastEffect=Ss))}else{if(null!==(t=Xa(Ss)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ss.sibling))return t;Ss=e}while(null!==Ss);return Os===bs&&(Os=5),null}function fu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function hu(e){var t=Wi();return Hi(99,pu.bind(null,e,t)),null}function pu(e,t){do{vu()}while(null!==Ws);if(0!=(48&Ts))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=fu(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Cs&&(Ss=Cs=null,Ps=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=Ts;Ts|=32,ms.current=null,vn=qt;var s=pn();if(dn(s)){if("selectionStart"in s)var u={start:s.selectionStart,end:s.selectionEnd};else e:{var l=(u=(u=s.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(l&&0!==l.rangeCount){u=l.anchorNode;var c=l.anchorOffset,f=l.focusNode;l=l.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var h=0,p=-1,d=-1,v=0,_=0,y=s,g=null;t:for(;;){for(var m;y!==u||0!==c&&3!==y.nodeType||(p=h+c),y!==f||0!==l&&3!==y.nodeType||(d=h+l),3===y.nodeType&&(h+=y.nodeValue.length),null!==(m=y.firstChild);)g=y,y=m;for(;;){if(y===s)break t;if(g===u&&++v===c&&(p=h),g===f&&++_===l&&(d=h),null!==(m=y.nextSibling))break;g=(y=g).parentNode}y=m}u=-1===p||-1===d?null:{start:p,end:d}}else u=null}u=u||{start:0,end:0}}else u=null;_n={activeElementDetached:null,focusedElem:s,selectionRange:u},qt=!1,Ms=i;do{try{du()}catch(e){if(null===Ms)throw Error(a(330));gu(Ms,e),Ms=Ms.nextEffect}}while(null!==Ms);Ms=i;do{try{for(s=e,u=t;null!==Ms;){var b=Ms.effectTag;if(16&b&&We(Ms.stateNode,""),128&b){var w=Ms.alternate;if(null!==w){var E=w.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&b){case 2:ls(Ms),Ms.effectTag&=-3;break;case 6:ls(Ms),Ms.effectTag&=-3,fs(Ms.alternate,Ms);break;case 1024:Ms.effectTag&=-1025;break;case 1028:Ms.effectTag&=-1025,fs(Ms.alternate,Ms);break;case 4:fs(Ms.alternate,Ms);break;case 8:cs(s,c=Ms,u),ss(c)}Ms=Ms.nextEffect}}catch(e){if(null===Ms)throw Error(a(330));gu(Ms,e),Ms=Ms.nextEffect}}while(null!==Ms);if(E=_n,w=pn(),b=E.focusedElem,u=E.selectionRange,w!==b&&b&&b.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(b.ownerDocument.documentElement,b)){null!==u&&dn(b)&&(w=u.start,void 0===(E=u.end)&&(E=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(E,b.value.length)):(E=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(E=E.getSelection(),c=b.textContent.length,s=Math.min(u.start,c),u=void 0===u.end?s:Math.min(u.end,c),!E.extend&&s>u&&(c=u,u=s,s=c),c=hn(b,s),f=hn(b,u),c&&f&&(1!==E.rangeCount||E.anchorNode!==c.node||E.anchorOffset!==c.offset||E.focusNode!==f.node||E.focusOffset!==f.offset)&&((w=w.createRange()).setStart(c.node,c.offset),E.removeAllRanges(),s>u?(E.addRange(w),E.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),E.addRange(w))))),w=[];for(E=b;E=E.parentNode;)1===E.nodeType&&w.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(E=w[b]).element.scrollLeft=E.left,E.element.scrollTop=E.top}qt=!!vn,_n=vn=null,e.current=n,Ms=i;do{try{for(b=e;null!==Ms;){var T=Ms.effectTag;if(36&T&&os(b,Ms.alternate,Ms),128&T){w=void 0;var C=Ms.ref;if(null!==C){var S=Ms.stateNode;switch(Ms.tag){case 5:w=S;break;default:w=S}"function"==typeof C?C(w):C.current=w}}Ms=Ms.nextEffect}}catch(e){if(null===Ms)throw Error(a(330));gu(Ms,e),Ms=Ms.nextEffect}}while(null!==Ms);Ms=null,Ri(),Ts=o}else e.current=n;if(Us)Us=!1,Ws=e,Bs=t;else for(Ms=i;null!==Ms;)t=Ms.nextEffect,Ms.nextEffect=null,Ms=t;if(0===(t=e.firstPendingTime)&&(js=null),1073741823===t?e===Vs?Ks++:(Ks=0,Vs=e):Ks=0,"function"==typeof wu&&wu(n.stateNode,r),Xs(e),Ls)throw Ls=!1,e=Fs,Fs=null,e;return 0!=(8&Ts)||Gi(),null}function du(){for(;null!==Ms;){var e=Ms.effectTag;0!=(256&e)&&ns(Ms.alternate,Ms),0==(512&e)||Us||(Us=!0,Ki(97,(function(){return vu(),null}))),Ms=Ms.nextEffect}}function vu(){if(90!==Bs){var e=97<Bs?97:Bs;return Bs=90,Hi(e,_u)}}function _u(){if(null===Ws)return!1;var e=Ws;if(Ws=null,0!=(48&Ts))throw Error(a(331));var t=Ts;for(Ts|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rs(5,n),is(5,n)}}catch(t){if(null===e)throw Error(a(330));gu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Ts=t,Gi(),!0}function yu(e,t,n){uo(e,t=ds(e,t=Ja(n,t),1073741823)),null!==(e=Ys(e,1073741823))&&Xs(e)}function gu(e,t){if(3===e.tag)yu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===js||!js.has(r))){uo(n,e=vs(n,e=Ja(t,e),1073741823)),null!==(n=Ys(n,1073741823))&&Xs(n);break}}n=n.return}}function mu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Cs===e&&Ps===n?Os===Es||Os===ws&&1073741823===ks&&Ui()-Rs<500?nu(e,Ps):Ns=!0:Du(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Xs(e)))}function bu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=zs(t=qs(),e,null)),null!==(e=Ys(e,t))&&Xs(e)}_s=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||hi.current)xa=!0;else{if(r<n){switch(xa=!1,t.tag){case 3:Ua(t),Ia();break;case 5:if(Ro(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vi(t.type)&&mi(t);break;case 4:Do(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,i=t.type._context,li(Yi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Va(e,t,n):(li(Lo,1&Lo.current),null!==(t=Qa(e,t,n))?t.sibling:null);li(Lo,1&Lo.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return za(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),li(Lo,Lo.current),!r)return null}return Qa(e,t,n)}xa=!1}}else xa=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=di(t,fi.current),no(t,n),i=Qo(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vi(r)){var o=!0;mi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,oo(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&vo(t,r,s,e),i.updater=_o,t.stateNode=i,i._reactInternalFiber=t,bo(t,r,e,n),t=ja(null,t,r,!0,o,n)}else t.tag=0,Aa(null,t,i,n),t=t.child;return t;case 16:e:{if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,o=t.tag=function(e){if("function"==typeof e)return Su(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===fe)return 14}return 2}(i),e=Qi(i,e),o){case 0:t=La(null,t,i,e,n);break e;case 1:t=Fa(null,t,i,e,n);break e;case 11:t=Da(null,t,i,e,n);break e;case 14:t=Na(null,t,i,Qi(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,La(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 1:return r=t.type,i=t.pendingProps,Fa(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 3:if(Ua(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,ao(e,t),co(t,r,null,n),(r=t.memoizedState.element)===i)Ia(),t=Qa(e,t,n);else{if((i=t.stateNode.hydrate)&&(wa=wn(t.stateNode.containerInfo.firstChild),ba=t,i=Ea=!0),i)for(n=Po(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Aa(e,t,r,n),Ia();t=t.child}return t;case 5:return Ro(t),null===e&&Sa(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,s=i.children,gn(r,i)?s=null:null!==o&&gn(r,o)&&(t.effectTag|=16),Ma(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Aa(e,t,s,n),t=t.child),t;case 6:return null===e&&Sa(t),null;case 13:return Va(e,t,n);case 4:return Do(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=So(t,null,r,n):Aa(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Da(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 7:return Aa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Aa(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,s=t.memoizedProps,o=i.value;var u=t.type._context;if(li(Yi,u._currentValue),u._currentValue=o,null!==s)if(u=s.value,0===(o=Fr(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(s.children===i.children&&!hi.current){t=Qa(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var l=u.dependencies;if(null!==l){s=u.child;for(var c=l.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===u.tag&&((c=so(n,null)).tag=2,uo(u,c)),u.expirationTime<n&&(u.expirationTime=n),null!==(c=u.alternate)&&c.expirationTime<n&&(c.expirationTime=n),to(u.return,n),l.expirationTime<n&&(l.expirationTime=n);break}c=c.next}}else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}Aa(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,no(t,n),r=r(i=ro(i,o.unstable_observedBits)),t.effectTag|=1,Aa(e,t,r,n),t.child;case 14:return o=Qi(i=t.type,t.pendingProps),Na(e,t,i,o=Qi(i.type,o),r,n);case 15:return Ra(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Qi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vi(r)?(e=!0,mi(t)):e=!1,no(t,n),go(t,r,i),bo(t,r,i,n),ja(null,t,r,!0,e,n);case 19:return za(e,t,n)}throw Error(a(156,t.tag))};var wu=null,Eu=null;function Tu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Cu(e,t,n,r){return new Tu(e,t,n,r)}function Su(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Pu(e,t){var n=e.alternate;return null===n?((n=Cu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ou(e,t,n,r,i,o){var s=2;if(r=e,"function"==typeof e)Su(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case ne:return Iu(n.children,i,o,t);case se:s=8,i|=7;break;case re:s=8,i|=1;break;case ie:return(e=Cu(12,n,t,8|i)).elementType=ie,e.type=ie,e.expirationTime=o,e;case le:return(e=Cu(13,n,t,i)).type=le,e.elementType=le,e.expirationTime=o,e;case ce:return(e=Cu(19,n,t,i)).elementType=ce,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case oe:s=10;break e;case ae:s=9;break e;case ue:s=11;break e;case fe:s=14;break e;case he:s=16,r=null;break e;case pe:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Cu(s,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Iu(e,t,n,r){return(e=Cu(7,e,r,t)).expirationTime=n,e}function ku(e,t,n){return(e=Cu(6,e,null,t)).expirationTime=n,e}function xu(e,t,n){return(t=Cu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Au(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Du(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Nu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Ru(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Mu(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Lu(e,t,n,r){var i=t.current,o=qs(),s=ho.suspense;o=zs(o,i,s);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(vi(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var l=n.type;if(vi(l)){n=gi(n,l,u);break e}}n=u}else n=ci;return null===t.context?t.context=n:t.pendingContext=n,(t=so(o,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),uo(i,t),Qs(i,o),o}function Fu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ju(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Uu(e,t){ju(e,t),(e=e.alternate)&&ju(e,t)}function Wu(e,t,n){var r=new Au(e,t,n=null!=n&&!0===n.hydrate),i=Cu(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,oo(i),e[Pn]=r.current,n&&0!==t&&function(e,t){var n=Je(t);Pt.forEach((function(e){dt(e,t,n)})),Ot.forEach((function(e){dt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Bu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Hu(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var e=Fu(a);s.call(e)}}Lu(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Wu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var u=i;i=function(){var e=Fu(a);u.call(e)}}tu((function(){Lu(t,a,e,i)}))}return Fu(a)}function Ku(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Vu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Bu(t))throw Error(a(200));return Ku(e,t,null,n)}Wu.prototype.render=function(e){Lu(e,this._internalRoot,null,null)},Wu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Lu(null,e,null,(function(){t[Pn]=null}))},vt=function(e){if(13===e.tag){var t=zi(qs(),150,100);Qs(e,t),Uu(e,t)}},_t=function(e){13===e.tag&&(Qs(e,3),Uu(e,3))},yt=function(e){if(13===e.tag){var t=qs();Qs(e,t=zs(t,e,null)),Uu(e,t)}},I=function(e,t,n){switch(t){case"input":if(Se(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=xn(r);if(!i)throw Error(a(90));we(r),Se(r,i)}}}break;case"textarea":De(e,n);break;case"select":null!=(t=n.value)&&ke(e,!!n.multiple,t,!1)}},R=eu,M=function(e,t,n,r,i){var o=Ts;Ts|=4;try{return Hi(98,e.bind(null,t,n,r,i))}finally{0===(Ts=o)&&Gi()}},L=function(){0==(49&Ts)&&(function(){if(null!==Hs){var e=Hs;Hs=null,e.forEach((function(e,t){Mu(t,e),Xs(t)})),Gi()}}(),vu())},F=function(e,t){var n=Ts;Ts|=2;try{return e(t)}finally{0===(Ts=n)&&Gi()}};var Gu,qu,zu={Events:[In,kn,xn,P,T,Fn,function(e){it(e,Ln)},D,N,Xt,st,vu,{current:!1}]};qu=(Gu={findFiberByHostInstance:On,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);wu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Eu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},Gu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:$.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return qu?qu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=zu,t.createPortal=Vu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&Ts))throw Error(a(187));var n=Ts;Ts|=1;try{return Hi(99,e.bind(null,t))}finally{Ts=n,Gi()}},t.hydrate=function(e,t,n){if(!Bu(t))throw Error(a(200));return Hu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Bu(t))throw Error(a(200));return Hu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Bu(e))throw Error(a(40));return!!e._reactRootContainer&&(tu((function(){Hu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Pn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Vu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Bu(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Hu(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(359)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,a,s;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,l=null,c=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(c,0))},i=function(e,t){l=setTimeout(e,t)},o=function(){clearTimeout(l)},a=function(){return!1},s=t.unstable_forceFrameRate=function(){}}else{var h=window.performance,p=window.Date,d=window.setTimeout,v=window.clearTimeout;if("undefined"!=typeof console){var _=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof _&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof h&&"function"==typeof h.now)t.unstable_now=function(){return h.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var g=!1,m=null,b=-1,w=5,E=0;a=function(){return t.unstable_now()>=E},s=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=0<e?Math.floor(1e3/e):5};var T=new MessageChannel,C=T.port2;T.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();E=e+w;try{m(!0,e)?C.postMessage(null):(g=!1,m=null)}catch(e){throw C.postMessage(null),e}}else g=!1},r=function(e){m=e,g||(g=!0,C.postMessage(null))},i=function(e,n){b=d((function(){e(t.unstable_now())}),n)},o=function(){v(b),b=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<I(i,t)))break e;e[r]=t,e[n]=i,n=r}}function P(e){return void 0===(e=e[0])?null:e}function O(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],s=o+1,u=e[s];if(void 0!==a&&0>I(a,n))void 0!==u&&0>I(u,a)?(e[r]=u,e[s]=n,r=s):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==u&&0>I(u,n)))break e;e[r]=u,e[s]=n,r=s}}}return t}return null}function I(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var k=[],x=[],A=1,D=null,N=3,R=!1,M=!1,L=!1;function F(e){for(var t=P(x);null!==t;){if(null===t.callback)O(x);else{if(!(t.startTime<=e))break;O(x),t.sortIndex=t.expirationTime,S(k,t)}t=P(x)}}function j(e){if(L=!1,F(e),!M)if(null!==P(k))M=!0,r(U);else{var t=P(x);null!==t&&i(j,t.startTime-e)}}function U(e,n){M=!1,L&&(L=!1,o()),R=!0;var r=N;try{for(F(n),D=P(k);null!==D&&(!(D.expirationTime>n)||e&&!a());){var s=D.callback;if(null!==s){D.callback=null,N=D.priorityLevel;var u=s(D.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?D.callback=u:D===P(k)&&O(k),F(n)}else O(k);D=P(k)}if(null!==D)var l=!0;else{var c=P(x);null!==c&&i(j,c.startTime-n),l=!1}return l}finally{D=null,N=r,R=!1}}function W(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=s;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||R||(M=!0,r(U))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return P(k)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=B,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,n,a){var s=t.unstable_now();if("object"==typeof a&&null!==a){var u=a.delay;u="number"==typeof u&&0<u?s+u:s,a="number"==typeof a.timeout?a.timeout:W(e)}else a=W(e),u=s;return e={id:A++,callback:n,priorityLevel:e,startTime:u,expirationTime:a=u+a,sortIndex:-1},u>s?(e.sortIndex=u,S(x,e),null===P(k)&&e===P(x)&&(L?o():L=!0,i(j,u-s))):(e.sortIndex=a,S(k,e),M||R||(M=!0,r(U))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();F(e);var n=P(k);return n!==D&&null!==D&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<D.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},function(e,t,n){"use strict";n.r(t),n.d(t,"__extends",(function(){return i})),n.d(t,"__assign",(function(){return o})),n.d(t,"__rest",(function(){return a})),n.d(t,"__decorate",(function(){return s})),n.d(t,"__param",(function(){return u})),n.d(t,"__metadata",(function(){return l})),n.d(t,"__awaiter",(function(){return c})),n.d(t,"__generator",(function(){return f})),n.d(t,"__exportStar",(function(){return h})),n.d(t,"__values",(function(){return p})),n.d(t,"__read",(function(){return d})),n.d(t,"__spread",(function(){return v})),n.d(t,"__spreadArrays",(function(){return _})),n.d(t,"__await",(function(){return y})),n.d(t,"__asyncGenerator",(function(){return g})),n.d(t,"__asyncDelegator",(function(){return m})),n.d(t,"__asyncValues",(function(){return b})),n.d(t,"__makeTemplateObject",(function(){return w})),n.d(t,"__importStar",(function(){return E})),n.d(t,"__importDefault",(function(){return T})),n.d(t,"__classPrivateFieldGet",(function(){return C})),n.d(t,"__classPrivateFieldSet",(function(){return S}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function i(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function s(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function u(e,t){return function(n,r){t(n,r,e)}}function l(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function c(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function h(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function d(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(d(arguments[t]));return e}function _(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}function y(e){return this instanceof y?(this.v=e,this):new y(e)}function g(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=i[e](t)).value instanceof y?Promise.resolve(n.value.v).then(u,l):c(o[0][2],n)}catch(e){c(o[0][3],e)}var n}function u(e){s("next",e)}function l(e){s("throw",e)}function c(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function m(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,i){t[r]=e[r]?function(t){return(n=!n)?{value:y(e[r](t)),done:"return"===r}:i?i(t):t}:i}}function b(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=p(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){(function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)})(r,i,(t=e[n](t)).done,t.value)}))}}}function w(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function E(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function T(e){return e&&e.__esModule?e:{default:e}}function C(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function S(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},function(e,t,n){"use strict";n.r(t),n.d(t,"__extends",(function(){return i})),n.d(t,"__assign",(function(){return o})),n.d(t,"__rest",(function(){return a})),n.d(t,"__decorate",(function(){return s})),n.d(t,"__param",(function(){return u})),n.d(t,"__metadata",(function(){return l})),n.d(t,"__awaiter",(function(){return c})),n.d(t,"__generator",(function(){return f})),n.d(t,"__exportStar",(function(){return h})),n.d(t,"__values",(function(){return p})),n.d(t,"__read",(function(){return d})),n.d(t,"__spread",(function(){return v})),n.d(t,"__spreadArrays",(function(){return _})),n.d(t,"__await",(function(){return y})),n.d(t,"__asyncGenerator",(function(){return g})),n.d(t,"__asyncDelegator",(function(){return m})),n.d(t,"__asyncValues",(function(){return b})),n.d(t,"__makeTemplateObject",(function(){return w})),n.d(t,"__importStar",(function(){return E})),n.d(t,"__importDefault",(function(){return T})),n.d(t,"__classPrivateFieldGet",(function(){return C})),n.d(t,"__classPrivateFieldSet",(function(){return S}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function i(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function s(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function u(e,t){return function(n,r){t(n,r,e)}}function l(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function c(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function h(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function d(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(d(arguments[t]));return e}function _(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}function y(e){return this instanceof y?(this.v=e,this):new y(e)}function g(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=i[e](t)).value instanceof y?Promise.resolve(n.value.v).then(u,l):c(o[0][2],n)}catch(e){c(o[0][3],e)}var n}function u(e){s("next",e)}function l(e){s("throw",e)}function c(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function m(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,i){t[r]=e[r]?function(t){return(n=!n)?{value:y(e[r](t)),done:"return"===r}:i?i(t):t}:i}}function b(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=p(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){(function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)})(r,i,(t=e[n](t)).done,t.value)}))}}}function w(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function E(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function T(e){return e&&e.__esModule?e:{default:e}}function C(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function S(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},function(e,t,n){"use strict";n.r(t),n.d(t,"__extends",(function(){return i})),n.d(t,"__assign",(function(){return o})),n.d(t,"__rest",(function(){return a})),n.d(t,"__decorate",(function(){return s})),n.d(t,"__param",(function(){return u})),n.d(t,"__metadata",(function(){return l})),n.d(t,"__awaiter",(function(){return c})),n.d(t,"__generator",(function(){return f})),n.d(t,"__exportStar",(function(){return h})),n.d(t,"__values",(function(){return p})),n.d(t,"__read",(function(){return d})),n.d(t,"__spread",(function(){return v})),n.d(t,"__spreadArrays",(function(){return _})),n.d(t,"__await",(function(){return y})),n.d(t,"__asyncGenerator",(function(){return g})),n.d(t,"__asyncDelegator",(function(){return m})),n.d(t,"__asyncValues",(function(){return b})),n.d(t,"__makeTemplateObject",(function(){return w})),n.d(t,"__importStar",(function(){return E})),n.d(t,"__importDefault",(function(){return T})),n.d(t,"__classPrivateFieldGet",(function(){return C})),n.d(t,"__classPrivateFieldSet",(function(){return S}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function i(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function s(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function u(e,t){return function(n,r){t(n,r,e)}}function l(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function c(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function h(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function d(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(d(arguments[t]));return e}function _(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}function y(e){return this instanceof y?(this.v=e,this):new y(e)}function g(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=i[e](t)).value instanceof y?Promise.resolve(n.value.v).then(u,l):c(o[0][2],n)}catch(e){c(o[0][3],e)}var n}function u(e){s("next",e)}function l(e){s("throw",e)}function c(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function m(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,i){t[r]=e[r]?function(t){return(n=!n)?{value:y(e[r](t)),done:"return"===r}:i?i(t):t}:i}}function b(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=p(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){(function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)})(r,i,(t=e[n](t)).done,t.value)}))}}}function w(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function E(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function T(e){return e&&e.__esModule?e:{default:e}}function C(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function S(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},function(e,t,n){"use strict";n(364)},function(e,t,n){"use strict";(function(r){Object.defineProperty(t,"__esModule",{value:!0});var i,o,a=(i=n(2))&&"object"==typeof i&&"default"in i?i.default:i,s=n(366),u=n(99),l=n(142),c=n(141),f=function(){function e(e){this.domStorage_=e,this.prefix_="firebase:"}return e.prototype.set=function(e,t){null==t?this.domStorage_.removeItem(this.prefixedName_(e)):this.domStorage_.setItem(this.prefixedName_(e),u.stringify(t))},e.prototype.get=function(e){var t=this.domStorage_.getItem(this.prefixedName_(e));return null==t?null:u.jsonEval(t)},e.prototype.remove=function(e){this.domStorage_.removeItem(this.prefixedName_(e))},e.prototype.prefixedName_=function(e){return this.prefix_+e},e.prototype.toString=function(){return this.domStorage_.toString()},e}(),h=function(){function e(){this.cache_={},this.isInMemoryStorage=!0}return e.prototype.set=function(e,t){null==t?delete this.cache_[e]:this.cache_[e]=t},e.prototype.get=function(e){return u.contains(this.cache_,e)?this.cache_[e]:null},e.prototype.remove=function(e){delete this.cache_[e]},e}(),p=function(e){try{if("undefined"!=typeof window&&void 0!==window[e]){var t=window[e];return t.setItem("firebase:sentinel","cache"),t.removeItem("firebase:sentinel"),new f(t)}}catch(e){}return new h},d=p("localStorage"),v=p("sessionStorage"),_=new l.Logger("@firebase/database"),y=(o=1,function(){return o++}),g=function(e){var t=u.stringToByteArray(e),n=new u.Sha1;n.update(t);var r=n.digest();return u.base64.encodeByteArray(r)},m=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n="",r=0;r<e.length;r++){var i=e[r];Array.isArray(i)||i&&"object"==typeof i&&"number"==typeof i.length?n+=m.apply(null,i):n+="object"==typeof i?u.stringify(i):i,n+=" "}return n},b=null,w=!0,E=function(e,t){u.assert(!t||!0===e||!1===e,"Can't turn on custom loggers persistently."),!0===e?(_.logLevel=l.LogLevel.VERBOSE,b=_.log.bind(_),t&&v.set("logging_enabled",!0)):"function"==typeof e?b=e:(b=null,v.remove("logging_enabled"))},T=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!0===w&&(w=!1,null===b&&!0===v.get("logging_enabled")&&E(!0)),b){var n=m.apply(null,e);b(n)}},C=function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];T.apply(void 0,s.__spread([e],t))}},S=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE INTERNAL ERROR: "+m.apply(void 0,s.__spread(e));_.error(n)},P=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE FATAL ERROR: "+m.apply(void 0,s.__spread(e));throw _.error(n),new Error(n)},O=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE WARNING: "+m.apply(void 0,s.__spread(e));_.warn(n)},I=function(e){return"number"==typeof e&&(e!=e||e===Number.POSITIVE_INFINITY||e===Number.NEGATIVE_INFINITY)},k="[MIN_NAME]",x="[MAX_NAME]",A=function(e,t){if(e===t)return 0;if(e===k||t===x)return-1;if(t===k||e===x)return 1;var n=U(e),r=U(t);return null!==n?null!==r?n-r==0?e.length-t.length:n-r:-1:null!==r?1:e<t?-1:1},D=function(e,t){return e===t?0:e<t?-1:1},N=function(e,t){if(t&&e in t)return t[e];throw new Error("Missing required key ("+e+") in object: "+u.stringify(t))},R=function(e){if("object"!=typeof e||null===e)return u.stringify(e);var t=[];for(var n in e)t.push(n);t.sort();for(var r="{",i=0;i<t.length;i++)0!==i&&(r+=","),r+=u.stringify(t[i]),r+=":",r+=R(e[t[i]]);return r+="}"},M=function(e,t){var n=e.length;if(n<=t)return[e];for(var r=[],i=0;i<n;i+=t)i+t>n?r.push(e.substring(i,n)):r.push(e.substring(i,i+t));return r};function L(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])}var F=function(e){u.assert(!I(e),"Invalid JSON number");var t,n,r,i,o;0===e?(n=0,r=0,t=1/e==-1/0?1:0):(t=e<0,(e=Math.abs(e))>=Math.pow(2,-1022)?(n=(i=Math.min(Math.floor(Math.log(e)/Math.LN2),1023))+1023,r=Math.round(e*Math.pow(2,52-i)-Math.pow(2,52))):(n=0,r=Math.round(e/Math.pow(2,-1074))));var a=[];for(o=52;o;o-=1)a.push(r%2?1:0),r=Math.floor(r/2);for(o=11;o;o-=1)a.push(n%2?1:0),n=Math.floor(n/2);a.push(t?1:0),a.reverse();var s=a.join(""),l="";for(o=0;o<64;o+=8){var c=parseInt(s.substr(o,8),2).toString(16);1===c.length&&(c="0"+c),l+=c}return l.toLowerCase()},j=new RegExp("^-?(0*)\\d{1,10}$"),U=function(e){if(j.test(e)){var t=Number(e);if(t>=-2147483648&&t<=2147483647)return t}return null},W=function(e){try{e()}catch(e){setTimeout((function(){var t=e.stack||"";throw O("Exception was thrown by user callback.",t),e}),Math.floor(0))}},B=function(e,t){var n=setTimeout(e,t);return"object"==typeof n&&n.unref&&n.unref(),n},H=function(){function e(e,t){if(void 0===t){this.pieces_=e.split("/");for(var n=0,r=0;r<this.pieces_.length;r++)this.pieces_[r].length>0&&(this.pieces_[n]=this.pieces_[r],n++);this.pieces_.length=n,this.pieceNum_=0}else this.pieces_=e,this.pieceNum_=t}return Object.defineProperty(e,"Empty",{get:function(){return new e("")},enumerable:!0,configurable:!0}),e.prototype.getFront=function(){return this.pieceNum_>=this.pieces_.length?null:this.pieces_[this.pieceNum_]},e.prototype.getLength=function(){return this.pieces_.length-this.pieceNum_},e.prototype.popFront=function(){var t=this.pieceNum_;return t<this.pieces_.length&&t++,new e(this.pieces_,t)},e.prototype.getBack=function(){return this.pieceNum_<this.pieces_.length?this.pieces_[this.pieces_.length-1]:null},e.prototype.toString=function(){for(var e="",t=this.pieceNum_;t<this.pieces_.length;t++)""!==this.pieces_[t]&&(e+="/"+this.pieces_[t]);return e||"/"},e.prototype.toUrlEncodedString=function(){for(var e="",t=this.pieceNum_;t<this.pieces_.length;t++)""!==this.pieces_[t]&&(e+="/"+encodeURIComponent(String(this.pieces_[t])));return e||"/"},e.prototype.slice=function(e){return void 0===e&&(e=0),this.pieces_.slice(this.pieceNum_+e)},e.prototype.parent=function(){if(this.pieceNum_>=this.pieces_.length)return null;for(var t=[],n=this.pieceNum_;n<this.pieces_.length-1;n++)t.push(this.pieces_[n]);return new e(t,0)},e.prototype.child=function(t){for(var n=[],r=this.pieceNum_;r<this.pieces_.length;r++)n.push(this.pieces_[r]);if(t instanceof e)for(r=t.pieceNum_;r<t.pieces_.length;r++)n.push(t.pieces_[r]);else{var i=t.split("/");for(r=0;r<i.length;r++)i[r].length>0&&n.push(i[r])}return new e(n,0)},e.prototype.isEmpty=function(){return this.pieceNum_>=this.pieces_.length},e.relativePath=function(t,n){var r=t.getFront(),i=n.getFront();if(null===r)return n;if(r===i)return e.relativePath(t.popFront(),n.popFront());throw new Error("INTERNAL ERROR: innerPath ("+n+") is not within outerPath ("+t+")")},e.comparePaths=function(e,t){for(var n=e.slice(),r=t.slice(),i=0;i<n.length&&i<r.length;i++){var o=A(n[i],r[i]);if(0!==o)return o}return n.length===r.length?0:n.length<r.length?-1:1},e.prototype.equals=function(e){if(this.getLength()!==e.getLength())return!1;for(var t=this.pieceNum_,n=e.pieceNum_;t<=this.pieces_.length;t++,n++)if(this.pieces_[t]!==e.pieces_[n])return!1;return!0},e.prototype.contains=function(e){var t=this.pieceNum_,n=e.pieceNum_;if(this.getLength()>e.getLength())return!1;for(;t<this.pieces_.length;){if(this.pieces_[t]!==e.pieces_[n])return!1;++t,++n}return!0},e}(),K=function(){function e(e,t){this.errorPrefix_=t,this.parts_=e.slice(),this.byteLength_=Math.max(1,this.parts_.length);for(var n=0;n<this.parts_.length;n++)this.byteLength_+=u.stringLength(this.parts_[n]);this.checkValid_()}return Object.defineProperty(e,"MAX_PATH_DEPTH",{get:function(){return 32},enumerable:!0,configurable:!0}),Object.defineProperty(e,"MAX_PATH_LENGTH_BYTES",{get:function(){return 768},enumerable:!0,configurable:!0}),e.prototype.push=function(e){this.parts_.length>0&&(this.byteLength_+=1),this.parts_.push(e),this.byteLength_+=u.stringLength(e),this.checkValid_()},e.prototype.pop=function(){var e=this.parts_.pop();this.byteLength_-=u.stringLength(e),this.parts_.length>0&&(this.byteLength_-=1)},e.prototype.checkValid_=function(){if(this.byteLength_>e.MAX_PATH_LENGTH_BYTES)throw new Error(this.errorPrefix_+"has a key path longer than "+e.MAX_PATH_LENGTH_BYTES+" bytes ("+this.byteLength_+").");if(this.parts_.length>e.MAX_PATH_DEPTH)throw new Error(this.errorPrefix_+"path specified exceeds the maximum depth that can be written ("+e.MAX_PATH_DEPTH+") or object contains a cycle "+this.toErrorString())},e.prototype.toErrorString=function(){return 0===this.parts_.length?"":"in property '"+this.parts_.join(".")+"'"},e}(),V=function(){function e(e,t,n,r,i,o){void 0===i&&(i=""),void 0===o&&(o=!1),this.secure=t,this.namespace=n,this.webSocketOnly=r,this.persistenceKey=i,this.includeNamespaceInQueryParams=o,this.host=e.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.internalHost=d.get("host:"+e)||this.host}return e.prototype.needsQueryParam=function(){return this.host!==this.internalHost||this.isCustomHost()||this.includeNamespaceInQueryParams},e.prototype.isCacheableHost=function(){return"s-"===this.internalHost.substr(0,2)},e.prototype.isDemoHost=function(){return"firebaseio-demo.com"===this.domain},e.prototype.isCustomHost=function(){return"firebaseio.com"!==this.domain&&"firebaseio-demo.com"!==this.domain},e.prototype.updateHost=function(e){e!==this.internalHost&&(this.internalHost=e,this.isCacheableHost()&&d.set("host:"+this.host,this.internalHost))},e.prototype.connectionURL=function(e,t){var n;if(u.assert("string"==typeof e,"typeof type must == string"),u.assert("object"==typeof t,"typeof params must == object"),"websocket"===e)n=(this.secure?"wss://":"ws://")+this.internalHost+"/.ws?";else{if("long_polling"!==e)throw new Error("Unknown connection type: "+e);n=(this.secure?"https://":"http://")+this.internalHost+"/.lp?"}this.needsQueryParam()&&(t.ns=this.namespace);var r=[];return L(t,(function(e,t){r.push(e+"="+t)})),n+r.join("&")},e.prototype.toString=function(){var e=this.toURLString();return this.persistenceKey&&(e+="<"+this.persistenceKey+">"),e},e.prototype.toURLString=function(){return(this.secure?"https://":"http://")+this.host},e}();var G,q,z,Q,Y,$=function(e){var t=X(e),n=t.namespace;"firebase.com"===t.domain&&P(t.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),n&&"undefined"!==n||"localhost"===t.domain||P("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),t.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&O("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");var r="ws"===t.scheme||"wss"===t.scheme;return{repoInfo:new V(t.host,t.secure,n,r,"",n!==t.subdomain),path:new H(t.pathString)}},X=function(e){var t="",n="",r="",i="",o="",a=!0,u="https",l=443;if("string"==typeof e){var c=e.indexOf("//");c>=0&&(u=e.substring(0,c-1),e=e.substring(c+2));var f=e.indexOf("/");-1===f&&(f=e.length);var h=e.indexOf("?");-1===h&&(h=e.length),t=e.substring(0,Math.min(f,h)),f<h&&(i=
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e){for(var t="",n=e.split("/"),r=0;r<n.length;r++)if(n[r].length>0){var i=n[r];try{i=decodeURIComponent(i.replace(/\+/g," "))}catch(e){}t+="/"+i}return t}(e.substring(f,h)));var p=function(e){var t,n,r={};"?"===e.charAt(0)&&(e=e.substring(1));try{for(var i=s.__values(e.split("&")),o=i.next();!o.done;o=i.next()){var a=o.value;if(0!==a.length){var u=a.split("=");2===u.length?r[decodeURIComponent(u[0])]=decodeURIComponent(u[1]):O("Invalid query segment '"+a+"' in query '"+e+"'")}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r}(e.substring(Math.min(e.length,h)));(c=t.indexOf(":"))>=0?(a="https"===u||"wss"===u,l=parseInt(t.substring(c+1),10)):c=t.length;var d=t.slice(0,c);if("localhost"===d.toLowerCase())n="localhost";else if(d.split(".").length<=2)n=d;else{var v=t.indexOf(".");r=t.substring(0,v).toLowerCase(),n=t.substring(v+1),o=r}"ns"in p&&(o=p.ns)}return{host:t,port:l,domain:n,subdomain:r,secure:a,scheme:u,pathString:i,namespace:o}},J=/[\[\].#$\/\u0000-\u001F\u007F]/,Z=/[\[\].#$\u0000-\u001F\u007F]/,ee=function(e){return"string"==typeof e&&0!==e.length&&!J.test(e)},te=function(e){return"string"==typeof e&&0!==e.length&&!Z.test(e)},ne=function(e){return null===e||"string"==typeof e||"number"==typeof e&&!I(e)||e&&"object"==typeof e&&u.contains(e,".sv")},re=function(e,t,n,r,i){i&&void 0===n||ie(u.errorPrefix(e,t,i),n,r)},ie=function(e,t,n){var r=n instanceof H?new K(n,e):n;if(void 0===t)throw new Error(e+"contains undefined "+r.toErrorString());if("function"==typeof t)throw new Error(e+"contains a function "+r.toErrorString()+" with contents = "+t.toString());if(I(t))throw new Error(e+"contains "+t.toString()+" "+r.toErrorString());if("string"==typeof t&&t.length>10485760/3&&u.stringLength(t)>10485760)throw new Error(e+"contains a string greater than 10485760 utf8 bytes "+r.toErrorString()+" ('"+t.substring(0,50)+"...')");if(t&&"object"==typeof t){var i=!1,o=!1;if(L(t,(function(t,n){if(".value"===t)i=!0;else if(".priority"!==t&&".sv"!==t&&(o=!0,!ee(t)))throw new Error(e+" contains an invalid key ("+t+") "+r.toErrorString()+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');r.push(t),ie(e,n,r),r.pop()})),i&&o)throw new Error(e+' contains ".value" child '+r.toErrorString()+" in addition to actual children.")}},oe=function(e,t,n,r,i){if(!i||void 0!==n){var o=u.errorPrefix(e,t,i);if(!n||"object"!=typeof n||Array.isArray(n))throw new Error(o+" must be an object containing the children to replace.");var a=[];L(n,(function(e,t){var n=new H(e);if(ie(o,t,r.child(n)),".priority"===n.getBack()&&!ne(t))throw new Error(o+"contains an invalid value for '"+n.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");a.push(n)})),function(e,t){var n,r;for(n=0;n<t.length;n++)for(var i=(r=t[n]).slice(),o=0;o<i.length;o++)if(".priority"===i[o]&&o===i.length-1);else if(!ee(i[o]))throw new Error(e+"contains an invalid key ("+i[o]+") in path "+r.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');t.sort(H.comparePaths);var a=null;for(n=0;n<t.length;n++){if(r=t[n],null!==a&&a.contains(r))throw new Error(e+"contains a path "+a.toString()+" that is ancestor of another path "+r.toString());a=r}}(o,a)}},ae=function(e,t,n,r){if(!r||void 0!==n){if(I(n))throw new Error(u.errorPrefix(e,t,r)+"is "+n.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!ne(n))throw new Error(u.errorPrefix(e,t,r)+"must be a valid Firebase priority (a string, finite number, server value, or null).")}},se=function(e,t,n,r){if(!r||void 0!==n)switch(n){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw new Error(u.errorPrefix(e,t,r)+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},ue=function(e,t,n,r){if(!(r&&void 0===n||ee(n)))throw new Error(u.errorPrefix(e,t,r)+'was an invalid key = "'+n+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')},le=function(e,t,n,r){if(!(r&&void 0===n||te(n)))throw new Error(u.errorPrefix(e,t,r)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},ce=function(e,t,n,r){n&&(n=n.replace(/^\/*\.info(\/|$)/,"/")),le(e,t,n,r)},fe=function(e,t){if(".info"===t.getFront())throw new Error(e+" failed = Can't modify data under /.info/")},he=function(e,t,n){var r=n.path.toString();if("string"!=typeof n.repoInfo.host||0===n.repoInfo.host.length||!ee(n.repoInfo.namespace)&&"localhost"!==n.repoInfo.host.split(":")[0]||0!==r.length&&!function(e){return e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),te(e)}(r))throw new Error(u.errorPrefix(e,t,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')},pe=function(e,t,n,r){if((!r||void 0!==n)&&"boolean"!=typeof n)throw new Error(u.errorPrefix(e,t,r)+"must be a boolean.")},de=function(){function e(e,t){this.repo_=e,this.path_=t}return e.prototype.cancel=function(e){u.validateArgCount("OnDisconnect.cancel",0,1,arguments.length),u.validateCallback("OnDisconnect.cancel",1,e,!0);var t=new u.Deferred;return this.repo_.onDisconnectCancel(this.path_,t.wrapCallback(e)),t.promise},e.prototype.remove=function(e){u.validateArgCount("OnDisconnect.remove",0,1,arguments.length),fe("OnDisconnect.remove",this.path_),u.validateCallback("OnDisconnect.remove",1,e,!0);var t=new u.Deferred;return this.repo_.onDisconnectSet(this.path_,null,t.wrapCallback(e)),t.promise},e.prototype.set=function(e,t){u.validateArgCount("OnDisconnect.set",1,2,arguments.length),fe("OnDisconnect.set",this.path_),re("OnDisconnect.set",1,e,this.path_,!1),u.validateCallback("OnDisconnect.set",2,t,!0);var n=new u.Deferred;return this.repo_.onDisconnectSet(this.path_,e,n.wrapCallback(t)),n.promise},e.prototype.setWithPriority=function(e,t,n){u.validateArgCount("OnDisconnect.setWithPriority",2,3,arguments.length),fe("OnDisconnect.setWithPriority",this.path_),re("OnDisconnect.setWithPriority",1,e,this.path_,!1),ae("OnDisconnect.setWithPriority",2,t,!1),u.validateCallback("OnDisconnect.setWithPriority",3,n,!0);var r=new u.Deferred;return this.repo_.onDisconnectSetWithPriority(this.path_,e,t,r.wrapCallback(n)),r.promise},e.prototype.update=function(e,t){if(u.validateArgCount("OnDisconnect.update",1,2,arguments.length),fe("OnDisconnect.update",this.path_),Array.isArray(e)){for(var n={},r=0;r<e.length;++r)n[""+r]=e[r];e=n,O("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}oe("OnDisconnect.update",1,e,this.path_,!1),u.validateCallback("OnDisconnect.update",2,t,!0);var i=new u.Deferred;return this.repo_.onDisconnectUpdate(this.path_,e,i.wrapCallback(t)),i.promise},e}(),ve=function(){function e(e,t){this.committed=e,this.snapshot=t}return e.prototype.toJSON=function(){return u.validateArgCount("TransactionResult.toJSON",0,1,arguments.length),{committed:this.committed,snapshot:this.snapshot.toJSON()}},e}(),_e=(G="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",q=0,z=[],function(e){var t,n=e===q;q=e;var r=new Array(8);for(t=7;t>=0;t--)r[t]=G.charAt(e%64),e=Math.floor(e/64);u.assert(0===e,"Cannot push at time == 0");var i=r.join("");if(n){for(t=11;t>=0&&63===z[t];t--)z[t]=0;z[t]++}else for(t=0;t<12;t++)z[t]=Math.floor(64*Math.random());for(t=0;t<12;t++)i+=G.charAt(z[t]);return u.assert(20===i.length,"nextPushId: Length should be 20."),i}),ye=function(){function e(e,t){this.name=e,this.node=t}return e.Wrap=function(t,n){return new e(t,n)},e}(),ge=function(){function e(){}return e.prototype.getCompare=function(){return this.compare.bind(this)},e.prototype.indexedValueChanged=function(e,t){var n=new ye(k,e),r=new ye(k,t);return 0!==this.compare(n,r)},e.prototype.minPost=function(){return ye.MIN},e}(),me=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s.__extends(t,e),Object.defineProperty(t,"__EMPTY_NODE",{get:function(){return Q},set:function(e){Q=e},enumerable:!0,configurable:!0}),t.prototype.compare=function(e,t){return A(e.name,t.name)},t.prototype.isDefinedOn=function(e){throw u.assertionError("KeyIndex.isDefinedOn not expected to be called.")},t.prototype.indexedValueChanged=function(e,t){return!1},t.prototype.minPost=function(){return ye.MIN},t.prototype.maxPost=function(){return new ye(x,Q)},t.prototype.makePost=function(e,t){return u.assert("string"==typeof e,"KeyIndex indexValue must always be a string."),new ye(e,Q)},t.prototype.toString=function(){return".key"},t}(ge),be=new me;var we,Ee,Te,Ce=function(e){return"number"==typeof e?"number:"+F(e):"string:"+e},Se=function(e){if(e.isLeafNode()){var t=e.val();u.assert("string"==typeof t||"number"==typeof t||"object"==typeof t&&u.contains(t,".sv"),"Priority must be a string or number.")}else u.assert(e===Y||e.isEmpty(),"priority of unexpected type.");u.assert(e===Y||e.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")},Pe=function(){function e(t,n){void 0===n&&(n=e.__childrenNodeConstructor.EMPTY_NODE),this.value_=t,this.priorityNode_=n,this.lazyHash_=null,u.assert(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),Se(this.priorityNode_)}return Object.defineProperty(e,"__childrenNodeConstructor",{get:function(){return we},set:function(e){we=e},enumerable:!0,configurable:!0}),e.prototype.isLeafNode=function(){return!0},e.prototype.getPriority=function(){return this.priorityNode_},e.prototype.updatePriority=function(t){return new e(this.value_,t)},e.prototype.getImmediateChild=function(t){return".priority"===t?this.priorityNode_:e.__childrenNodeConstructor.EMPTY_NODE},e.prototype.getChild=function(t){return t.isEmpty()?this:".priority"===t.getFront()?this.priorityNode_:e.__childrenNodeConstructor.EMPTY_NODE},e.prototype.hasChild=function(){return!1},e.prototype.getPredecessorChildName=function(e,t){return null},e.prototype.updateImmediateChild=function(t,n){return".priority"===t?this.updatePriority(n):n.isEmpty()&&".priority"!==t?this:e.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(t,n).updatePriority(this.priorityNode_)},e.prototype.updateChild=function(t,n){var r=t.getFront();return null===r?n:n.isEmpty()&&".priority"!==r?this:(u.assert(".priority"!==r||1===t.getLength(),".priority must be the last token in a path"),this.updateImmediateChild(r,e.__childrenNodeConstructor.EMPTY_NODE.updateChild(t.popFront(),n)))},e.prototype.isEmpty=function(){return!1},e.prototype.numChildren=function(){return 0},e.prototype.forEachChild=function(e,t){return!1},e.prototype.val=function(e){return e&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()},e.prototype.hash=function(){if(null===this.lazyHash_){var e="";this.priorityNode_.isEmpty()||(e+="priority:"+Ce(this.priorityNode_.val())+":");var t=typeof this.value_;e+=t+":",e+="number"===t?F(this.value_):this.value_,this.lazyHash_=g(e)}return this.lazyHash_},e.prototype.getValue=function(){return this.value_},e.prototype.compareTo=function(t){return t===e.__childrenNodeConstructor.EMPTY_NODE?1:t instanceof e.__childrenNodeConstructor?-1:(u.assert(t.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(t))},e.prototype.compareToLeafNode_=function(t){var n=typeof t.value_,r=typeof this.value_,i=e.VALUE_TYPE_ORDER.indexOf(n),o=e.VALUE_TYPE_ORDER.indexOf(r);return u.assert(i>=0,"Unknown leaf type: "+n),u.assert(o>=0,"Unknown leaf type: "+r),i===o?"object"===r?0:this.value_<t.value_?-1:this.value_===t.value_?0:1:o-i},e.prototype.withIndex=function(){return this},e.prototype.isIndexed=function(){return!0},e.prototype.equals=function(e){if(e===this)return!0;if(e.isLeafNode()){var t=e;return this.value_===t.value_&&this.priorityNode_.equals(t.priorityNode_)}return!1},e.VALUE_TYPE_ORDER=["object","boolean","number","string"],e}();var Oe,Ie,ke=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s.__extends(t,e),t.prototype.compare=function(e,t){var n=e.node.getPriority(),r=t.node.getPriority(),i=n.compareTo(r);return 0===i?A(e.name,t.name):i},t.prototype.isDefinedOn=function(e){return!e.getPriority().isEmpty()},t.prototype.indexedValueChanged=function(e,t){return!e.getPriority().equals(t.getPriority())},t.prototype.minPost=function(){return ye.MIN},t.prototype.maxPost=function(){return new ye(x,new Pe("[PRIORITY-POST]",Te))},t.prototype.makePost=function(e,t){var n=Ee(e);return new ye(t,new Pe("[PRIORITY-POST]",n))},t.prototype.toString=function(){return".priority"},t}(ge)),xe=function(){function e(e,t,n,r,i){void 0===i&&(i=null),this.isReverse_=r,this.resultGenerator_=i,this.nodeStack_=[];for(var o=1;!e.isEmpty();)if(e=e,o=t?n(e.key,t):1,r&&(o*=-1),o<0)e=this.isReverse_?e.left:e.right;else{if(0===o){this.nodeStack_.push(e);break}this.nodeStack_.push(e),e=this.isReverse_?e.right:e.left}}return e.prototype.getNext=function(){if(0===this.nodeStack_.length)return null;var e,t=this.nodeStack_.pop();if(e=this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value},this.isReverse_)for(t=t.left;!t.isEmpty();)this.nodeStack_.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack_.push(t),t=t.left;return e},e.prototype.hasNext=function(){return this.nodeStack_.length>0},e.prototype.peek=function(){if(0===this.nodeStack_.length)return null;var e=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value}},e}(),Ae=function(){function e(t,n,r,i,o){this.key=t,this.value=n,this.color=null!=r?r:e.RED,this.left=null!=i?i:Ne.EMPTY_NODE,this.right=null!=o?o:Ne.EMPTY_NODE}return e.prototype.copy=function(t,n,r,i,o){return new e(null!=t?t:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},e.prototype.count=function(){return this.left.count()+1+this.right.count()},e.prototype.isEmpty=function(){return!1},e.prototype.inorderTraversal=function(e){return this.left.inorderTraversal(e)||!!e(this.key,this.value)||this.right.inorderTraversal(e)},e.prototype.reverseTraversal=function(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)},e.prototype.min_=function(){return this.left.isEmpty()?this:this.left.min_()},e.prototype.minKey=function(){return this.min_().key},e.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},e.prototype.insert=function(e,t,n){var r=this,i=n(e,r.key);return(r=i<0?r.copy(null,null,null,r.left.insert(e,t,n),null):0===i?r.copy(null,t,null,null,null):r.copy(null,null,null,null,r.right.insert(e,t,n))).fixUp_()},e.prototype.removeMin_=function(){if(this.left.isEmpty())return Ne.EMPTY_NODE;var e=this;return e.left.isRed_()||e.left.left.isRed_()||(e=e.moveRedLeft_()),(e=e.copy(null,null,null,e.left.removeMin_(),null)).fixUp_()},e.prototype.remove=function(e,t){var n,r;if(t(e,(n=this).key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(e,t),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===t(e,n.key)){if(n.right.isEmpty())return Ne.EMPTY_NODE;r=n.right.min_(),n=n.copy(r.key,r.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(e,t))}return n.fixUp_()},e.prototype.isRed_=function(){return this.color},e.prototype.fixUp_=function(){var e=this;return e.right.isRed_()&&!e.left.isRed_()&&(e=e.rotateLeft_()),e.left.isRed_()&&e.left.left.isRed_()&&(e=e.rotateRight_()),e.left.isRed_()&&e.right.isRed_()&&(e=e.colorFlip_()),e},e.prototype.moveRedLeft_=function(){var e=this.colorFlip_();return e.right.left.isRed_()&&(e=(e=(e=e.copy(null,null,null,null,e.right.rotateRight_())).rotateLeft_()).colorFlip_()),e},e.prototype.moveRedRight_=function(){var e=this.colorFlip_();return e.left.left.isRed_()&&(e=(e=e.rotateRight_()).colorFlip_()),e},e.prototype.rotateLeft_=function(){var t=this.copy(null,null,e.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)},e.prototype.rotateRight_=function(){var t=this.copy(null,null,e.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)},e.prototype.colorFlip_=function(){var e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)},e.prototype.checkMaxDepth_=function(){var e=this.check_();return Math.pow(2,e)<=this.count()+1},e.prototype.check_=function(){if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");var e=this.left.check_();if(e!==this.right.check_())throw new Error("Black depths differ");return e+(this.isRed_()?0:1)},e.RED=!0,e.BLACK=!1,e}(),De=function(){function e(){}return e.prototype.copy=function(e,t,n,r,i){return this},e.prototype.insert=function(e,t,n){return new Ae(e,t,null)},e.prototype.remove=function(e,t){return this},e.prototype.count=function(){return 0},e.prototype.isEmpty=function(){return!0},e.prototype.inorderTraversal=function(e){return!1},e.prototype.reverseTraversal=function(e){return!1},e.prototype.minKey=function(){return null},e.prototype.maxKey=function(){return null},e.prototype.check_=function(){return 0},e.prototype.isRed_=function(){return!1},e}(),Ne=function(){function e(t,n){void 0===n&&(n=e.EMPTY_NODE),this.comparator_=t,this.root_=n}return e.prototype.insert=function(t,n){return new e(this.comparator_,this.root_.insert(t,n,this.comparator_).copy(null,null,Ae.BLACK,null,null))},e.prototype.remove=function(t){return new e(this.comparator_,this.root_.remove(t,this.comparator_).copy(null,null,Ae.BLACK,null,null))},e.prototype.get=function(e){for(var t,n=this.root_;!n.isEmpty();){if(0===(t=this.comparator_(e,n.key)))return n.value;t<0?n=n.left:t>0&&(n=n.right)}return null},e.prototype.getPredecessorKey=function(e){for(var t,n=this.root_,r=null;!n.isEmpty();){if(0===(t=this.comparator_(e,n.key))){if(n.left.isEmpty())return r?r.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}t<0?n=n.left:t>0&&(r=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")},e.prototype.isEmpty=function(){return this.root_.isEmpty()},e.prototype.count=function(){return this.root_.count()},e.prototype.minKey=function(){return this.root_.minKey()},e.prototype.maxKey=function(){return this.root_.maxKey()},e.prototype.inorderTraversal=function(e){return this.root_.inorderTraversal(e)},e.prototype.reverseTraversal=function(e){return this.root_.reverseTraversal(e)},e.prototype.getIterator=function(e){return new xe(this.root_,null,this.comparator_,!1,e)},e.prototype.getIteratorFrom=function(e,t){return new xe(this.root_,e,this.comparator_,!1,t)},e.prototype.getReverseIteratorFrom=function(e,t){return new xe(this.root_,e,this.comparator_,!0,t)},e.prototype.getReverseIterator=function(e){return new xe(this.root_,null,this.comparator_,!0,e)},e.EMPTY_NODE=new De,e}(),Re=Math.log(2),Me=function(){function e(e){var t;this.count=(t=e+1,parseInt(Math.log(t)/Re,10)),this.current_=this.count-1;var n,r=(n=this.count,parseInt(Array(n+1).join("1"),2));this.bits_=e+1&r}return e.prototype.nextBitIsOne=function(){var e=!(this.bits_&1<<this.current_);return this.current_--,e},e}(),Le=function(e,t,n,r){e.sort(t);var i=function(t,r){var o,a,s=r-t;if(0===s)return null;if(1===s)return o=e[t],a=n?n(o):o,new Ae(a,o.node,Ae.BLACK,null,null);var u=parseInt(s/2,10)+t,l=i(t,u),c=i(u+1,r);return o=e[u],a=n?n(o):o,new Ae(a,o.node,Ae.BLACK,l,c)},o=function(t){for(var r=null,o=null,a=e.length,s=function(t,r){var o=a-t,s=a;a-=t;var l=i(o+1,s),c=e[o],f=n?n(c):c;u(new Ae(f,c.node,r,null,l))},u=function(e){r?(r.left=e,r=e):(o=e,r=e)},l=0;l<t.count;++l){var c=t.nextBitIsOne(),f=Math.pow(2,t.count-(l+1));c?s(f,Ae.BLACK):(s(f,Ae.BLACK),s(f,Ae.RED))}return o}(new Me(e.length));return new Ne(r||t,o)},Fe={},je=function(){function e(e,t){this.indexes_=e,this.indexSet_=t}return Object.defineProperty(e,"Default",{get:function(){return u.assert(Fe&&ke,"ChildrenNode.ts has not been loaded"),Oe=Oe||new e({".priority":Fe},{".priority":ke})},enumerable:!0,configurable:!0}),e.prototype.get=function(e){var t=u.safeGet(this.indexes_,e);if(!t)throw new Error("No index defined for "+e);return t instanceof Ne?t:null},e.prototype.hasIndex=function(e){return u.contains(this.indexSet_,e.toString())},e.prototype.addIndex=function(t,n){u.assert(t!==be,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var r,i=[],o=!1,a=n.getIterator(ye.Wrap),l=a.getNext();l;)o=o||t.isDefinedOn(l.node),i.push(l),l=a.getNext();r=o?Le(i,t.getCompare()):Fe;var c=t.toString(),f=s.__assign({},this.indexSet_);f[c]=t;var h=s.__assign({},this.indexes_);return h[c]=r,new e(h,f)},e.prototype.addToIndexes=function(t,n){var r=this;return new e(u.map(this.indexes_,(function(e,i){var o=u.safeGet(r.indexSet_,i);if(u.assert(o,"Missing index implementation for "+i),e===Fe){if(o.isDefinedOn(t.node)){for(var a=[],s=n.getIterator(ye.Wrap),l=s.getNext();l;)l.name!==t.name&&a.push(l),l=s.getNext();return a.push(t),Le(a,o.getCompare())}return Fe}var c=n.get(t.name),f=e;return c&&(f=f.remove(new ye(t.name,c))),f.insert(t,t.node)})),this.indexSet_)},e.prototype.removeFromIndexes=function(t,n){return new e(u.map(this.indexes_,(function(e){if(e===Fe)return e;var r=n.get(t.name);return r?e.remove(new ye(t.name,r)):e})),this.indexSet_)},e}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ue(e,t){return A(e.name,t.name)}function We(e,t){return A(e,t)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Be=function(){function e(e,t,n){this.children_=e,this.priorityNode_=t,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&Se(this.priorityNode_),this.children_.isEmpty()&&u.assert(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}return Object.defineProperty(e,"EMPTY_NODE",{get:function(){return Ie||(Ie=new e(new Ne(We),null,je.Default))},enumerable:!0,configurable:!0}),e.prototype.isLeafNode=function(){return!1},e.prototype.getPriority=function(){return this.priorityNode_||Ie},e.prototype.updatePriority=function(t){return this.children_.isEmpty()?this:new e(this.children_,t,this.indexMap_)},e.prototype.getImmediateChild=function(e){if(".priority"===e)return this.getPriority();var t=this.children_.get(e);return null===t?Ie:t},e.prototype.getChild=function(e){var t=e.getFront();return null===t?this:this.getImmediateChild(t).getChild(e.popFront())},e.prototype.hasChild=function(e){return null!==this.children_.get(e)},e.prototype.updateImmediateChild=function(t,n){if(u.assert(n,"We should always be passing snapshot nodes"),".priority"===t)return this.updatePriority(n);var r=new ye(t,n),i=void 0,o=void 0;n.isEmpty()?(i=this.children_.remove(t),o=this.indexMap_.removeFromIndexes(r,this.children_)):(i=this.children_.insert(t,n),o=this.indexMap_.addToIndexes(r,this.children_));var a=i.isEmpty()?Ie:this.priorityNode_;return new e(i,a,o)},e.prototype.updateChild=function(e,t){var n=e.getFront();if(null===n)return t;u.assert(".priority"!==e.getFront()||1===e.getLength(),".priority must be the last token in a path");var r=this.getImmediateChild(n).updateChild(e.popFront(),t);return this.updateImmediateChild(n,r)},e.prototype.isEmpty=function(){return this.children_.isEmpty()},e.prototype.numChildren=function(){return this.children_.count()},e.prototype.val=function(t){if(this.isEmpty())return null;var n={},r=0,i=0,o=!0;if(this.forEachChild(ke,(function(a,s){n[a]=s.val(t),r++,o&&e.INTEGER_REGEXP_.test(a)?i=Math.max(i,Number(a)):o=!1})),!t&&o&&i<2*r){var a=[];for(var s in n)a[s]=n[s];return a}return t&&!this.getPriority().isEmpty()&&(n[".priority"]=this.getPriority().val()),n},e.prototype.hash=function(){if(null===this.lazyHash_){var e="";this.getPriority().isEmpty()||(e+="priority:"+Ce(this.getPriority().val())+":"),this.forEachChild(ke,(function(t,n){var r=n.hash();""!==r&&(e+=":"+t+":"+r)})),this.lazyHash_=""===e?"":g(e)}return this.lazyHash_},e.prototype.getPredecessorChildName=function(e,t,n){var r=this.resolveIndex_(n);if(r){var i=r.getPredecessorKey(new ye(e,t));return i?i.name:null}return this.children_.getPredecessorKey(e)},e.prototype.getFirstChildName=function(e){var t=this.resolveIndex_(e);if(t){var n=t.minKey();return n&&n.name}return this.children_.minKey()},e.prototype.getFirstChild=function(e){var t=this.getFirstChildName(e);return t?new ye(t,this.children_.get(t)):null},e.prototype.getLastChildName=function(e){var t=this.resolveIndex_(e);if(t){var n=t.maxKey();return n&&n.name}return this.children_.maxKey()},e.prototype.getLastChild=function(e){var t=this.getLastChildName(e);return t?new ye(t,this.children_.get(t)):null},e.prototype.forEachChild=function(e,t){var n=this.resolveIndex_(e);return n?n.inorderTraversal((function(e){return t(e.name,e.node)})):this.children_.inorderTraversal(t)},e.prototype.getIterator=function(e){return this.getIteratorFrom(e.minPost(),e)},e.prototype.getIteratorFrom=function(e,t){var n=this.resolveIndex_(t);if(n)return n.getIteratorFrom(e,(function(e){return e}));for(var r=this.children_.getIteratorFrom(e.name,ye.Wrap),i=r.peek();null!=i&&t.compare(i,e)<0;)r.getNext(),i=r.peek();return r},e.prototype.getReverseIterator=function(e){return this.getReverseIteratorFrom(e.maxPost(),e)},e.prototype.getReverseIteratorFrom=function(e,t){var n=this.resolveIndex_(t);if(n)return n.getReverseIteratorFrom(e,(function(e){return e}));for(var r=this.children_.getReverseIteratorFrom(e.name,ye.Wrap),i=r.peek();null!=i&&t.compare(i,e)>0;)r.getNext(),i=r.peek();return r},e.prototype.compareTo=function(e){return this.isEmpty()?e.isEmpty()?0:-1:e.isLeafNode()||e.isEmpty()?1:e===He?-1:0},e.prototype.withIndex=function(t){if(t===be||this.indexMap_.hasIndex(t))return this;var n=this.indexMap_.addIndex(t,this.children_);return new e(this.children_,this.priorityNode_,n)},e.prototype.isIndexed=function(e){return e===be||this.indexMap_.hasIndex(e)},e.prototype.equals=function(e){if(e===this)return!0;if(e.isLeafNode())return!1;var t=e;if(this.getPriority().equals(t.getPriority())){if(this.children_.count()===t.children_.count()){for(var n=this.getIterator(ke),r=t.getIterator(ke),i=n.getNext(),o=r.getNext();i&&o;){if(i.name!==o.name||!i.node.equals(o.node))return!1;i=n.getNext(),o=r.getNext()}return null===i&&null===o}return!1}return!1},e.prototype.resolveIndex_=function(e){return e===be?null:this.indexMap_.get(e.toString())},e.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/,e}(),He=new(function(e){function t(){return e.call(this,new Ne(We),Be.EMPTY_NODE,je.Default)||this}return s.__extends(t,e),t.prototype.compareTo=function(e){return e===this?0:1},t.prototype.equals=function(e){return e===this},t.prototype.getPriority=function(){return this},t.prototype.getImmediateChild=function(e){return Be.EMPTY_NODE},t.prototype.isEmpty=function(){return!1},t}(Be));Object.defineProperties(ye,{MIN:{value:new ye(k,Be.EMPTY_NODE)},MAX:{value:new ye(x,He)}}),me.__EMPTY_NODE=Be.EMPTY_NODE,Pe.__childrenNodeConstructor=Be,Y=He,function(e){Te=e}(He);function Ke(e,t){if(void 0===t&&(t=null),null===e)return Be.EMPTY_NODE;if("object"==typeof e&&".priority"in e&&(t=e[".priority"]),u.assert(null===t||"string"==typeof t||"number"==typeof t||"object"==typeof t&&".sv"in t,"Invalid priority type found: "+typeof t),"object"==typeof e&&".value"in e&&null!==e[".value"]&&(e=e[".value"]),"object"!=typeof e||".sv"in e)return new Pe(e,Ke(t));if(e instanceof Array){var n=Be.EMPTY_NODE;return L(e,(function(t,r){if(u.contains(e,t)&&"."!==t.substring(0,1)){var i=Ke(r);!i.isLeafNode()&&i.isEmpty()||(n=n.updateImmediateChild(t,i))}})),n.updatePriority(Ke(t))}var r=[],i=!1;if(L(e,(function(e,t){if("."!==e.substring(0,1)){var n=Ke(t);n.isEmpty()||(i=i||!n.getPriority().isEmpty(),r.push(new ye(e,n)))}})),0===r.length)return Be.EMPTY_NODE;var o=Le(r,Ue,(function(e){return e.name}),We);if(i){var a=Le(r,ke.getCompare());return new Be(o,Ke(t),new je({".priority":a},{".priority":ke}))}return new Be(o,Ke(t),je.Default)}!function(e){Ee=e}(Ke);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Ve,Ge=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s.__extends(t,e),t.prototype.compare=function(e,t){var n=e.node.compareTo(t.node);return 0===n?A(e.name,t.name):n},t.prototype.isDefinedOn=function(e){return!0},t.prototype.indexedValueChanged=function(e,t){return!e.equals(t)},t.prototype.minPost=function(){return ye.MIN},t.prototype.maxPost=function(){return ye.MAX},t.prototype.makePost=function(e,t){var n=Ke(e);return new ye(t,n)},t.prototype.toString=function(){return".value"},t}(ge)),qe=function(e){function t(t){var n=e.call(this)||this;return n.indexPath_=t,u.assert(!t.isEmpty()&&".priority"!==t.getFront(),"Can't create PathIndex with empty path or .priority key"),n}return s.__extends(t,e),t.prototype.extractChild=function(e){return e.getChild(this.indexPath_)},t.prototype.isDefinedOn=function(e){return!e.getChild(this.indexPath_).isEmpty()},t.prototype.compare=function(e,t){var n=this.extractChild(e.node),r=this.extractChild(t.node),i=n.compareTo(r);return 0===i?A(e.name,t.name):i},t.prototype.makePost=function(e,t){var n=Ke(e),r=Be.EMPTY_NODE.updateChild(this.indexPath_,n);return new ye(t,r)},t.prototype.maxPost=function(){var e=Be.EMPTY_NODE.updateChild(this.indexPath_,He);return new ye(x,e)},t.prototype.toString=function(){return this.indexPath_.slice().join("/")},t}(ge),ze=function(){function e(e,t,n){this.node_=e,this.ref_=t,this.index_=n}return e.prototype.val=function(){return u.validateArgCount("DataSnapshot.val",0,0,arguments.length),this.node_.val()},e.prototype.exportVal=function(){return u.validateArgCount("DataSnapshot.exportVal",0,0,arguments.length),this.node_.val(!0)},e.prototype.toJSON=function(){return u.validateArgCount("DataSnapshot.toJSON",0,1,arguments.length),this.exportVal()},e.prototype.exists=function(){return u.validateArgCount("DataSnapshot.exists",0,0,arguments.length),!this.node_.isEmpty()},e.prototype.child=function(t){u.validateArgCount("DataSnapshot.child",0,1,arguments.length),t=String(t),le("DataSnapshot.child",1,t,!1);var n=new H(t),r=this.ref_.child(n);return new e(this.node_.getChild(n),r,ke)},e.prototype.hasChild=function(e){u.validateArgCount("DataSnapshot.hasChild",1,1,arguments.length),le("DataSnapshot.hasChild",1,e,!1);var t=new H(e);return!this.node_.getChild(t).isEmpty()},e.prototype.getPriority=function(){return u.validateArgCount("DataSnapshot.getPriority",0,0,arguments.length),this.node_.getPriority().val()},e.prototype.forEach=function(t){var n=this;if(u.validateArgCount("DataSnapshot.forEach",1,1,arguments.length),u.validateCallback("DataSnapshot.forEach",1,t,!1),this.node_.isLeafNode())return!1;var r=this.node_;return!!r.forEachChild(this.index_,(function(r,i){return t(new e(i,n.ref_.child(r),ke))}))},e.prototype.hasChildren=function(){return u.validateArgCount("DataSnapshot.hasChildren",0,0,arguments.length),!this.node_.isLeafNode()&&!this.node_.isEmpty()},Object.defineProperty(e.prototype,"key",{get:function(){return this.ref_.getKey()},enumerable:!0,configurable:!0}),e.prototype.numChildren=function(){return u.validateArgCount("DataSnapshot.numChildren",0,0,arguments.length),this.node_.numChildren()},e.prototype.getRef=function(){return u.validateArgCount("DataSnapshot.ref",0,0,arguments.length),this.ref_},Object.defineProperty(e.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),e}(),Qe=function(){function e(e,t,n,r){this.eventType=e,this.eventRegistration=t,this.snapshot=n,this.prevName=r}return e.prototype.getPath=function(){var e=this.snapshot.getRef();return"value"===this.eventType?e.path:e.getParent().path},e.prototype.getEventType=function(){return this.eventType},e.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},e.prototype.toString=function(){return this.getPath().toString()+":"+this.eventType+":"+u.stringify(this.snapshot.exportVal())},e}(),Ye=function(){function e(e,t,n){this.eventRegistration=e,this.error=t,this.path=n}return e.prototype.getPath=function(){return this.path},e.prototype.getEventType=function(){return"cancel"},e.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},e.prototype.toString=function(){return this.path.toString()+":cancel"},e}(),$e=function(){function e(e,t,n){this.callback_=e,this.cancelCallback_=t,this.context_=n}return e.prototype.respondsTo=function(e){return"value"===e},e.prototype.createEvent=function(e,t){var n=t.getQueryParams().getIndex();return new Qe("value",this,new ze(e.snapshotNode,t.getRef(),n))},e.prototype.getEventRunner=function(e){var t=this.context_;if("cancel"===e.getEventType()){u.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(t,e.error)}}var r=this.callback_;return function(){r.call(t,e.snapshot)}},e.prototype.createCancelEvent=function(e,t){return this.cancelCallback_?new Ye(this,e,t):null},e.prototype.matches=function(t){return t instanceof e&&(!t.callback_||!this.callback_||t.callback_===this.callback_&&t.context_===this.context_)},e.prototype.hasAnyCallback=function(){return null!==this.callback_},e}(),Xe=function(){function e(e,t,n){this.callbacks_=e,this.cancelCallback_=t,this.context_=n}return e.prototype.respondsTo=function(e){var t="children_added"===e?"child_added":e;return t="children_removed"===t?"child_removed":t,u.contains(this.callbacks_,t)},e.prototype.createCancelEvent=function(e,t){return this.cancelCallback_?new Ye(this,e,t):null},e.prototype.createEvent=function(e,t){u.assert(null!=e.childName,"Child events should have a childName.");var n=t.getRef().child(e.childName),r=t.getQueryParams().getIndex();return new Qe(e.type,this,new ze(e.snapshotNode,n,r),e.prevName)},e.prototype.getEventRunner=function(e){var t=this.context_;if("cancel"===e.getEventType()){u.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(t,e.error)}}var r=this.callbacks_[e.eventType];return function(){r.call(t,e.snapshot,e.prevName)}},e.prototype.matches=function(t){var n=this;if(t instanceof e){if(!this.callbacks_||!t.callbacks_)return!0;if(this.context_===t.context_){var r=Object.keys(t.callbacks_),i=Object.keys(this.callbacks_),o=r.length;if(o===i.length){if(1===o){var a=r[0],s=i[0];return!(s!==a||t.callbacks_[a]&&this.callbacks_[s]&&t.callbacks_[a]!==this.callbacks_[s])}return i.every((function(e){return t.callbacks_[e]===n.callbacks_[e]}))}}}return!1},e.prototype.hasAnyCallback=function(){return null!==this.callbacks_},e}(),Je=function(){function e(e,t,n,r){this.repo=e,this.path=t,this.queryParams_=n,this.orderByCalled_=r}return Object.defineProperty(e,"__referenceConstructor",{get:function(){return u.assert(Ve,"Reference.ts has not been loaded"),Ve},set:function(e){Ve=e},enumerable:!0,configurable:!0}),e.validateQueryEndpoints_=function(e){var t=null,n=null;if(e.hasStart()&&(t=e.getIndexStartValue()),e.hasEnd()&&(n=e.getIndexEndValue()),e.getIndex()===be){var r="Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().",i="Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.";if(e.hasStart()){if(e.getIndexStartName()!==k)throw new Error(r);if("string"!=typeof t)throw new Error(i)}if(e.hasEnd()){if(e.getIndexEndName()!==x)throw new Error(r);if("string"!=typeof n)throw new Error(i)}}else if(e.getIndex()===ke){if(null!=t&&!ne(t)||null!=n&&!ne(n))throw new Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if(u.assert(e.getIndex()instanceof qe||e.getIndex()===Ge,"unknown index type."),null!=t&&"object"==typeof t||null!=n&&"object"==typeof n)throw new Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.")},e.validateLimit_=function(e){if(e.hasStart()&&e.hasEnd()&&e.hasLimit()&&!e.hasAnchoredLimit())throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.")},e.prototype.validateNoPreviousOrderByCall_=function(e){if(!0===this.orderByCalled_)throw new Error(e+": You can't combine multiple orderBy calls.")},e.prototype.getQueryParams=function(){return this.queryParams_},e.prototype.getRef=function(){return u.validateArgCount("Query.ref",0,0,arguments.length),new e.__referenceConstructor(this.repo,this.path)},e.prototype.on=function(t,n,r,i){u.validateArgCount("Query.on",2,4,arguments.length),se("Query.on",1,t,!1),u.validateCallback("Query.on",2,n,!1);var o=e.getCancelAndContextArgs_("Query.on",r,i);if("value"===t)this.onValueEvent(n,o.cancel,o.context);else{var a={};a[t]=n,this.onChildEvent(a,o.cancel,o.context)}return n},e.prototype.onValueEvent=function(e,t,n){var r=new $e(e,t||null,n||null);this.repo.addEventCallbackForQuery(this,r)},e.prototype.onChildEvent=function(e,t,n){var r=new Xe(e,t,n);this.repo.addEventCallbackForQuery(this,r)},e.prototype.off=function(e,t,n){u.validateArgCount("Query.off",0,3,arguments.length),se("Query.off",1,e,!0),u.validateCallback("Query.off",2,t,!0),u.validateContextObject("Query.off",3,n,!0);var r=null,i=null;if("value"===e){var o=t||null;r=new $e(o,null,n||null)}else e&&(t&&((i={})[e]=t),r=new Xe(i,null,n||null));this.repo.removeEventCallbackForQuery(this,r)},e.prototype.once=function(t,n,r,i){var o=this;u.validateArgCount("Query.once",1,4,arguments.length),se("Query.once",1,t,!1),u.validateCallback("Query.once",2,n,!0);var a=e.getCancelAndContextArgs_("Query.once",r,i),s=!0,l=new u.Deferred;l.promise.catch((function(){}));var c=function(e){s&&(s=!1,o.off(t,c),n&&n.bind(a.context)(e),l.resolve(e))};return this.on(t,c,(function(e){o.off(t,c),a.cancel&&a.cancel.bind(a.context)(e),l.reject(e)})),l.promise},e.prototype.limitToFirst=function(t){if(u.validateArgCount("Query.limitToFirst",1,1,arguments.length),"number"!=typeof t||Math.floor(t)!==t||t<=0)throw new Error("Query.limitToFirst: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new e(this.repo,this.path,this.queryParams_.limitToFirst(t),this.orderByCalled_)},e.prototype.limitToLast=function(t){if(u.validateArgCount("Query.limitToLast",1,1,arguments.length),"number"!=typeof t||Math.floor(t)!==t||t<=0)throw new Error("Query.limitToLast: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new e(this.repo,this.path,this.queryParams_.limitToLast(t),this.orderByCalled_)},e.prototype.orderByChild=function(t){if(u.validateArgCount("Query.orderByChild",1,1,arguments.length),"$key"===t)throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===t)throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===t)throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');le("Query.orderByChild",1,t,!1),this.validateNoPreviousOrderByCall_("Query.orderByChild");var n=new H(t);if(n.isEmpty())throw new Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");var r=new qe(n),i=this.queryParams_.orderBy(r);return e.validateQueryEndpoints_(i),new e(this.repo,this.path,i,!0)},e.prototype.orderByKey=function(){u.validateArgCount("Query.orderByKey",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByKey");var t=this.queryParams_.orderBy(be);return e.validateQueryEndpoints_(t),new e(this.repo,this.path,t,!0)},e.prototype.orderByPriority=function(){u.validateArgCount("Query.orderByPriority",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByPriority");var t=this.queryParams_.orderBy(ke);return e.validateQueryEndpoints_(t),new e(this.repo,this.path,t,!0)},e.prototype.orderByValue=function(){u.validateArgCount("Query.orderByValue",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByValue");var t=this.queryParams_.orderBy(Ge);return e.validateQueryEndpoints_(t),new e(this.repo,this.path,t,!0)},e.prototype.startAt=function(t,n){void 0===t&&(t=null),u.validateArgCount("Query.startAt",0,2,arguments.length),re("Query.startAt",1,t,this.path,!0),ue("Query.startAt",2,n,!0);var r=this.queryParams_.startAt(t,n);if(e.validateLimit_(r),e.validateQueryEndpoints_(r),this.queryParams_.hasStart())throw new Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");return void 0===t&&(t=null,n=null),new e(this.repo,this.path,r,this.orderByCalled_)},e.prototype.endAt=function(t,n){void 0===t&&(t=null),u.validateArgCount("Query.endAt",0,2,arguments.length),re("Query.endAt",1,t,this.path,!0),ue("Query.endAt",2,n,!0);var r=this.queryParams_.endAt(t,n);if(e.validateLimit_(r),e.validateQueryEndpoints_(r),this.queryParams_.hasEnd())throw new Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new e(this.repo,this.path,r,this.orderByCalled_)},e.prototype.equalTo=function(e,t){if(u.validateArgCount("Query.equalTo",1,2,arguments.length),re("Query.equalTo",1,e,this.path,!1),ue("Query.equalTo",2,t,!0),this.queryParams_.hasStart())throw new Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");if(this.queryParams_.hasEnd())throw new Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.startAt(e,t).endAt(e,t)},e.prototype.toString=function(){return u.validateArgCount("Query.toString",0,0,arguments.length),this.repo.toString()+this.path.toUrlEncodedString()},e.prototype.toJSON=function(){return u.validateArgCount("Query.toJSON",0,1,arguments.length),this.toString()},e.prototype.queryObject=function(){return this.queryParams_.getQueryObject()},e.prototype.queryIdentifier=function(){var e=this.queryObject(),t=R(e);return"{}"===t?"default":t},e.prototype.isEqual=function(t){if(u.validateArgCount("Query.isEqual",1,1,arguments.length),!(t instanceof e)){var n="Query.isEqual failed: First argument must be an instance of firebase.database.Query.";throw new Error(n)}var r=this.repo===t.repo,i=this.path.equals(t.path),o=this.queryIdentifier()===t.queryIdentifier();return r&&i&&o},e.getCancelAndContextArgs_=function(e,t,n){var r={cancel:null,context:null};if(t&&n)r.cancel=t,u.validateCallback(e,3,r.cancel,!0),r.context=n,u.validateContextObject(e,4,r.context,!0);else if(t)if("object"==typeof t&&null!==t)r.context=t;else{if("function"!=typeof t)throw new Error(u.errorPrefix(e,3,!0)+" must either be a cancel callback or a context object.");r.cancel=t}return r},Object.defineProperty(e.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),e}(),Ze=function(){function e(e){this.node_=e}return e.prototype.getImmediateChild=function(t){return new e(this.node_.getImmediateChild(t))},e.prototype.node=function(){return this.node_},e}(),et=function(){function e(e,t){this.syncTree_=e,this.path_=t}return e.prototype.getImmediateChild=function(t){var n=this.path_.child(t);return new e(this.syncTree_,n)},e.prototype.node=function(){return this.syncTree_.calcCompleteEventCache(this.path_)},e}(),tt=function(e,t,n){return e&&"object"==typeof e?(u.assert(".sv"in e,"Unexpected leaf node or priority contents"),"string"==typeof e[".sv"]?nt(e[".sv"],t,n):"object"==typeof e[".sv"]?rt(e[".sv"],t):void u.assert(!1,"Unexpected server value: "+JSON.stringify(e,null,2))):e},nt=function(e,t,n){switch(e){case"timestamp":return n.timestamp;default:u.assert(!1,"Unexpected server value: "+e)}},rt=function(e,t,n){e.hasOwnProperty("increment")||u.assert(!1,"Unexpected server value: "+JSON.stringify(e,null,2));var r=e.increment;"number"!=typeof r&&u.assert(!1,"Unexpected increment value: "+r);var i=t.node();if(u.assert(null!=i,"Expected ChildrenNode.EMPTY_NODE for nulls"),!i.isLeafNode())return r;var o=i.getValue();return"number"!=typeof o?r:o+r},it=function(e,t,n,r){return at(t,new et(n,e),r)},ot=function(e,t,n){return at(e,new Ze(t),n)};function at(e,t,n){var r,i=e.getPriority().val(),o=tt(i,t.getImmediateChild(".priority"),n);if(e.isLeafNode()){var a=e,s=tt(a.getValue(),t,n);return s!==a.getValue()||o!==a.getPriority().val()?new Pe(s,Ke(o)):e}var u=e;return r=u,o!==u.getPriority().val()&&(r=r.updatePriority(new Pe(o))),u.forEachChild(ke,(function(e,i){var o=at(i,t.getImmediateChild(e),n);o!==i&&(r=r.updateImmediateChild(e,o))})),r}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var st,ut=function(){function e(){this.value=null,this.children=new Map}return e.prototype.find=function(e){if(null!=this.value)return this.value.getChild(e);if(!e.isEmpty()&&this.children.size>0){var t=e.getFront();return e=e.popFront(),this.children.has(t)?this.children.get(t).find(e):null}return null},e.prototype.remember=function(t,n){if(t.isEmpty())this.value=n,this.children.clear();else if(null!==this.value)this.value=this.value.updateChild(t,n);else{var r=t.getFront();this.children.has(r)||this.children.set(r,new e);var i=this.children.get(r);t=t.popFront(),i.remember(t,n)}},e.prototype.forget=function(e){if(e.isEmpty())return this.value=null,this.children.clear(),!0;if(null!==this.value){if(this.value.isLeafNode())return!1;var t=this.value;this.value=null;var n=this;return t.forEachChild(ke,(function(e,t){n.remember(new H(e),t)})),this.forget(e)}if(this.children.size>0){var r=e.getFront();if(e=e.popFront(),this.children.has(r))this.children.get(r).forget(e)&&this.children.delete(r);return 0===this.children.size}return!0},e.prototype.forEachTree=function(e,t){null!==this.value?t(e,this.value):this.forEachChild((function(n,r){var i=new H(e.toString()+"/"+n);r.forEachTree(i,t)}))},e.prototype.forEachChild=function(e){this.children.forEach((function(t,n){e(n,t)}))},e}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */!function(e){e[e.OVERWRITE=0]="OVERWRITE",e[e.MERGE=1]="MERGE",e[e.ACK_USER_WRITE=2]="ACK_USER_WRITE",e[e.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(st||(st={}));var lt,ct,ft=function(){function e(e,t,n,r){this.fromUser=e,this.fromServer=t,this.queryId=n,this.tagged=r,u.assert(!r||t,"Tagged queries must be from server.")}return e.User=new e(!0,!1,null,!1),e.Server=new e(!1,!0,null,!1),e.forServerTaggedQuery=function(t){return new e(!1,!0,t,!0)},e}(),ht=function(){function e(e,t,n){this.path=e,this.affectedTree=t,this.revert=n,this.type=st.ACK_USER_WRITE,this.source=ft.User}return e.prototype.operationForChild=function(t){if(this.path.isEmpty()){if(null!=this.affectedTree.value)return u.assert(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;var n=this.affectedTree.subtree(new H(t));return new e(H.Empty,n,this.revert)}return u.assert(this.path.getFront()===t,"operationForChild called for unrelated child."),new e(this.path.popFront(),this.affectedTree,this.revert)},e}(),pt=function(){function e(e,t){void 0===t&&(lt||(lt=new Ne(D)),t=lt),this.value=e,this.children=t}return e.fromObject=function(t){var n=e.Empty;return L(t,(function(e,t){n=n.set(new H(e),t)})),n},e.prototype.isEmpty=function(){return null===this.value&&this.children.isEmpty()},e.prototype.findRootMostMatchingPathAndValue=function(e,t){if(null!=this.value&&t(this.value))return{path:H.Empty,value:this.value};if(e.isEmpty())return null;var n=e.getFront(),r=this.children.get(n);if(null!==r){var i=r.findRootMostMatchingPathAndValue(e.popFront(),t);return null!=i?{path:new H(n).child(i.path),value:i.value}:null}return null},e.prototype.findRootMostValueAndPath=function(e){return this.findRootMostMatchingPathAndValue(e,(function(){return!0}))},e.prototype.subtree=function(t){if(t.isEmpty())return this;var n=t.getFront(),r=this.children.get(n);return null!==r?r.subtree(t.popFront()):e.Empty},e.prototype.set=function(t,n){if(t.isEmpty())return new e(n,this.children);var r=t.getFront(),i=(this.children.get(r)||e.Empty).set(t.popFront(),n),o=this.children.insert(r,i);return new e(this.value,o)},e.prototype.remove=function(t){if(t.isEmpty())return this.children.isEmpty()?e.Empty:new e(null,this.children);var n=t.getFront(),r=this.children.get(n);if(r){var i=r.remove(t.popFront()),o=void 0;return o=i.isEmpty()?this.children.remove(n):this.children.insert(n,i),null===this.value&&o.isEmpty()?e.Empty:new e(this.value,o)}return this},e.prototype.get=function(e){if(e.isEmpty())return this.value;var t=e.getFront(),n=this.children.get(t);return n?n.get(e.popFront()):null},e.prototype.setTree=function(t,n){if(t.isEmpty())return n;var r=t.getFront(),i=(this.children.get(r)||e.Empty).setTree(t.popFront(),n),o=void 0;return o=i.isEmpty()?this.children.remove(r):this.children.insert(r,i),new e(this.value,o)},e.prototype.fold=function(e){return this.fold_(H.Empty,e)},e.prototype.fold_=function(e,t){var n={};return this.children.inorderTraversal((function(r,i){n[r]=i.fold_(e.child(r),t)})),t(e,this.value,n)},e.prototype.findOnPath=function(e,t){return this.findOnPath_(e,H.Empty,t)},e.prototype.findOnPath_=function(e,t,n){var r=!!this.value&&n(t,this.value);if(r)return r;if(e.isEmpty())return null;var i=e.getFront(),o=this.children.get(i);return o?o.findOnPath_(e.popFront(),t.child(i),n):null},e.prototype.foreachOnPath=function(e,t){return this.foreachOnPath_(e,H.Empty,t)},e.prototype.foreachOnPath_=function(t,n,r){if(t.isEmpty())return this;this.value&&r(n,this.value);var i=t.getFront(),o=this.children.get(i);return o?o.foreachOnPath_(t.popFront(),n.child(i),r):e.Empty},e.prototype.foreach=function(e){this.foreach_(H.Empty,e)},e.prototype.foreach_=function(e,t){this.children.inorderTraversal((function(n,r){r.foreach_(e.child(n),t)})),this.value&&t(e,this.value)},e.prototype.foreachChild=function(e){this.children.inorderTraversal((function(t,n){n.value&&e(t,n.value)}))},e.Empty=new e(null),e}(),dt=function(){function e(e,t){this.source=e,this.path=t,this.type=st.LISTEN_COMPLETE}return e.prototype.operationForChild=function(t){return this.path.isEmpty()?new e(this.source,H.Empty):new e(this.source,this.path.popFront())},e}(),vt=function(){function e(e,t,n){this.source=e,this.path=t,this.snap=n,this.type=st.OVERWRITE}return e.prototype.operationForChild=function(t){return this.path.isEmpty()?new e(this.source,H.Empty,this.snap.getImmediateChild(t)):new e(this.source,this.path.popFront(),this.snap)},e}(),_t=function(){function e(e,t,n){this.source=e,this.path=t,this.children=n,this.type=st.MERGE}return e.prototype.operationForChild=function(t){if(this.path.isEmpty()){var n=this.children.subtree(new H(t));return n.isEmpty()?null:n.value?new vt(this.source,H.Empty,n.value):new e(this.source,H.Empty,n)}return u.assert(this.path.getFront()===t,"Can't get a merge for a child not on the path of the operation"),new e(this.source,this.path.popFront(),this.children)},e.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},e}(),yt=function(){function e(e,t,n){this.node_=e,this.fullyInitialized_=t,this.filtered_=n}return e.prototype.isFullyInitialized=function(){return this.fullyInitialized_},e.prototype.isFiltered=function(){return this.filtered_},e.prototype.isCompleteForPath=function(e){if(e.isEmpty())return this.isFullyInitialized()&&!this.filtered_;var t=e.getFront();return this.isCompleteForChild(t)},e.prototype.isCompleteForChild=function(e){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(e)},e.prototype.getNode=function(){return this.node_},e}(),gt=function(){function e(e,t){this.eventCache_=e,this.serverCache_=t}return e.prototype.updateEventSnap=function(t,n,r){return new e(new yt(t,n,r),this.serverCache_)},e.prototype.updateServerSnap=function(t,n,r){return new e(this.eventCache_,new yt(t,n,r))},e.prototype.getEventCache=function(){return this.eventCache_},e.prototype.getCompleteEventSnap=function(){return this.eventCache_.isFullyInitialized()?this.eventCache_.getNode():null},e.prototype.getServerCache=function(){return this.serverCache_},e.prototype.getCompleteServerSnap=function(){return this.serverCache_.isFullyInitialized()?this.serverCache_.getNode():null},e.Empty=new e(new yt(Be.EMPTY_NODE,!1,!1),new yt(Be.EMPTY_NODE,!1,!1)),e}(),mt=function(){function e(e,t,n,r,i){this.type=e,this.snapshotNode=t,this.childName=n,this.oldSnap=r,this.prevName=i}return e.valueChange=function(t){return new e(e.VALUE,t)},e.childAddedChange=function(t,n){return new e(e.CHILD_ADDED,n,t)},e.childRemovedChange=function(t,n){return new e(e.CHILD_REMOVED,n,t)},e.childChangedChange=function(t,n,r){return new e(e.CHILD_CHANGED,n,t,r)},e.childMovedChange=function(t,n){return new e(e.CHILD_MOVED,n,t)},e.CHILD_ADDED="child_added",e.CHILD_REMOVED="child_removed",e.CHILD_CHANGED="child_changed",e.CHILD_MOVED="child_moved",e.VALUE="value",e}(),bt=function(){function e(e){this.index_=e}return e.prototype.updateChild=function(e,t,n,r,i,o){u.assert(e.isIndexed(this.index_),"A node must be indexed if only a child is updated");var a=e.getImmediateChild(t);return a.getChild(r).equals(n.getChild(r))&&a.isEmpty()===n.isEmpty()?e:(null!=o&&(n.isEmpty()?e.hasChild(t)?o.trackChildChange(mt.childRemovedChange(t,a)):u.assert(e.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):a.isEmpty()?o.trackChildChange(mt.childAddedChange(t,n)):o.trackChildChange(mt.childChangedChange(t,n,a))),e.isLeafNode()&&n.isEmpty()?e:e.updateImmediateChild(t,n).withIndex(this.index_))},e.prototype.updateFullNode=function(e,t,n){return null!=n&&(e.isLeafNode()||e.forEachChild(ke,(function(e,r){t.hasChild(e)||n.trackChildChange(mt.childRemovedChange(e,r))})),t.isLeafNode()||t.forEachChild(ke,(function(t,r){if(e.hasChild(t)){var i=e.getImmediateChild(t);i.equals(r)||n.trackChildChange(mt.childChangedChange(t,r,i))}else n.trackChildChange(mt.childAddedChange(t,r))}))),t.withIndex(this.index_)},e.prototype.updatePriority=function(e,t){return e.isEmpty()?Be.EMPTY_NODE:e.updatePriority(t)},e.prototype.filtersNodes=function(){return!1},e.prototype.getIndexedFilter=function(){return this},e.prototype.getIndex=function(){return this.index_},e}(),wt=function(){function e(){this.changeMap=new Map}return e.prototype.trackChildChange=function(e){var t=e.type,n=e.childName;u.assert(t===mt.CHILD_ADDED||t===mt.CHILD_CHANGED||t===mt.CHILD_REMOVED,"Only child changes supported for tracking"),u.assert(".priority"!==n,"Only non-priority child changes can be tracked.");var r=this.changeMap.get(n);if(r){var i=r.type;if(t===mt.CHILD_ADDED&&i===mt.CHILD_REMOVED)this.changeMap.set(n,mt.childChangedChange(n,e.snapshotNode,r.snapshotNode));else if(t===mt.CHILD_REMOVED&&i===mt.CHILD_ADDED)this.changeMap.delete(n);else if(t===mt.CHILD_REMOVED&&i===mt.CHILD_CHANGED)this.changeMap.set(n,mt.childRemovedChange(n,r.oldSnap));else if(t===mt.CHILD_CHANGED&&i===mt.CHILD_ADDED)this.changeMap.set(n,mt.childAddedChange(n,e.snapshotNode));else{if(t!==mt.CHILD_CHANGED||i!==mt.CHILD_CHANGED)throw u.assertionError("Illegal combination of changes: "+e+" occurred after "+r);this.changeMap.set(n,mt.childChangedChange(n,e.snapshotNode,r.oldSnap))}}else this.changeMap.set(n,e)},e.prototype.getChanges=function(){return Array.from(this.changeMap.values())},e}(),Et=new(function(){function e(){}return e.prototype.getCompleteChild=function(e){return null},e.prototype.getChildAfterChild=function(e,t,n){return null},e}()),Tt=function(){function e(e,t,n){void 0===n&&(n=null),this.writes_=e,this.viewCache_=t,this.optCompleteServerCache_=n}return e.prototype.getCompleteChild=function(e){var t=this.viewCache_.getEventCache();if(t.isCompleteForChild(e))return t.getNode().getImmediateChild(e);var n=null!=this.optCompleteServerCache_?new yt(this.optCompleteServerCache_,!0,!1):this.viewCache_.getServerCache();return this.writes_.calcCompleteChild(e,n)},e.prototype.getChildAfterChild=function(e,t,n){var r=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:this.viewCache_.getCompleteServerSnap(),i=this.writes_.calcIndexedSlice(r,t,1,n,e);return 0===i.length?null:i[0]},e}(),Ct=function(e,t){this.viewCache=e,this.changes=t},St=function(){function e(e){this.filter_=e}return e.prototype.assertIndexed=function(e){u.assert(e.getEventCache().getNode().isIndexed(this.filter_.getIndex()),"Event snap not indexed"),u.assert(e.getServerCache().getNode().isIndexed(this.filter_.getIndex()),"Server snap not indexed")},e.prototype.applyOperation=function(t,n,r,i){var o,a,s=new wt;if(n.type===st.OVERWRITE){var l=n;l.source.fromUser?o=this.applyUserOverwrite_(t,l.path,l.snap,r,i,s):(u.assert(l.source.fromServer,"Unknown source."),a=l.source.tagged||t.getServerCache().isFiltered()&&!l.path.isEmpty(),o=this.applyServerOverwrite_(t,l.path,l.snap,r,i,a,s))}else if(n.type===st.MERGE){var c=n;c.source.fromUser?o=this.applyUserMerge_(t,c.path,c.children,r,i,s):(u.assert(c.source.fromServer,"Unknown source."),a=c.source.tagged||t.getServerCache().isFiltered(),o=this.applyServerMerge_(t,c.path,c.children,r,i,a,s))}else if(n.type===st.ACK_USER_WRITE){var f=n;o=f.revert?this.revertUserWrite_(t,f.path,r,i,s):this.ackUserWrite_(t,f.path,f.affectedTree,r,i,s)}else{if(n.type!==st.LISTEN_COMPLETE)throw u.assertionError("Unknown operation type: "+n.type);o=this.listenComplete_(t,n.path,r,s)}var h=s.getChanges();return e.maybeAddValueEvent_(t,o,h),new Ct(o,h)},e.maybeAddValueEvent_=function(e,t,n){var r=t.getEventCache();if(r.isFullyInitialized()){var i=r.getNode().isLeafNode()||r.getNode().isEmpty(),o=e.getCompleteEventSnap();(n.length>0||!e.getEventCache().isFullyInitialized()||i&&!r.getNode().equals(o)||!r.getNode().getPriority().equals(o.getPriority()))&&n.push(mt.valueChange(t.getCompleteEventSnap()))}},e.prototype.generateEventCacheAfterServerEvent_=function(e,t,n,r,i){var o=e.getEventCache();if(null!=n.shadowingWrite(t))return e;var a=void 0,s=void 0;if(t.isEmpty())if(u.assert(e.getServerCache().isFullyInitialized(),"If change path is empty, we must have complete server data"),e.getServerCache().isFiltered()){var l=e.getCompleteServerSnap(),c=l instanceof Be?l:Be.EMPTY_NODE,f=n.calcCompleteEventChildren(c);a=this.filter_.updateFullNode(e.getEventCache().getNode(),f,i)}else{var h=n.calcCompleteEventCache(e.getCompleteServerSnap());a=this.filter_.updateFullNode(e.getEventCache().getNode(),h,i)}else{var p=t.getFront();if(".priority"===p){u.assert(1===t.getLength(),"Can't have a priority with additional path components");var d=o.getNode();s=e.getServerCache().getNode();var v=n.calcEventCacheAfterServerOverwrite(t,d,s);a=null!=v?this.filter_.updatePriority(d,v):o.getNode()}else{var _=t.popFront(),y=void 0;if(o.isCompleteForChild(p)){s=e.getServerCache().getNode();var g=n.calcEventCacheAfterServerOverwrite(t,o.getNode(),s);y=null!=g?o.getNode().getImmediateChild(p).updateChild(_,g):o.getNode().getImmediateChild(p)}else y=n.calcCompleteChild(p,e.getServerCache());a=null!=y?this.filter_.updateChild(o.getNode(),p,y,_,r,i):o.getNode()}}return e.updateEventSnap(a,o.isFullyInitialized()||t.isEmpty(),this.filter_.filtersNodes())},e.prototype.applyServerOverwrite_=function(e,t,n,r,i,o,a){var s,u=e.getServerCache(),l=o?this.filter_:this.filter_.getIndexedFilter();if(t.isEmpty())s=l.updateFullNode(u.getNode(),n,null);else if(l.filtersNodes()&&!u.isFiltered()){var c=u.getNode().updateChild(t,n);s=l.updateFullNode(u.getNode(),c,null)}else{var f=t.getFront();if(!u.isCompleteForPath(t)&&t.getLength()>1)return e;var h=t.popFront(),p=u.getNode().getImmediateChild(f).updateChild(h,n);s=".priority"===f?l.updatePriority(u.getNode(),p):l.updateChild(u.getNode(),f,p,h,Et,null)}var d=e.updateServerSnap(s,u.isFullyInitialized()||t.isEmpty(),l.filtersNodes()),v=new Tt(r,d,i);return this.generateEventCacheAfterServerEvent_(d,t,r,v,a)},e.prototype.applyUserOverwrite_=function(e,t,n,r,i,o){var a,s,u=e.getEventCache(),l=new Tt(r,e,i);if(t.isEmpty())s=this.filter_.updateFullNode(e.getEventCache().getNode(),n,o),a=e.updateEventSnap(s,!0,this.filter_.filtersNodes());else{var c=t.getFront();if(".priority"===c)s=this.filter_.updatePriority(e.getEventCache().getNode(),n),a=e.updateEventSnap(s,u.isFullyInitialized(),u.isFiltered());else{var f=t.popFront(),h=u.getNode().getImmediateChild(c),p=void 0;if(f.isEmpty())p=n;else{var d=l.getCompleteChild(c);p=null!=d?".priority"===f.getBack()&&d.getChild(f.parent()).isEmpty()?d:d.updateChild(f,n):Be.EMPTY_NODE}if(h.equals(p))a=e;else{var v=this.filter_.updateChild(u.getNode(),c,p,f,l,o);a=e.updateEventSnap(v,u.isFullyInitialized(),this.filter_.filtersNodes())}}}return a},e.cacheHasChild_=function(e,t){return e.getEventCache().isCompleteForChild(t)},e.prototype.applyUserMerge_=function(t,n,r,i,o,a){var s=this,u=t;return r.foreach((function(r,l){var c=n.child(r);e.cacheHasChild_(t,c.getFront())&&(u=s.applyUserOverwrite_(u,c,l,i,o,a))})),r.foreach((function(r,l){var c=n.child(r);e.cacheHasChild_(t,c.getFront())||(u=s.applyUserOverwrite_(u,c,l,i,o,a))})),u},e.prototype.applyMerge_=function(e,t){return t.foreach((function(t,n){e=e.updateChild(t,n)})),e},e.prototype.applyServerMerge_=function(e,t,n,r,i,o,a){var s=this;if(e.getServerCache().getNode().isEmpty()&&!e.getServerCache().isFullyInitialized())return e;var u,l=e;u=t.isEmpty()?n:pt.Empty.setTree(t,n);var c=e.getServerCache().getNode();return u.children.inorderTraversal((function(t,n){if(c.hasChild(t)){var u=e.getServerCache().getNode().getImmediateChild(t),f=s.applyMerge_(u,n);l=s.applyServerOverwrite_(l,new H(t),f,r,i,o,a)}})),u.children.inorderTraversal((function(t,n){var u=!e.getServerCache().isCompleteForChild(t)&&null==n.value;if(!c.hasChild(t)&&!u){var f=e.getServerCache().getNode().getImmediateChild(t),h=s.applyMerge_(f,n);l=s.applyServerOverwrite_(l,new H(t),h,r,i,o,a)}})),l},e.prototype.ackUserWrite_=function(e,t,n,r,i,o){if(null!=r.shadowingWrite(t))return e;var a=e.getServerCache().isFiltered(),s=e.getServerCache();if(null!=n.value){if(t.isEmpty()&&s.isFullyInitialized()||s.isCompleteForPath(t))return this.applyServerOverwrite_(e,t,s.getNode().getChild(t),r,i,a,o);if(t.isEmpty()){var u=pt.Empty;return s.getNode().forEachChild(be,(function(e,t){u=u.set(new H(e),t)})),this.applyServerMerge_(e,t,u,r,i,a,o)}return e}var l=pt.Empty;return n.foreach((function(e,n){var r=t.child(e);s.isCompleteForPath(r)&&(l=l.set(e,s.getNode().getChild(r)))})),this.applyServerMerge_(e,t,l,r,i,a,o)},e.prototype.listenComplete_=function(e,t,n,r){var i=e.getServerCache(),o=e.updateServerSnap(i.getNode(),i.isFullyInitialized()||t.isEmpty(),i.isFiltered());return this.generateEventCacheAfterServerEvent_(o,t,n,Et,r)},e.prototype.revertUserWrite_=function(e,t,n,r,i){var o;if(null!=n.shadowingWrite(t))return e;var a=new Tt(n,e,r),s=e.getEventCache().getNode(),l=void 0;if(t.isEmpty()||".priority"===t.getFront()){var c=void 0;if(e.getServerCache().isFullyInitialized())c=n.calcCompleteEventCache(e.getCompleteServerSnap());else{var f=e.getServerCache().getNode();u.assert(f instanceof Be,"serverChildren would be complete if leaf node"),c=n.calcCompleteEventChildren(f)}c=c,l=this.filter_.updateFullNode(s,c,i)}else{var h=t.getFront(),p=n.calcCompleteChild(h,e.getServerCache());null==p&&e.getServerCache().isCompleteForChild(h)&&(p=s.getImmediateChild(h)),(l=null!=p?this.filter_.updateChild(s,h,p,t.popFront(),a,i):e.getEventCache().getNode().hasChild(h)?this.filter_.updateChild(s,h,Be.EMPTY_NODE,t.popFront(),a,i):s).isEmpty()&&e.getServerCache().isFullyInitialized()&&(o=n.calcCompleteEventCache(e.getCompleteServerSnap())).isLeafNode()&&(l=this.filter_.updateFullNode(l,o,i))}return o=e.getServerCache().isFullyInitialized()||null!=n.shadowingWrite(H.Empty),e.updateEventSnap(l,o,this.filter_.filtersNodes())},e}(),Pt=function(){function e(e){this.query_=e,this.index_=this.query_.getQueryParams().getIndex()}return e.prototype.generateEventsForChanges=function(e,t,n){var r=this,i=[],o=[];return e.forEach((function(e){e.type===mt.CHILD_CHANGED&&r.index_.indexedValueChanged(e.oldSnap,e.snapshotNode)&&o.push(mt.childMovedChange(e.childName,e.snapshotNode))})),this.generateEventsForType_(i,mt.CHILD_REMOVED,e,n,t),this.generateEventsForType_(i,mt.CHILD_ADDED,e,n,t),this.generateEventsForType_(i,mt.CHILD_MOVED,o,n,t),this.generateEventsForType_(i,mt.CHILD_CHANGED,e,n,t),this.generateEventsForType_(i,mt.VALUE,e,n,t),i},e.prototype.generateEventsForType_=function(e,t,n,r,i){var o=this,a=n.filter((function(e){return e.type===t}));a.sort(this.compareChanges_.bind(this)),a.forEach((function(t){var n=o.materializeSingleChange_(t,i);r.forEach((function(r){r.respondsTo(t.type)&&e.push(r.createEvent(n,o.query_))}))}))},e.prototype.materializeSingleChange_=function(e,t){return"value"===e.type||"child_removed"===e.type||(e.prevName=t.getPredecessorChildName(e.childName,e.snapshotNode,this.index_)),e},e.prototype.compareChanges_=function(e,t){if(null==e.childName||null==t.childName)throw u.assertionError("Should only compare child_ events.");var n=new ye(e.childName,e.snapshotNode),r=new ye(t.childName,t.snapshotNode);return this.index_.compare(n,r)},e}(),Ot=function(){function e(e,t){this.query_=e,this.eventRegistrations_=[];var n=this.query_.getQueryParams(),r=new bt(n.getIndex()),i=n.getNodeFilter();this.processor_=new St(i);var o=t.getServerCache(),a=t.getEventCache(),s=r.updateFullNode(Be.EMPTY_NODE,o.getNode(),null),u=i.updateFullNode(Be.EMPTY_NODE,a.getNode(),null),l=new yt(s,o.isFullyInitialized(),r.filtersNodes()),c=new yt(u,a.isFullyInitialized(),i.filtersNodes());this.viewCache_=new gt(c,l),this.eventGenerator_=new Pt(this.query_)}return e.prototype.getQuery=function(){return this.query_},e.prototype.getServerCache=function(){return this.viewCache_.getServerCache().getNode()},e.prototype.getCompleteServerCache=function(e){var t=this.viewCache_.getCompleteServerSnap();return t&&(this.query_.getQueryParams().loadsAllData()||!e.isEmpty()&&!t.getImmediateChild(e.getFront()).isEmpty())?t.getChild(e):null},e.prototype.isEmpty=function(){return 0===this.eventRegistrations_.length},e.prototype.addEventRegistration=function(e){this.eventRegistrations_.push(e)},e.prototype.removeEventRegistration=function(e,t){var n=[];if(t){u.assert(null==e,"A cancel should cancel all event registrations.");var r=this.query_.path;this.eventRegistrations_.forEach((function(e){t=t;var i=e.createCancelEvent(t,r);i&&n.push(i)}))}if(e){for(var i=[],o=0;o<this.eventRegistrations_.length;++o){var a=this.eventRegistrations_[o];if(a.matches(e)){if(e.hasAnyCallback()){i=i.concat(this.eventRegistrations_.slice(o+1));break}}else i.push(a)}this.eventRegistrations_=i}else this.eventRegistrations_=[];return n},e.prototype.applyOperation=function(e,t,n){e.type===st.MERGE&&null!==e.source.queryId&&(u.assert(this.viewCache_.getCompleteServerSnap(),"We should always have a full cache before handling merges"),u.assert(this.viewCache_.getCompleteEventSnap(),"Missing event cache, even though we have a server cache"));var r=this.viewCache_,i=this.processor_.applyOperation(r,e,t,n);return this.processor_.assertIndexed(i.viewCache),u.assert(i.viewCache.getServerCache().isFullyInitialized()||!r.getServerCache().isFullyInitialized(),"Once a server snap is complete, it should never go back"),this.viewCache_=i.viewCache,this.generateEventsForChanges_(i.changes,i.viewCache.getEventCache().getNode(),null)},e.prototype.getInitialEvents=function(e){var t=this.viewCache_.getEventCache(),n=[];t.getNode().isLeafNode()||t.getNode().forEachChild(ke,(function(e,t){n.push(mt.childAddedChange(e,t))}));return t.isFullyInitialized()&&n.push(mt.valueChange(t.getNode())),this.generateEventsForChanges_(n,t.getNode(),e)},e.prototype.generateEventsForChanges_=function(e,t,n){var r=n?[n]:this.eventRegistrations_;return this.eventGenerator_.generateEventsForChanges(e,t,r)},e}(),It=function(){function e(){this.views=new Map}return Object.defineProperty(e,"__referenceConstructor",{get:function(){return u.assert(ct,"Reference.ts has not been loaded"),ct},set:function(e){u.assert(!ct,"__referenceConstructor has already been defined"),ct=e},enumerable:!0,configurable:!0}),e.prototype.isEmpty=function(){return 0===this.views.size},e.prototype.applyOperation=function(e,t,n){var r,i,o=e.source.queryId;if(null!==o){var a=this.views.get(o);return u.assert(null!=a,"SyncTree gave us an op for an invalid query."),a.applyOperation(e,t,n)}var l=[];try{for(var c=s.__values(this.views.values()),f=c.next();!f.done;f=c.next()){a=f.value;l=l.concat(a.applyOperation(e,t,n))}}catch(e){r={error:e}}finally{try{f&&!f.done&&(i=c.return)&&i.call(c)}finally{if(r)throw r.error}}return l},e.prototype.addEventRegistration=function(e,t,n,r,i){var o=e.queryIdentifier(),a=this.views.get(o);if(!a){var s=n.calcCompleteEventCache(i?r:null),u=!1;s?u=!0:r instanceof Be?(s=n.calcCompleteEventChildren(r),u=!1):(s=Be.EMPTY_NODE,u=!1);var l=new gt(new yt(s,u,!1),new yt(r,i,!1));a=new Ot(e,l),this.views.set(o,a)}return a.addEventRegistration(t),a.getInitialEvents(t)},e.prototype.removeEventRegistration=function(t,n,r){var i,o,a=t.queryIdentifier(),u=[],l=[],c=this.hasCompleteView();if("default"===a)try{for(var f=s.__values(this.views.entries()),h=f.next();!h.done;h=f.next()){var p=s.__read(h.value,2),d=p[0],v=p[1];l=l.concat(v.removeEventRegistration(n,r)),v.isEmpty()&&(this.views.delete(d),v.getQuery().getQueryParams().loadsAllData()||u.push(v.getQuery()))}}catch(e){i={error:e}}finally{try{h&&!h.done&&(o=f.return)&&o.call(f)}finally{if(i)throw i.error}}else(v=this.views.get(a))&&(l=l.concat(v.removeEventRegistration(n,r)),v.isEmpty()&&(this.views.delete(a),v.getQuery().getQueryParams().loadsAllData()||u.push(v.getQuery())));return c&&!this.hasCompleteView()&&u.push(new e.__referenceConstructor(t.repo,t.path)),{removed:u,events:l}},e.prototype.getQueryViews=function(){var e,t,n=[];try{for(var r=s.__values(this.views.values()),i=r.next();!i.done;i=r.next()){var o=i.value;o.getQuery().getQueryParams().loadsAllData()||n.push(o)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}return n},e.prototype.getCompleteServerCache=function(e){var t,n,r=null;try{for(var i=s.__values(this.views.values()),o=i.next();!o.done;o=i.next()){var a=o.value;r=r||a.getCompleteServerCache(e)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r},e.prototype.viewForQuery=function(e){if(e.getQueryParams().loadsAllData())return this.getCompleteView();var t=e.queryIdentifier();return this.views.get(t)},e.prototype.viewExistsForQuery=function(e){return null!=this.viewForQuery(e)},e.prototype.hasCompleteView=function(){return null!=this.getCompleteView()},e.prototype.getCompleteView=function(){var e,t;try{for(var n=s.__values(this.views.values()),r=n.next();!r.done;r=n.next()){var i=r.value;if(i.getQuery().getQueryParams().loadsAllData())return i}}catch(t){e={error:t}}finally{try{r&&!r.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}return null},e}(),kt=function(){function e(e){this.writeTree_=e}return e.prototype.addWrite=function(t,n){if(t.isEmpty())return new e(new pt(n));var r=this.writeTree_.findRootMostValueAndPath(t);if(null!=r){var i=r.path,o=r.value,a=H.relativePath(i,t);return o=o.updateChild(a,n),new e(this.writeTree_.set(i,o))}var s=new pt(n);return new e(this.writeTree_.setTree(t,s))},e.prototype.addWrites=function(e,t){var n=this;return L(t,(function(t,r){n=n.addWrite(e.child(t),r)})),n},e.prototype.removeWrite=function(t){return t.isEmpty()?e.Empty:new e(this.writeTree_.setTree(t,pt.Empty))},e.prototype.hasCompleteWrite=function(e){return null!=this.getCompleteNode(e)},e.prototype.getCompleteNode=function(e){var t=this.writeTree_.findRootMostValueAndPath(e);return null!=t?this.writeTree_.get(t.path).getChild(H.relativePath(t.path,e)):null},e.prototype.getCompleteChildren=function(){var e=[],t=this.writeTree_.value;return null!=t?t.isLeafNode()||t.forEachChild(ke,(function(t,n){e.push(new ye(t,n))})):this.writeTree_.children.inorderTraversal((function(t,n){null!=n.value&&e.push(new ye(t,n.value))})),e},e.prototype.childCompoundWrite=function(t){if(t.isEmpty())return this;var n=this.getCompleteNode(t);return new e(null!=n?new pt(n):this.writeTree_.subtree(t))},e.prototype.isEmpty=function(){return this.writeTree_.isEmpty()},e.prototype.apply=function(e){return function e(t,n,r){if(null!=n.value)return r.updateChild(t,n.value);var i=null;return n.children.inorderTraversal((function(n,o){".priority"===n?(u.assert(null!==o.value,"Priority writes must always be leaf nodes"),i=o.value):r=e(t.child(n),o,r)})),r.getChild(t).isEmpty()||null===i||(r=r.updateChild(t.child(".priority"),i)),r}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(H.Empty,this.writeTree_,e)},e.Empty=new e(new pt(null)),e}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var xt=function(){function e(){this.visibleWrites_=kt.Empty,this.allWrites_=[],this.lastWriteId_=-1}return e.prototype.childWrites=function(e){return new At(e,this)},e.prototype.addOverwrite=function(e,t,n,r){u.assert(n>this.lastWriteId_,"Stacking an older write on top of newer ones"),void 0===r&&(r=!0),this.allWrites_.push({path:e,snap:t,writeId:n,visible:r}),r&&(this.visibleWrites_=this.visibleWrites_.addWrite(e,t)),this.lastWriteId_=n},e.prototype.addMerge=function(e,t,n){u.assert(n>this.lastWriteId_,"Stacking an older merge on top of newer ones"),this.allWrites_.push({path:e,children:t,writeId:n,visible:!0}),this.visibleWrites_=this.visibleWrites_.addWrites(e,t),this.lastWriteId_=n},e.prototype.getWrite=function(e){for(var t=0;t<this.allWrites_.length;t++){var n=this.allWrites_[t];if(n.writeId===e)return n}return null},e.prototype.removeWrite=function(e){var t=this,n=this.allWrites_.findIndex((function(t){return t.writeId===e}));u.assert(n>=0,"removeWrite called with nonexistent writeId.");var r=this.allWrites_[n];this.allWrites_.splice(n,1);for(var i=r.visible,o=!1,a=this.allWrites_.length-1;i&&a>=0;){var s=this.allWrites_[a];s.visible&&(a>=n&&this.recordContainsPath_(s,r.path)?i=!1:r.path.contains(s.path)&&(o=!0)),a--}if(i){if(o)return this.resetTree_(),!0;r.snap?this.visibleWrites_=this.visibleWrites_.removeWrite(r.path):L(r.children,(function(e){t.visibleWrites_=t.visibleWrites_.removeWrite(r.path.child(e))}));return!0}return!1},e.prototype.getCompleteWriteData=function(e){return this.visibleWrites_.getCompleteNode(e)},e.prototype.calcCompleteEventCache=function(t,n,r,i){if(r||i){var o=this.visibleWrites_.childCompoundWrite(t);if(!i&&o.isEmpty())return n;if(i||null!=n||o.hasCompleteWrite(H.Empty)){var a=e.layerTree_(this.allWrites_,(function(e){return(e.visible||i)&&(!r||!~r.indexOf(e.writeId))&&(e.path.contains(t)||t.contains(e.path))}),t);l=n||Be.EMPTY_NODE;return a.apply(l)}return null}var s=this.visibleWrites_.getCompleteNode(t);if(null!=s)return s;var u=this.visibleWrites_.childCompoundWrite(t);if(u.isEmpty())return n;if(null!=n||u.hasCompleteWrite(H.Empty)){var l=n||Be.EMPTY_NODE;return u.apply(l)}return null},e.prototype.calcCompleteEventChildren=function(e,t){var n=Be.EMPTY_NODE,r=this.visibleWrites_.getCompleteNode(e);if(r)return r.isLeafNode()||r.forEachChild(ke,(function(e,t){n=n.updateImmediateChild(e,t)})),n;if(t){var i=this.visibleWrites_.childCompoundWrite(e);return t.forEachChild(ke,(function(e,t){var r=i.childCompoundWrite(new H(e)).apply(t);n=n.updateImmediateChild(e,r)})),i.getCompleteChildren().forEach((function(e){n=n.updateImmediateChild(e.name,e.node)})),n}return this.visibleWrites_.childCompoundWrite(e).getCompleteChildren().forEach((function(e){n=n.updateImmediateChild(e.name,e.node)})),n},e.prototype.calcEventCacheAfterServerOverwrite=function(e,t,n,r){u.assert(n||r,"Either existingEventSnap or existingServerSnap must exist");var i=e.child(t);if(this.visibleWrites_.hasCompleteWrite(i))return null;var o=this.visibleWrites_.childCompoundWrite(i);return o.isEmpty()?r.getChild(t):o.apply(r.getChild(t))},e.prototype.calcCompleteChild=function(e,t,n){var r=e.child(t),i=this.visibleWrites_.getCompleteNode(r);return null!=i?i:n.isCompleteForChild(t)?this.visibleWrites_.childCompoundWrite(r).apply(n.getNode().getImmediateChild(t)):null},e.prototype.shadowingWrite=function(e){return this.visibleWrites_.getCompleteNode(e)},e.prototype.calcIndexedSlice=function(e,t,n,r,i,o){var a,s=this.visibleWrites_.childCompoundWrite(e),u=s.getCompleteNode(H.Empty);if(null!=u)a=u;else{if(null==t)return[];a=s.apply(t)}if((a=a.withIndex(o)).isEmpty()||a.isLeafNode())return[];for(var l=[],c=o.getCompare(),f=i?a.getReverseIteratorFrom(n,o):a.getIteratorFrom(n,o),h=f.getNext();h&&l.length<r;)0!==c(h,n)&&l.push(h),h=f.getNext();return l},e.prototype.recordContainsPath_=function(e,t){if(e.snap)return e.path.contains(t);for(var n in e.children)if(e.children.hasOwnProperty(n)&&e.path.child(n).contains(t))return!0;return!1},e.prototype.resetTree_=function(){this.visibleWrites_=e.layerTree_(this.allWrites_,e.DefaultFilter_,H.Empty),this.allWrites_.length>0?this.lastWriteId_=this.allWrites_[this.allWrites_.length-1].writeId:this.lastWriteId_=-1},e.DefaultFilter_=function(e){return e.visible},e.layerTree_=function(e,t,n){for(var r=kt.Empty,i=0;i<e.length;++i){var o=e[i];if(t(o)){var a=o.path,s=void 0;if(o.snap)n.contains(a)?(s=H.relativePath(n,a),r=r.addWrite(s,o.snap)):a.contains(n)&&(s=H.relativePath(a,n),r=r.addWrite(H.Empty,o.snap.getChild(s)));else{if(!o.children)throw u.assertionError("WriteRecord should have .snap or .children");if(n.contains(a))s=H.relativePath(n,a),r=r.addWrites(s,o.children);else if(a.contains(n))if((s=H.relativePath(a,n)).isEmpty())r=r.addWrites(H.Empty,o.children);else{var l=u.safeGet(o.children,s.getFront());if(l){var c=l.getChild(s.popFront());r=r.addWrite(H.Empty,c)}}}}}return r},e}(),At=function(){function e(e,t){this.treePath_=e,this.writeTree_=t}return e.prototype.calcCompleteEventCache=function(e,t,n){return this.writeTree_.calcCompleteEventCache(this.treePath_,e,t,n)},e.prototype.calcCompleteEventChildren=function(e){return this.writeTree_.calcCompleteEventChildren(this.treePath_,e)},e.prototype.calcEventCacheAfterServerOverwrite=function(e,t,n){return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_,e,t,n)},e.prototype.shadowingWrite=function(e){return this.writeTree_.shadowingWrite(this.treePath_.child(e))},e.prototype.calcIndexedSlice=function(e,t,n,r,i){return this.writeTree_.calcIndexedSlice(this.treePath_,e,t,n,r,i)},e.prototype.calcCompleteChild=function(e,t){return this.writeTree_.calcCompleteChild(this.treePath_,e,t)},e.prototype.child=function(t){return new e(this.treePath_.child(t),this.writeTree_)},e}(),Dt=function(){function e(e){this.listenProvider_=e,this.syncPointTree_=pt.Empty,this.pendingWriteTree_=new xt,this.tagToQueryMap=new Map,this.queryToTagMap=new Map}return e.prototype.applyUserOverwrite=function(e,t,n,r){return this.pendingWriteTree_.addOverwrite(e,t,n,r),r?this.applyOperationToSyncPoints_(new vt(ft.User,e,t)):[]},e.prototype.applyUserMerge=function(e,t,n){this.pendingWriteTree_.addMerge(e,t,n);var r=pt.fromObject(t);return this.applyOperationToSyncPoints_(new _t(ft.User,e,r))},e.prototype.ackUserWrite=function(e,t){void 0===t&&(t=!1);var n=this.pendingWriteTree_.getWrite(e);if(this.pendingWriteTree_.removeWrite(e)){var r=pt.Empty;return null!=n.snap?r=r.set(H.Empty,!0):L(n.children,(function(e,t){r=r.set(new H(e),t)})),this.applyOperationToSyncPoints_(new ht(n.path,r,t))}return[]},e.prototype.applyServerOverwrite=function(e,t){return this.applyOperationToSyncPoints_(new vt(ft.Server,e,t))},e.prototype.applyServerMerge=function(e,t){var n=pt.fromObject(t);return this.applyOperationToSyncPoints_(new _t(ft.Server,e,n))},e.prototype.applyListenComplete=function(e){return this.applyOperationToSyncPoints_(new dt(ft.Server,e))},e.prototype.applyTaggedQueryOverwrite=function(t,n,r){var i=this.queryKeyForTag_(r);if(null!=i){var o=e.parseQueryKey_(i),a=o.path,s=o.queryId,u=H.relativePath(a,t),l=new vt(ft.forServerTaggedQuery(s),u,n);return this.applyTaggedOperation_(a,l)}return[]},e.prototype.applyTaggedQueryMerge=function(t,n,r){var i=this.queryKeyForTag_(r);if(i){var o=e.parseQueryKey_(i),a=o.path,s=o.queryId,u=H.relativePath(a,t),l=pt.fromObject(n),c=new _t(ft.forServerTaggedQuery(s),u,l);return this.applyTaggedOperation_(a,c)}return[]},e.prototype.applyTaggedListenComplete=function(t,n){var r=this.queryKeyForTag_(n);if(r){var i=e.parseQueryKey_(r),o=i.path,a=i.queryId,s=H.relativePath(o,t),u=new dt(ft.forServerTaggedQuery(a),s);return this.applyTaggedOperation_(o,u)}return[]},e.prototype.addEventRegistration=function(t,n){var r=t.path,i=null,o=!1;this.syncPointTree_.foreachOnPath(r,(function(e,t){var n=H.relativePath(e,r);i=i||t.getCompleteServerCache(n),o=o||t.hasCompleteView()}));var a,s=this.syncPointTree_.get(r);(s?(o=o||s.hasCompleteView(),i=i||s.getCompleteServerCache(H.Empty)):(s=new It,this.syncPointTree_=this.syncPointTree_.set(r,s)),null!=i)?a=!0:(a=!1,i=Be.EMPTY_NODE,this.syncPointTree_.subtree(r).foreachChild((function(e,t){var n=t.getCompleteServerCache(H.Empty);n&&(i=i.updateImmediateChild(e,n))})));var l=s.viewExistsForQuery(t);if(!l&&!t.getQueryParams().loadsAllData()){var c=e.makeQueryKey_(t);u.assert(!this.queryToTagMap.has(c),"View does not exist, but we have a tag");var f=e.getNextQueryTag_();this.queryToTagMap.set(c,f),this.tagToQueryMap.set(f,c)}var h=this.pendingWriteTree_.childWrites(r),p=s.addEventRegistration(t,n,h,i,a);if(!l&&!o){var d=s.viewForQuery(t);p=p.concat(this.setupListener_(t,d))}return p},e.prototype.removeEventRegistration=function(t,n,r){var i=this,o=t.path,a=this.syncPointTree_.get(o),s=[];if(a&&("default"===t.queryIdentifier()||a.viewExistsForQuery(t))){var u=a.removeEventRegistration(t,n,r);a.isEmpty()&&(this.syncPointTree_=this.syncPointTree_.remove(o));var l=u.removed;s=u.events;var c=-1!==l.findIndex((function(e){return e.getQueryParams().loadsAllData()})),f=this.syncPointTree_.findOnPath(o,(function(e,t){return t.hasCompleteView()}));if(c&&!f){var h=this.syncPointTree_.subtree(o);if(!h.isEmpty())for(var p=this.collectDistinctViewsForSubTree_(h),d=0;d<p.length;++d){var v=p[d],_=v.getQuery(),y=this.createListenerForView_(v);this.listenProvider_.startListening(e.queryForListening_(_),this.tagForQuery_(_),y.hashFn,y.onComplete)}}if(!f&&l.length>0&&!r)if(c){this.listenProvider_.stopListening(e.queryForListening_(t),null)}else l.forEach((function(t){var n=i.queryToTagMap.get(e.makeQueryKey_(t));i.listenProvider_.stopListening(e.queryForListening_(t),n)}));this.removeTags_(l)}return s},e.prototype.calcCompleteEventCache=function(e,t){var n=this.pendingWriteTree_,r=this.syncPointTree_.findOnPath(e,(function(t,n){var r=H.relativePath(t,e),i=n.getCompleteServerCache(r);if(i)return i}));return n.calcCompleteEventCache(e,r,t,!0)},e.prototype.collectDistinctViewsForSubTree_=function(e){return e.fold((function(e,t,n){if(t&&t.hasCompleteView())return[t.getCompleteView()];var r=[];return t&&(r=t.getQueryViews()),L(n,(function(e,t){r=r.concat(t)})),r}))},e.prototype.removeTags_=function(t){for(var n=0;n<t.length;++n){var r=t[n];if(!r.getQueryParams().loadsAllData()){var i=e.makeQueryKey_(r),o=this.queryToTagMap.get(i);this.queryToTagMap.delete(i),this.tagToQueryMap.delete(o)}}},e.queryForListening_=function(e){return e.getQueryParams().loadsAllData()&&!e.getQueryParams().isDefault()?e.getRef():e},e.prototype.setupListener_=function(t,n){var r=t.path,i=this.tagForQuery_(t),o=this.createListenerForView_(n),a=this.listenProvider_.startListening(e.queryForListening_(t),i,o.hashFn,o.onComplete),s=this.syncPointTree_.subtree(r);if(i)u.assert(!s.value.hasCompleteView(),"If we're adding a query, it shouldn't be shadowed");else for(var l=s.fold((function(e,t,n){if(!e.isEmpty()&&t&&t.hasCompleteView())return[t.getCompleteView().getQuery()];var r=[];return t&&(r=r.concat(t.getQueryViews().map((function(e){return e.getQuery()})))),L(n,(function(e,t){r=r.concat(t)})),r})),c=0;c<l.length;++c){var f=l[c];this.listenProvider_.stopListening(e.queryForListening_(f),this.tagForQuery_(f))}return a},e.prototype.createListenerForView_=function(e){var t=this,n=e.getQuery(),r=this.tagForQuery_(n);return{hashFn:function(){return(e.getServerCache()||Be.EMPTY_NODE).hash()},onComplete:function(e){if("ok"===e)return r?t.applyTaggedListenComplete(n.path,r):t.applyListenComplete(n.path);var i=function(e,t){var n="Unknown Error";"too_big"===e?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"===e?n="Client doesn't have permission to access the desired data.":"unavailable"===e&&(n="The service is unavailable");var r=new Error(e+" at "+t.path.toString()+": "+n);return r.code=e.toUpperCase(),r}(e,n);return t.removeEventRegistration(n,null,i)}}},e.makeQueryKey_=function(e){return e.path.toString()+"$"+e.queryIdentifier()},e.parseQueryKey_=function(e){var t=e.indexOf("$");return u.assert(-1!==t&&t<e.length-1,"Bad queryKey."),{queryId:e.substr(t+1),path:new H(e.substr(0,t))}},e.prototype.queryKeyForTag_=function(e){return this.tagToQueryMap.get(e)},e.prototype.tagForQuery_=function(t){var n=e.makeQueryKey_(t);return this.queryToTagMap.get(n)},e.getNextQueryTag_=function(){return e.nextQueryTag_++},e.prototype.applyTaggedOperation_=function(e,t){var n=this.syncPointTree_.get(e);u.assert(n,"Missing sync point for query tag that we're tracking");var r=this.pendingWriteTree_.childWrites(e);return n.applyOperation(t,r,null)},e.prototype.applyOperationToSyncPoints_=function(e){return this.applyOperationHelper_(e,this.syncPointTree_,null,this.pendingWriteTree_.childWrites(H.Empty))},e.prototype.applyOperationHelper_=function(e,t,n,r){if(e.path.isEmpty())return this.applyOperationDescendantsHelper_(e,t,n,r);var i=t.get(H.Empty);null==n&&null!=i&&(n=i.getCompleteServerCache(H.Empty));var o=[],a=e.path.getFront(),s=e.operationForChild(a),u=t.children.get(a);if(u&&s){var l=n?n.getImmediateChild(a):null,c=r.child(a);o=o.concat(this.applyOperationHelper_(s,u,l,c))}return i&&(o=o.concat(i.applyOperation(e,r,n))),o},e.prototype.applyOperationDescendantsHelper_=function(e,t,n,r){var i=this,o=t.get(H.Empty);null==n&&null!=o&&(n=o.getCompleteServerCache(H.Empty));var a=[];return t.children.inorderTraversal((function(t,o){var s=n?n.getImmediateChild(t):null,u=r.child(t),l=e.operationForChild(t);l&&(a=a.concat(i.applyOperationDescendantsHelper_(l,o,s,u)))})),o&&(a=a.concat(o.applyOperation(e,r,n))),a},e.nextQueryTag_=1,e}(),Nt=function(){function e(){this.rootNode_=Be.EMPTY_NODE}return e.prototype.getNode=function(e){return this.rootNode_.getChild(e)},e.prototype.updateSnapshot=function(e,t){this.rootNode_=this.rootNode_.updateChild(e,t)},e}(),Rt=function(){function e(e,t){var n=this;this.app_=e,this.authProvider_=t,this.auth_=null,this.auth_=t.getImmediate({optional:!0}),this.auth_||t.get().then((function(e){return n.auth_=e}))}return e.prototype.getToken=function(e){return this.auth_?this.auth_.getToken(e).catch((function(e){return e&&"auth/token-not-initialized"===e.code?(T("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(e)})):Promise.resolve(null)},e.prototype.addTokenChangeListener=function(e){this.auth_?this.auth_.addAuthTokenListener(e):(setTimeout((function(){return e(null)}),0),this.authProvider_.get().then((function(t){return t.addAuthTokenListener(e)})))},e.prototype.removeTokenChangeListener=function(e){this.authProvider_.get().then((function(t){return t.removeAuthTokenListener(e)}))},e.prototype.notifyForInvalidToken=function(){var e='Provided authentication credentials for the app named "'+this.app_.name+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.app_.options?e+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.app_.options?e+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':e+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',O(e)},e}(),Mt=function(){function e(){this.counters_={}}return e.prototype.incrementCounter=function(e,t){void 0===t&&(t=1),u.contains(this.counters_,e)||(this.counters_[e]=0),this.counters_[e]+=t},e.prototype.get=function(){return u.deepCopy(this.counters_)},e}(),Lt=function(){function e(){}return e.getCollection=function(e){var t=e.toString();return this.collections_[t]||(this.collections_[t]=new Mt),this.collections_[t]},e.getOrCreateReporter=function(e,t){var n=e.toString();return this.reporters_[n]||(this.reporters_[n]=t()),this.reporters_[n]},e.collections_={},e.reporters_={},e}(),Ft=function(){function e(e){this.collection_=e,this.last_=null}return e.prototype.get=function(){var e=this.collection_.get(),t=s.__assign({},e);return this.last_&&L(this.last_,(function(e,n){t[e]=t[e]-n})),this.last_=e,t},e}(),jt=function(){function e(e,t){this.server_=t,this.statsToReport_={},this.statsListener_=new Ft(e);var n=1e4+2e4*Math.random();B(this.reportStats_.bind(this),Math.floor(n))}return e.prototype.includeStat=function(e){this.statsToReport_[e]=!0},e.prototype.reportStats_=function(){var e=this,t=this.statsListener_.get(),n={},r=!1;L(t,(function(t,i){i>0&&u.contains(e.statsToReport_,t)&&(n[t]=i,r=!0)})),r&&this.server_.reportStats(n),B(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))},e}(),Ut=function(){function e(){this.eventLists_=[],this.recursionDepth_=0}return e.prototype.queueEvents=function(e){for(var t=null,n=0;n<e.length;n++){var r=e[n],i=r.getPath();null===t||i.equals(t.getPath())||(this.eventLists_.push(t),t=null),null===t&&(t=new Wt(i)),t.add(r)}t&&this.eventLists_.push(t)},e.prototype.raiseEventsAtPath=function(e,t){this.queueEvents(t),this.raiseQueuedEventsMatchingPredicate_((function(t){return t.equals(e)}))},e.prototype.raiseEventsForChangedPath=function(e,t){this.queueEvents(t),this.raiseQueuedEventsMatchingPredicate_((function(t){return t.contains(e)||e.contains(t)}))},e.prototype.raiseQueuedEventsMatchingPredicate_=function(e){this.recursionDepth_++;for(var t=!0,n=0;n<this.eventLists_.length;n++){var r=this.eventLists_[n];if(r)e(r.getPath())?(this.eventLists_[n].raise(),this.eventLists_[n]=null):t=!1}t&&(this.eventLists_=[]),this.recursionDepth_--},e}(),Wt=function(){function e(e){this.path_=e,this.events_=[]}return e.prototype.add=function(e){this.events_.push(e)},e.prototype.raise=function(){for(var e=0;e<this.events_.length;e++){var t=this.events_[e];if(null!==t){this.events_[e]=null;var n=t.getEventRunner();b&&T("event: "+t.toString()),W(n)}}},e.prototype.getPath=function(){return this.path_},e}(),Bt=function(){function e(e){this.allowedEvents_=e,this.listeners_={},u.assert(Array.isArray(e)&&e.length>0,"Requires a non-empty array")}return e.prototype.trigger=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(Array.isArray(this.listeners_[e]))for(var r=s.__spread(this.listeners_[e]),i=0;i<r.length;i++)r[i].callback.apply(r[i].context,t)},e.prototype.on=function(e,t,n){this.validateEventType_(e),this.listeners_[e]=this.listeners_[e]||[],this.listeners_[e].push({callback:t,context:n});var r=this.getInitialEvent(e);r&&t.apply(n,r)},e.prototype.off=function(e,t,n){this.validateEventType_(e);for(var r=this.listeners_[e]||[],i=0;i<r.length;i++)if(r[i].callback===t&&(!n||n===r[i].context))return void r.splice(i,1)},e.prototype.validateEventType_=function(e){u.assert(this.allowedEvents_.find((function(t){return t===e})),"Unknown event: "+e)},e}(),Ht=function(e){function t(){var t,n,r=e.call(this,["visible"])||this;return"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(n="visibilitychange",t="hidden"):void 0!==document.mozHidden?(n="mozvisibilitychange",t="mozHidden"):void 0!==document.msHidden?(n="msvisibilitychange",t="msHidden"):void 0!==document.webkitHidden&&(n="webkitvisibilitychange",t="webkitHidden")),r.visible_=!0,n&&document.addEventListener(n,(function(){var e=!document[t];e!==r.visible_&&(r.visible_=e,r.trigger("visible",e))}),!1),r}return s.__extends(t,e),t.getInstance=function(){return new t},t.prototype.getInitialEvent=function(e){return u.assert("visible"===e,"Unknown event type: "+e),[this.visible_]},t}(Bt),Kt=function(e){function t(){var t=e.call(this,["online"])||this;return t.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||u.isMobileCordova()||(window.addEventListener("online",(function(){t.online_||(t.online_=!0,t.trigger("online",!0))}),!1),window.addEventListener("offline",(function(){t.online_&&(t.online_=!1,t.trigger("online",!1))}),!1)),t}return s.__extends(t,e),t.getInstance=function(){return new t},t.prototype.getInitialEvent=function(e){return u.assert("online"===e,"Unknown event type: "+e),[this.online_]},t.prototype.currentlyOnline=function(){return this.online_},t}(Bt),Vt=function(){function e(e){this.onMessage_=e,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}return e.prototype.closeAfter=function(e,t){this.closeAfterResponse=e,this.onClose=t,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)},e.prototype.handleResponse=function(e,t){var n=this;this.pendingResponses[e]=t;for(var r=function(){var e=i.pendingResponses[i.currentResponseNum];delete i.pendingResponses[i.currentResponseNum];for(var t=function(t){e[t]&&W((function(){n.onMessage_(e[t])}))},r=0;r<e.length;++r)t(r);if(i.currentResponseNum===i.closeAfterResponse)return i.onClose&&(i.onClose(),i.onClose=null),"break";i.currentResponseNum++},i=this;this.pendingResponses[this.currentResponseNum];){if("break"===r())break}},e}(),Gt=function(){function e(e,t,n,r){this.connId=e,this.repoInfo=t,this.transportSessionId=n,this.lastSessionId=r,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=C(e),this.stats_=Lt.getCollection(t),this.urlFn=function(e){return t.connectionURL("long_polling",e)}}return e.prototype.open=function(e,t){var n=this;this.curSegmentNum=0,this.onDisconnect_=t,this.myPacketOrderer=new Vt(e),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout((function(){n.log_("Timed out trying to connect."),n.onClosed_(),n.connectTimeoutTimer_=null}),Math.floor(3e4)),function(e){if(u.isNodeSdk()||"complete"===document.readyState)e();else{var t=!1,n=function(){document.body?t||(t=!0,e()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",(function(){"complete"===document.readyState&&n()})),window.attachEvent("onload",n))}}((function(){if(!n.isClosed_){n.scriptTagHolder=new qt((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=s.__read(e,5),i=r[0],o=r[1],a=r[2];r[3],r[4];if(n.incrementIncomingBytes_(e),n.scriptTagHolder)if(n.connectTimeoutTimer_&&(clearTimeout(n.connectTimeoutTimer_),n.connectTimeoutTimer_=null),n.everConnected_=!0,"start"===i)n.id=o,n.password=a;else{if("close"!==i)throw new Error("Unrecognized command received: "+i);o?(n.scriptTagHolder.sendNewPolls=!1,n.myPacketOrderer.closeAfter(o,(function(){n.onClosed_()}))):n.onClosed_()}}),(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=s.__read(e,2),i=r[0],o=r[1];n.incrementIncomingBytes_(e),n.myPacketOrderer.handleResponse(i,o)}),(function(){n.onClosed_()}),n.urlFn);var e={start:"t"};e.ser=Math.floor(1e8*Math.random()),n.scriptTagHolder.uniqueCallbackIdentifier&&(e.cb=n.scriptTagHolder.uniqueCallbackIdentifier),e.v="5",n.transportSessionId&&(e.s=n.transportSessionId),n.lastSessionId&&(e.ls=n.lastSessionId),"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(e.r="f");var t=n.urlFn(e);n.log_("Connecting via long-poll to "+t),n.scriptTagHolder.addTag(t,(function(){}))}}))},e.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)},e.forceAllow=function(){e.forceAllow_=!0},e.forceDisallow=function(){e.forceDisallow_=!0},e.isAvailable=function(){return!u.isNodeSdk()&&(!!e.forceAllow_||!(e.forceDisallow_||"undefined"==typeof document||null==document.createElement||"object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href)||"object"==typeof Windows&&"object"==typeof Windows.UI))},e.prototype.markConnectionHealthy=function(){},e.prototype.shutdown_=function(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)},e.prototype.onClosed_=function(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))},e.prototype.close=function(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())},e.prototype.send=function(e){var t=u.stringify(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);for(var n=u.base64Encode(t),r=M(n,1840),i=0;i<r.length;i++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,r.length,r[i]),this.curSegmentNum++},e.prototype.addDisconnectPingFrame=function(e,t){if(!u.isNodeSdk()){this.myDisconnFrame=document.createElement("iframe");var n={dframe:"t"};n.id=e,n.pw=t,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}},e.prototype.incrementIncomingBytes_=function(e){var t=u.stringify(e).length;this.bytesReceived+=t,this.stats_.incrementCounter("bytes_received",t)},e}(),qt=function(){function e(t,n,r,i){if(this.onDisconnect=r,this.urlFn=i,this.outstandingRequests=new Set,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0,u.isNodeSdk())this.commandCB=t,this.onMessageCB=n;else{this.uniqueCallbackIdentifier=y(),window["pLPCommand"+this.uniqueCallbackIdentifier]=t,window["pRTLPCB"+this.uniqueCallbackIdentifier]=n,this.myIFrame=e.createIFrame_();var o="";if(this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,"javascript:".length))o='<script>document.domain="'+document.domain+'";<\/script>';var a="<html><body>"+o+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(a),this.myIFrame.doc.close()}catch(e){T("frame writing exception"),e.stack&&T(e.stack),T(e)}}}return e.createIFrame_=function(){var e=document.createElement("iframe");if(e.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(e);try{e.contentWindow.document||T("No IE domain setting required")}catch(n){var t=document.domain;e.src="javascript:void((function(){document.open();document.domain='"+t+"';document.close();})())"}return e.contentDocument?e.doc=e.contentDocument:e.contentWindow?e.doc=e.contentWindow.document:e.document&&(e.doc=e.document),e},e.prototype.close=function(){var e=this;this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.innerHTML="",setTimeout((function(){null!==e.myIFrame&&(document.body.removeChild(e.myIFrame),e.myIFrame=null)}),Math.floor(0)));var t=this.onDisconnect;t&&(this.onDisconnect=null,t())},e.prototype.startLongPoll=function(e,t){for(this.myID=e,this.myPW=t,this.alive=!0;this.newRequest_(););},e.prototype.newRequest_=function(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.size<(this.pendingSegs.length>0?2:1)){this.currentSerial++;var e={};e.id=this.myID,e.pw=this.myPW,e.ser=this.currentSerial;for(var t=this.urlFn(e),n="",r=0;this.pendingSegs.length>0;){if(!(this.pendingSegs[0].d.length+30+n.length<=1870))break;var i=this.pendingSegs.shift();n=n+"&seg"+r+"="+i.seg+"&ts"+r+"="+i.ts+"&d"+r+"="+i.d,r++}return t+=n,this.addLongPollTag_(t,this.currentSerial),!0}return!1},e.prototype.enqueueSegment=function(e,t,n){this.pendingSegs.push({seg:e,ts:t,d:n}),this.alive&&this.newRequest_()},e.prototype.addLongPollTag_=function(e,t){var n=this;this.outstandingRequests.add(t);var r=function(){n.outstandingRequests.delete(t),n.newRequest_()},i=setTimeout(r,Math.floor(25e3));this.addTag(e,(function(){clearTimeout(i),r()}))},e.prototype.addTag=function(e,t){var n=this;u.isNodeSdk()?this.doNodeLongPoll(e,t):setTimeout((function(){try{if(!n.sendNewPolls)return;var r=n.myIFrame.doc.createElement("script");r.type="text/javascript",r.async=!0,r.src=e,r.onload=r.onreadystatechange=function(){var e=r.readyState;e&&"loaded"!==e&&"complete"!==e||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),t())},r.onerror=function(){T("Long-poll script failed to load: "+e),n.sendNewPolls=!1,n.close()},n.myIFrame.doc.body.appendChild(r)}catch(e){}}),Math.floor(1))},e}(),zt="";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Qt=null;"undefined"!=typeof MozWebSocket?Qt=MozWebSocket:"undefined"!=typeof WebSocket&&(Qt=WebSocket);var Yt=function(){function e(t,n,r,i){this.connId=t,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=C(this.connId),this.stats_=Lt.getCollection(n),this.connURL=e.connectionURL_(n,r,i)}return e.connectionURL_=function(e,t,n){var r={v:"5"};return!u.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(r.r="f"),t&&(r.s=t),n&&(r.ls=n),e.connectionURL("websocket",r)},e.prototype.open=function(e,t){var n=this;this.onDisconnect=t,this.onMessage=e,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,d.set("previous_websocket_failure",!0);try{if(u.isNodeSdk()){var i=u.CONSTANTS.NODE_ADMIN?"AdminNode":"Node",o={headers:{"User-Agent":"Firebase/5/"+zt+"/"+r.platform+"/"+i}},a=r.env,s=0===this.connURL.indexOf("wss://")?a.HTTPS_PROXY||a.https_proxy:a.HTTP_PROXY||a.http_proxy;s&&(o.proxy={origin:s}),this.mySock=new Qt(this.connURL,[],o)}else this.mySock=new Qt(this.connURL)}catch(e){this.log_("Error instantiating WebSocket.");var l=e.message||e.data;return l&&this.log_(l),void this.onClosed_()}this.mySock.onopen=function(){n.log_("Websocket connected."),n.everConnected_=!0},this.mySock.onclose=function(){n.log_("Websocket connection was disconnected."),n.mySock=null,n.onClosed_()},this.mySock.onmessage=function(e){n.handleIncomingFrame(e)},this.mySock.onerror=function(e){n.log_("WebSocket error.  Closing connection.");var t=e.message||e.data;t&&n.log_(t),n.onClosed_()}},e.prototype.start=function(){},e.forceDisallow=function(){e.forceDisallow_=!0},e.isAvailable=function(){var t=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var n=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);n&&n.length>1&&parseFloat(n[1])<4.4&&(t=!0)}return!t&&null!==Qt&&!e.forceDisallow_},e.previouslyFailed=function(){return d.isInMemoryStorage||!0===d.get("previous_websocket_failure")},e.prototype.markConnectionHealthy=function(){d.remove("previous_websocket_failure")},e.prototype.appendFrame_=function(e){if(this.frames.push(e),this.frames.length===this.totalFrames){var t=this.frames.join("");this.frames=null;var n=u.jsonEval(t);this.onMessage(n)}},e.prototype.handleNewFrameCount_=function(e){this.totalFrames=e,this.frames=[]},e.prototype.extractFrameCount_=function(e){if(u.assert(null===this.frames,"We already have a frame buffer"),e.length<=6){var t=Number(e);if(!isNaN(t))return this.handleNewFrameCount_(t),null}return this.handleNewFrameCount_(1),e},e.prototype.handleIncomingFrame=function(e){if(null!==this.mySock){var t=e.data;if(this.bytesReceived+=t.length,this.stats_.incrementCounter("bytes_received",t.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(t);else{var n=this.extractFrameCount_(t);null!==n&&this.appendFrame_(n)}}},e.prototype.send=function(e){this.resetKeepAlive();var t=u.stringify(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);var n=M(t,16384);n.length>1&&this.sendString_(String(n.length));for(var r=0;r<n.length;r++)this.sendString_(n[r])},e.prototype.shutdown_=function(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)},e.prototype.onClosed_=function(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))},e.prototype.close=function(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())},e.prototype.resetKeepAlive=function(){var e=this;clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval((function(){e.mySock&&e.sendString_("0"),e.resetKeepAlive()}),Math.floor(45e3))},e.prototype.sendString_=function(e){try{this.mySock.send(e)}catch(e){this.log_("Exception thrown from WebSocket.send():",e.message||e.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}},e.responsesRequiredToBeHealthy=2,e.healthyTimeout=3e4,e}(),$t=function(){function e(e){this.initTransports_(e)}return Object.defineProperty(e,"ALL_TRANSPORTS",{get:function(){return[Gt,Yt]},enumerable:!0,configurable:!0}),e.prototype.initTransports_=function(t){var n,r,i=Yt&&Yt.isAvailable(),o=i&&!Yt.previouslyFailed();if(t.webSocketOnly&&(i||O("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),o=!0),o)this.transports_=[Yt];else{var a=this.transports_=[];try{for(var u=s.__values(e.ALL_TRANSPORTS),l=u.next();!l.done;l=u.next()){var c=l.value;c&&c.isAvailable()&&a.push(c)}}catch(e){n={error:e}}finally{try{l&&!l.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}},e.prototype.initialTransport=function(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")},e.prototype.upgradeTransport=function(){return this.transports_.length>1?this.transports_[1]:null},e}(),Xt=function(){function e(e,t,n,r,i,o,a){this.id=e,this.repoInfo_=t,this.onMessage_=n,this.onReady_=r,this.onDisconnect_=i,this.onKill_=o,this.lastSessionId=a,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=C("c:"+this.id+":"),this.transportManager_=new $t(t),this.log_("Connection created"),this.start_()}return e.prototype.start_=function(){var e=this,t=this.transportManager_.initialTransport();this.conn_=new t(this.nextTransportId_(),this.repoInfo_,void 0,this.lastSessionId),this.primaryResponsesRequired_=t.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.conn_),r=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout((function(){e.conn_&&e.conn_.open(n,r)}),Math.floor(0));var i=t.healthyTimeout||0;i>0&&(this.healthyTimeout_=B((function(){e.healthyTimeout_=null,e.isHealthy_||(e.conn_&&e.conn_.bytesReceived>102400?(e.log_("Connection exceeded healthy timeout but has received "+e.conn_.bytesReceived+" bytes.  Marking connection healthy."),e.isHealthy_=!0,e.conn_.markConnectionHealthy()):e.conn_&&e.conn_.bytesSent>10240?e.log_("Connection exceeded healthy timeout but has sent "+e.conn_.bytesSent+" bytes.  Leaving connection alive."):(e.log_("Closing unhealthy connection after timeout."),e.close()))}),Math.floor(i)))},e.prototype.nextTransportId_=function(){return"c:"+this.id+":"+this.connectionCount++},e.prototype.disconnReceiver_=function(e){var t=this;return function(n){e===t.conn_?t.onConnectionLost_(n):e===t.secondaryConn_?(t.log_("Secondary connection lost."),t.onSecondaryConnectionLost_()):t.log_("closing an old connection")}},e.prototype.connReceiver_=function(e){var t=this;return function(n){2!==t.state_&&(e===t.rx_?t.onPrimaryMessageReceived_(n):e===t.secondaryConn_?t.onSecondaryMessageReceived_(n):t.log_("message on old connection"))}},e.prototype.sendRequest=function(e){var t={t:"d",d:e};this.sendData_(t)},e.prototype.tryCleanupConnection=function(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)},e.prototype.onSecondaryControl_=function(e){if("t"in e){var t=e.t;"a"===t?this.upgradeIfSecondaryHealthy_():"r"===t?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===t&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}},e.prototype.onSecondaryMessageReceived_=function(e){var t=N("t",e),n=N("d",e);if("c"===t)this.onSecondaryControl_(n);else{if("d"!==t)throw new Error("Unknown protocol layer: "+t);this.pendingDataMessages.push(n)}},e.prototype.upgradeIfSecondaryHealthy_=function(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))},e.prototype.proceedWithUpgrade_=function(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()},e.prototype.onPrimaryMessageReceived_=function(e){var t=N("t",e),n=N("d",e);"c"===t?this.onControl_(n):"d"===t&&this.onDataMessage_(n)},e.prototype.onDataMessage_=function(e){this.onPrimaryResponse_(),this.onMessage_(e)},e.prototype.onPrimaryResponse_=function(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))},e.prototype.onControl_=function(e){var t=N("t",e);if("d"in e){var n=e.d;if("h"===t)this.onHandshake_(n);else if("n"===t){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(var r=0;r<this.pendingDataMessages.length;++r)this.onDataMessage_(this.pendingDataMessages[r]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===t?this.onConnectionShutdown_(n):"r"===t?this.onReset_(n):"e"===t?S("Server Error: "+n):"o"===t?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):S("Unknown control packet command: "+t)}},e.prototype.onHandshake_=function(e){var t=e.ts,n=e.v,r=e.h;this.sessionId=e.s,this.repoInfo_.updateHost(r),0===this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,t),"5"!==n&&O("Protocol version mismatch detected"),this.tryStartUpgrade_())},e.prototype.tryStartUpgrade_=function(){var e=this.transportManager_.upgradeTransport();e&&this.startUpgrade_(e)},e.prototype.startUpgrade_=function(e){var t=this;this.secondaryConn_=new e(this.nextTransportId_(),this.repoInfo_,this.sessionId),this.secondaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.secondaryConn_),r=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(n,r),B((function(){t.secondaryConn_&&(t.log_("Timed out trying to upgrade."),t.secondaryConn_.close())}),Math.floor(6e4))},e.prototype.onReset_=function(e){this.log_("Reset packet received.  New host: "+e),this.repoInfo_.updateHost(e),1===this.state_?this.close():(this.closeConnections_(),this.start_())},e.prototype.onConnectionEstablished_=function(e,t){var n=this;this.log_("Realtime connection established."),this.conn_=e,this.state_=1,this.onReady_&&(this.onReady_(t,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):B((function(){n.sendPingOnPrimaryIfNecessary_()}),Math.floor(5e3))},e.prototype.sendPingOnPrimaryIfNecessary_=function(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))},e.prototype.onSecondaryConnectionLost_=function(){var e=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==e&&this.rx_!==e||this.close()},e.prototype.onConnectionLost_=function(e){this.conn_=null,e||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(d.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()},e.prototype.onConnectionShutdown_=function(e){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(e),this.onKill_=null),this.onDisconnect_=null,this.close()},e.prototype.sendData_=function(e){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(e)},e.prototype.close=function(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))},e.prototype.closeConnections_=function(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)},e}(),Jt=function(){function e(){}return e.prototype.put=function(e,t,n,r){},e.prototype.merge=function(e,t,n,r){},e.prototype.refreshAuthToken=function(e){},e.prototype.onDisconnectPut=function(e,t,n){},e.prototype.onDisconnectMerge=function(e,t,n){},e.prototype.onDisconnectCancel=function(e,t){},e.prototype.reportStats=function(e){},e}(),Zt=function(e){function t(n,r,i,o,a,s){var l=e.call(this)||this;if(l.repoInfo_=n,l.onDataUpdate_=r,l.onConnectStatus_=i,l.onServerInfoUpdate_=o,l.authTokenProvider_=a,l.authOverride_=s,l.id=t.nextPersistentConnectionId_++,l.log_=C("p:"+l.id+":"),l.interruptReasons_={},l.listens=new Map,l.outstandingPuts_=[],l.outstandingPutCount_=0,l.onDisconnectRequestQueue_=[],l.connected_=!1,l.reconnectDelay_=1e3,l.maxReconnectDelay_=3e5,l.securityDebugCallback_=null,l.lastSessionId=null,l.establishConnectionTimer_=null,l.visible_=!1,l.requestCBHash_={},l.requestNumber_=0,l.realtime_=null,l.authToken_=null,l.forceTokenRefresh_=!1,l.invalidAuthTokenCount_=0,l.firstConnection_=!0,l.lastConnectionAttemptTime_=null,l.lastConnectionEstablishedTime_=null,s&&!u.isNodeSdk())throw new Error("Auth override specified in options, but not supported on non Node.js platforms");return l.scheduleConnect_(0),Ht.getInstance().on("visible",l.onVisible_,l),-1===n.host.indexOf("fblocal")&&Kt.getInstance().on("online",l.onOnline_,l),l}return s.__extends(t,e),t.prototype.sendRequest=function(e,t,n){var r=++this.requestNumber_,i={r:r,a:e,b:t};this.log_(u.stringify(i)),u.assert(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(i),n&&(this.requestCBHash_[r]=n)},t.prototype.listen=function(e,t,n,r){var i=e.queryIdentifier(),o=e.path.toString();this.log_("Listen called for "+o+" "+i),this.listens.has(o)||this.listens.set(o,new Map),u.assert(e.getQueryParams().isDefault()||!e.getQueryParams().loadsAllData(),"listen() called for non-default but complete query"),u.assert(!this.listens.get(o).has(i),"listen() called twice for same path/queryId.");var a={onComplete:r,hashFn:t,query:e,tag:n};this.listens.get(o).set(i,a),this.connected_&&this.sendListen_(a)},t.prototype.sendListen_=function(e){var n=this,r=e.query,i=r.path.toString(),o=r.queryIdentifier();this.log_("Listen on "+i+" for "+o);var a={p:i};e.tag&&(a.q=r.queryObject(),a.t=e.tag),a.h=e.hashFn(),this.sendRequest("q",a,(function(a){var s=a.d,u=a.s;t.warnOnListenWarnings_(s,r),(n.listens.get(i)&&n.listens.get(i).get(o))===e&&(n.log_("listen response",a),"ok"!==u&&n.removeListen_(i,o),e.onComplete&&e.onComplete(u,s))}))},t.warnOnListenWarnings_=function(e,t){if(e&&"object"==typeof e&&u.contains(e,"w")){var n=u.safeGet(e,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){var r='".indexOn": "'+t.getQueryParams().getIndex().toString()+'"',i=t.path.toString();O("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding "+r+" at "+i+" to your security rules for better performance.")}}},t.prototype.refreshAuthToken=function(e){this.authToken_=e,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},(function(){})),this.reduceReconnectDelayIfAdminCredential_(e)},t.prototype.reduceReconnectDelayIfAdminCredential_=function(e){(e&&40===e.length||u.isAdmin(e))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)},t.prototype.tryAuth=function(){var e=this;if(this.connected_&&this.authToken_){var t=this.authToken_,n=u.isValidFormat(t)?"auth":"gauth",r={cred:t};null===this.authOverride_?r.noauth=!0:"object"==typeof this.authOverride_&&(r.authvar=this.authOverride_),this.sendRequest(n,r,(function(n){var r=n.s,i=n.d||"error";e.authToken_===t&&("ok"===r?e.invalidAuthTokenCount_=0:e.onAuthRevoked_(r,i))}))}},t.prototype.unlisten=function(e,t){var n=e.path.toString(),r=e.queryIdentifier();this.log_("Unlisten called for "+n+" "+r),u.assert(e.getQueryParams().isDefault()||!e.getQueryParams().loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,r)&&this.connected_&&this.sendUnlisten_(n,r,e.queryObject(),t)},t.prototype.sendUnlisten_=function(e,t,n,r){this.log_("Unlisten on "+e+" for "+t);var i={p:e};r&&(i.q=n,i.t=r),this.sendRequest("n",i)},t.prototype.onDisconnectPut=function(e,t,n){this.connected_?this.sendOnDisconnect_("o",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"o",data:t,onComplete:n})},t.prototype.onDisconnectMerge=function(e,t,n){this.connected_?this.sendOnDisconnect_("om",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"om",data:t,onComplete:n})},t.prototype.onDisconnectCancel=function(e,t){this.connected_?this.sendOnDisconnect_("oc",e,null,t):this.onDisconnectRequestQueue_.push({pathString:e,action:"oc",data:null,onComplete:t})},t.prototype.sendOnDisconnect_=function(e,t,n,r){var i={p:t,d:n};this.log_("onDisconnect "+e,i),this.sendRequest(e,i,(function(e){r&&setTimeout((function(){r(e.s,e.d)}),Math.floor(0))}))},t.prototype.put=function(e,t,n,r){this.putInternal("p",e,t,n,r)},t.prototype.merge=function(e,t,n,r){this.putInternal("m",e,t,n,r)},t.prototype.putInternal=function(e,t,n,r,i){var o={p:t,d:n};void 0!==i&&(o.h=i),this.outstandingPuts_.push({action:e,request:o,onComplete:r}),this.outstandingPutCount_++;var a=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(a):this.log_("Buffering put: "+t)},t.prototype.sendPut_=function(e){var t=this,n=this.outstandingPuts_[e].action,r=this.outstandingPuts_[e].request,i=this.outstandingPuts_[e].onComplete;this.outstandingPuts_[e].queued=this.connected_,this.sendRequest(n,r,(function(r){t.log_(n+" response",r),delete t.outstandingPuts_[e],t.outstandingPutCount_--,0===t.outstandingPutCount_&&(t.outstandingPuts_=[]),i&&i(r.s,r.d)}))},t.prototype.reportStats=function(e){var t=this;if(this.connected_){var n={c:e};this.log_("reportStats",n),this.sendRequest("s",n,(function(e){if("ok"!==e.s){var n=e.d;t.log_("reportStats","Error sending stats: "+n)}}))}},t.prototype.onDataMessage_=function(e){if("r"in e){this.log_("from server: "+u.stringify(e));var t=e.r,n=this.requestCBHash_[t];n&&(delete this.requestCBHash_[t],n(e.b))}else{if("error"in e)throw"A server-side error has occurred: "+e.error;"a"in e&&this.onDataPush_(e.a,e.b)}},t.prototype.onDataPush_=function(e,t){this.log_("handleServerMessage",e,t),"d"===e?this.onDataUpdate_(t.p,t.d,!1,t.t):"m"===e?this.onDataUpdate_(t.p,t.d,!0,t.t):"c"===e?this.onListenRevoked_(t.p,t.q):"ac"===e?this.onAuthRevoked_(t.s,t.d):"sd"===e?this.onSecurityDebugPacket_(t):S("Unrecognized action received from server: "+u.stringify(e)+"\nAre you using the latest client?")},t.prototype.onReady_=function(e,t){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(e),this.lastSessionId=t,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)},t.prototype.scheduleConnect_=function(e){var t=this;u.assert(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout((function(){t.establishConnectionTimer_=null,t.establishConnection_()}),Math.floor(e))},t.prototype.onVisible_=function(e){e&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=1e3,this.realtime_||this.scheduleConnect_(0)),this.visible_=e},t.prototype.onOnline_=function(e){e?(this.log_("Browser went online."),this.reconnectDelay_=1e3,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())},t.prototype.onRealtimeDisconnect_=function(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){if(this.visible_){if(this.lastConnectionEstablishedTime_){(new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=1e3),this.lastConnectionEstablishedTime_=null}}else this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime();var e=(new Date).getTime()-this.lastConnectionAttemptTime_,t=Math.max(0,this.reconnectDelay_-e);t=Math.random()*t,this.log_("Trying to reconnect in "+t+"ms"),this.scheduleConnect_(t),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)},t.prototype.establishConnection_=function(){if(this.shouldReconnect_()){this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null;var e=this.onDataMessage_.bind(this),n=this.onReady_.bind(this),r=this.onRealtimeDisconnect_.bind(this),i=this.id+":"+t.nextConnectionId_++,o=this,a=this.lastSessionId,s=!1,l=null,c=function(){l?l.close():(s=!0,r())};this.realtime_={close:c,sendRequest:function(e){u.assert(l,"sendRequest call when we're not connected not allowed."),l.sendRequest(e)}};var f=this.forceTokenRefresh_;this.forceTokenRefresh_=!1,this.authTokenProvider_.getToken(f).then((function(t){s?T("getToken() completed but was canceled"):(T("getToken() completed. Creating connection."),o.authToken_=t&&t.accessToken,l=new Xt(i,o.repoInfo_,e,n,r,(function(e){O(e+" ("+o.repoInfo_.toString()+")"),o.interrupt("server_kill")}),a))})).then(null,(function(e){o.log_("Failed to get token: "+e),s||(u.CONSTANTS.NODE_ADMIN&&O(e),c())}))}},t.prototype.interrupt=function(e){T("Interrupting connection for reason: "+e),this.interruptReasons_[e]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())},t.prototype.resume=function(e){T("Resuming connection for reason: "+e),delete this.interruptReasons_[e],u.isEmpty(this.interruptReasons_)&&(this.reconnectDelay_=1e3,this.realtime_||this.scheduleConnect_(0))},t.prototype.handleTimestamp_=function(e){var t=e-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:t})},t.prototype.cancelSentTransactions_=function(){for(var e=0;e<this.outstandingPuts_.length;e++){var t=this.outstandingPuts_[e];t&&"h"in t.request&&t.queued&&(t.onComplete&&t.onComplete("disconnect"),delete this.outstandingPuts_[e],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])},t.prototype.onListenRevoked_=function(e,t){var n;n=t?t.map((function(e){return R(e)})).join("$"):"default";var r=this.removeListen_(e,n);r&&r.onComplete&&r.onComplete("permission_denied")},t.prototype.removeListen_=function(e,t){var n,r=new H(e).toString();if(this.listens.has(r)){var i=this.listens.get(r);n=i.get(t),i.delete(t),0===i.size&&this.listens.delete(r)}else n=void 0;return n},t.prototype.onAuthRevoked_=function(e,t){T("Auth token revoked: "+e+"/"+t),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==e&&"permission_denied"!==e||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))},t.prototype.onSecurityDebugPacket_=function(e){this.securityDebugCallback_?this.securityDebugCallback_(e):"msg"in e&&console.log("FIREBASE: "+e.msg.replace("\n","\nFIREBASE: "))},t.prototype.restoreState_=function(){var e,t,n,r;this.tryAuth();try{for(var i=s.__values(this.listens.values()),o=i.next();!o.done;o=i.next()){var a=o.value;try{for(var u=(n=void 0,s.__values(a.values())),l=u.next();!l.done;l=u.next()){var c=l.value;this.sendListen_(c)}}catch(e){n={error:e}}finally{try{l&&!l.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}for(var f=0;f<this.outstandingPuts_.length;f++)this.outstandingPuts_[f]&&this.sendPut_(f);for(;this.onDisconnectRequestQueue_.length;){var h=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(h.action,h.pathString,h.data,h.onComplete)}},t.prototype.sendConnectStats_=function(){var e={},t="js";u.CONSTANTS.NODE_ADMIN?t="admin_node":u.CONSTANTS.NODE_CLIENT&&(t="node"),e["sdk."+t+"."+zt.replace(/\./g,"-")]=1,u.isMobileCordova()?e["framework.cordova"]=1:u.isReactNative()&&(e["framework.reactnative"]=1),this.reportStats(e)},t.prototype.shouldReconnect_=function(){var e=Kt.getInstance().currentlyOnline();return u.isEmpty(this.interruptReasons_)&&e},t.nextPersistentConnectionId_=0,t.nextConnectionId_=0,t}(Jt),en=function(e){function t(t,n,r){var i=e.call(this)||this;return i.repoInfo_=t,i.onDataUpdate_=n,i.authTokenProvider_=r,i.log_=C("p:rest:"),i.listens_={},i}return s.__extends(t,e),t.prototype.reportStats=function(e){throw new Error("Method not implemented.")},t.getListenId_=function(e,t){return void 0!==t?"tag$"+t:(u.assert(e.getQueryParams().isDefault(),"should have a tag if it's not a default query."),e.path.toString())},t.prototype.listen=function(e,n,r,i){var o=this,a=e.path.toString();this.log_("Listen called for "+a+" "+e.queryIdentifier());var s=t.getListenId_(e,r),l={};this.listens_[s]=l;var c=e.getQueryParams().toRestQueryStringParameters();this.restRequest_(a+".json",c,(function(e,t){var n=t;(404===e&&(n=null,e=null),null===e&&o.onDataUpdate_(a,n,!1,r),u.safeGet(o.listens_,s)===l)&&i(e?401===e?"permission_denied":"rest_error:"+e:"ok",null)}))},t.prototype.unlisten=function(e,n){var r=t.getListenId_(e,n);delete this.listens_[r]},t.prototype.refreshAuthToken=function(e){},t.prototype.restRequest_=function(e,t,n){var r=this;void 0===t&&(t={}),t.format="export",this.authTokenProvider_.getToken(!1).then((function(i){var o=i&&i.accessToken;o&&(t.auth=o);var a=(r.repoInfo_.secure?"https://":"http://")+r.repoInfo_.host+e+"?ns="+r.repoInfo_.namespace+u.querystring(t);r.log_("Sending REST request for "+a);var s=new XMLHttpRequest;s.onreadystatechange=function(){if(n&&4===s.readyState){r.log_("REST Response for "+a+" received. status:",s.status,"response:",s.responseText);var e=null;if(s.status>=200&&s.status<300){try{e=u.jsonEval(s.responseText)}catch(e){O("Failed to parse JSON response for "+a+": "+s.responseText)}n(null,e)}else 401!==s.status&&404!==s.status&&O("Got unsuccessful REST response for "+a+" Status: "+s.status),n(s.status);n=null}},s.open("GET",a,!0),s.send()}))},t}(Jt),tn=function(){function e(e,t,n,r){var i=this;this.repoInfo_=e,this.app=n,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new Ut,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=new ut,this.persistentConnection_=null;var o=new Rt(n,r);if(this.stats_=Lt.getCollection(e),t||("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0)this.server_=new en(this.repoInfo_,this.onDataUpdate_.bind(this),o),setTimeout(this.onConnectStatus_.bind(this,!0),0);else{var a=n.options.databaseAuthVariableOverride;if(null!=a){if("object"!=typeof a)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{u.stringify(a)}catch(e){throw new Error("Invalid authOverride provided: "+e)}}this.persistentConnection_=new Zt(this.repoInfo_,this.onDataUpdate_.bind(this),this.onConnectStatus_.bind(this),this.onServerInfoUpdate_.bind(this),o,a),this.server_=this.persistentConnection_}o.addTokenChangeListener((function(e){i.server_.refreshAuthToken(e)})),this.statsReporter_=Lt.getOrCreateReporter(e,(function(){return new jt(i.stats_,i.server_)})),this.transactionsInit_(),this.infoData_=new Nt,this.infoSyncTree_=new Dt({startListening:function(e,t,n,r){var o=[],a=i.infoData_.getNode(e.path);return a.isEmpty()||(o=i.infoSyncTree_.applyServerOverwrite(e.path,a),setTimeout((function(){r("ok")}),0)),o},stopListening:function(){}}),this.updateInfo_("connected",!1),this.serverSyncTree_=new Dt({startListening:function(e,t,n,r){return i.server_.listen(e,n,t,(function(t,n){var o=r(t,n);i.eventQueue_.raiseEventsForChangedPath(e.path,o)})),[]},stopListening:function(e,t){i.server_.unlisten(e,t)}})}return e.prototype.toString=function(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host},e.prototype.name=function(){return this.repoInfo_.namespace},e.prototype.serverTime=function(){var e=this.infoData_.getNode(new H(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+e},e.prototype.generateServerValues=function(){return(e=(e={timestamp:this.serverTime()})||{}).timestamp=e.timestamp||(new Date).getTime(),e;var e},e.prototype.onDataUpdate_=function(e,t,n,r){this.dataUpdateCount++;var i=new H(e);t=this.interceptServerDataCallback_?this.interceptServerDataCallback_(e,t):t;var o=[];if(r)if(n){var a=u.map(t,(function(e){return Ke(e)}));o=this.serverSyncTree_.applyTaggedQueryMerge(i,a,r)}else{var s=Ke(t);o=this.serverSyncTree_.applyTaggedQueryOverwrite(i,s,r)}else if(n){var l=u.map(t,(function(e){return Ke(e)}));o=this.serverSyncTree_.applyServerMerge(i,l)}else{var c=Ke(t);o=this.serverSyncTree_.applyServerOverwrite(i,c)}var f=i;o.length>0&&(f=this.rerunTransactions_(i)),this.eventQueue_.raiseEventsForChangedPath(f,o)},e.prototype.interceptServerData_=function(e){this.interceptServerDataCallback_=e},e.prototype.onConnectStatus_=function(e){this.updateInfo_("connected",e),!1===e&&this.runOnDisconnectEvents_()},e.prototype.onServerInfoUpdate_=function(e){var t=this;L(e,(function(e,n){t.updateInfo_(e,n)}))},e.prototype.updateInfo_=function(e,t){var n=new H("/.info/"+e),r=Ke(t);this.infoData_.updateSnapshot(n,r);var i=this.infoSyncTree_.applyServerOverwrite(n,r);this.eventQueue_.raiseEventsForChangedPath(n,i)},e.prototype.getNextWriteId_=function(){return this.nextWriteId_++},e.prototype.setWithPriority=function(e,t,n,r){var i=this;this.log_("set",{path:e.toString(),value:t,priority:n});var o=this.generateServerValues(),a=Ke(t,n),s=this.serverSyncTree_.calcCompleteEventCache(e),u=ot(a,s,o),l=this.getNextWriteId_(),c=this.serverSyncTree_.applyUserOverwrite(e,u,l,!0);this.eventQueue_.queueEvents(c),this.server_.put(e.toString(),a.val(!0),(function(t,n){var o="ok"===t;o||O("set at "+e+" failed: "+t);var a=i.serverSyncTree_.ackUserWrite(l,!o);i.eventQueue_.raiseEventsForChangedPath(e,a),i.callOnCompleteCallback(r,t,n)}));var f=this.abortTransactions_(e);this.rerunTransactions_(f),this.eventQueue_.raiseEventsForChangedPath(f,[])},e.prototype.update=function(e,t,n){var r=this;this.log_("update",{path:e.toString(),value:t});var i=!0,o=this.generateServerValues(),a={};if(L(t,(function(t,n){i=!1,a[t]=it(e.child(t),Ke(n),r.serverSyncTree_,o)})),i)T("update() called with empty data.  Don't do anything."),this.callOnCompleteCallback(n,"ok");else{var s=this.getNextWriteId_(),u=this.serverSyncTree_.applyUserMerge(e,a,s);this.eventQueue_.queueEvents(u),this.server_.merge(e.toString(),t,(function(t,i){var o="ok"===t;o||O("update at "+e+" failed: "+t);var a=r.serverSyncTree_.ackUserWrite(s,!o),u=a.length>0?r.rerunTransactions_(e):e;r.eventQueue_.raiseEventsForChangedPath(u,a),r.callOnCompleteCallback(n,t,i)})),L(t,(function(t){var n=r.abortTransactions_(e.child(t));r.rerunTransactions_(n)})),this.eventQueue_.raiseEventsForChangedPath(e,[])}},e.prototype.runOnDisconnectEvents_=function(){var e=this;this.log_("onDisconnectEvents");var t=this.generateServerValues(),n=new ut;this.onDisconnect_.forEachTree(H.Empty,(function(r,i){var o=it(r,i,e.serverSyncTree_,t);n.remember(r,o)}));var r=[];n.forEachTree(H.Empty,(function(t,n){r=r.concat(e.serverSyncTree_.applyServerOverwrite(t,n));var i=e.abortTransactions_(t);e.rerunTransactions_(i)})),this.onDisconnect_=new ut,this.eventQueue_.raiseEventsForChangedPath(H.Empty,r)},e.prototype.onDisconnectCancel=function(e,t){var n=this;this.server_.onDisconnectCancel(e.toString(),(function(r,i){"ok"===r&&n.onDisconnect_.forget(e),n.callOnCompleteCallback(t,r,i)}))},e.prototype.onDisconnectSet=function(e,t,n){var r=this,i=Ke(t);this.server_.onDisconnectPut(e.toString(),i.val(!0),(function(t,o){"ok"===t&&r.onDisconnect_.remember(e,i),r.callOnCompleteCallback(n,t,o)}))},e.prototype.onDisconnectSetWithPriority=function(e,t,n,r){var i=this,o=Ke(t,n);this.server_.onDisconnectPut(e.toString(),o.val(!0),(function(t,n){"ok"===t&&i.onDisconnect_.remember(e,o),i.callOnCompleteCallback(r,t,n)}))},e.prototype.onDisconnectUpdate=function(e,t,n){var r=this;if(u.isEmpty(t))return T("onDisconnect().update() called with empty data.  Don't do anything."),void this.callOnCompleteCallback(n,"ok");this.server_.onDisconnectMerge(e.toString(),t,(function(i,o){"ok"===i&&L(t,(function(t,n){var i=Ke(n);r.onDisconnect_.remember(e.child(t),i)})),r.callOnCompleteCallback(n,i,o)}))},e.prototype.addEventCallbackForQuery=function(e,t){var n;n=".info"===e.path.getFront()?this.infoSyncTree_.addEventRegistration(e,t):this.serverSyncTree_.addEventRegistration(e,t),this.eventQueue_.raiseEventsAtPath(e.path,n)},e.prototype.removeEventCallbackForQuery=function(e,t){var n;n=".info"===e.path.getFront()?this.infoSyncTree_.removeEventRegistration(e,t):this.serverSyncTree_.removeEventRegistration(e,t),this.eventQueue_.raiseEventsAtPath(e.path,n)},e.prototype.interrupt=function(){this.persistentConnection_&&this.persistentConnection_.interrupt("repo_interrupt")},e.prototype.resume=function(){this.persistentConnection_&&this.persistentConnection_.resume("repo_interrupt")},e.prototype.stats=function(e){if(void 0===e&&(e=!1),"undefined"!=typeof console){var t;e?(this.statsListener_||(this.statsListener_=new Ft(this.stats_)),t=this.statsListener_.get()):t=this.stats_.get();var n=Object.keys(t).reduce((function(e,t){return Math.max(t.length,e)}),0);L(t,(function(e,t){for(var r=e,i=e.length;i<n+2;i++)r+=" ";console.log(r+t)}))}},e.prototype.statsIncrementCounter=function(e){this.stats_.incrementCounter(e),this.statsReporter_.includeStat(e)},e.prototype.log_=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="";this.persistentConnection_&&(n=this.persistentConnection_.id+":"),T.apply(void 0,s.__spread([n],e))},e.prototype.callOnCompleteCallback=function(e,t,n){e&&W((function(){if("ok"===t)e(null);else{var r=(t||"error").toUpperCase(),i=r;n&&(i+=": "+n);var o=new Error(i);o.code=r,e(o)}}))},Object.defineProperty(e.prototype,"database",{get:function(){return this.__database||(this.__database=new hn(this))},enumerable:!0,configurable:!0}),e}(),nn=function(){function e(t){this.indexedFilter_=new bt(t.getIndex()),this.index_=t.getIndex(),this.startPost_=e.getStartPost_(t),this.endPost_=e.getEndPost_(t)}return e.prototype.getStartPost=function(){return this.startPost_},e.prototype.getEndPost=function(){return this.endPost_},e.prototype.matches=function(e){return this.index_.compare(this.getStartPost(),e)<=0&&this.index_.compare(e,this.getEndPost())<=0},e.prototype.updateChild=function(e,t,n,r,i,o){return this.matches(new ye(t,n))||(n=Be.EMPTY_NODE),this.indexedFilter_.updateChild(e,t,n,r,i,o)},e.prototype.updateFullNode=function(e,t,n){t.isLeafNode()&&(t=Be.EMPTY_NODE);var r=t.withIndex(this.index_);r=r.updatePriority(Be.EMPTY_NODE);var i=this;return t.forEachChild(ke,(function(e,t){i.matches(new ye(e,t))||(r=r.updateImmediateChild(e,Be.EMPTY_NODE))})),this.indexedFilter_.updateFullNode(e,r,n)},e.prototype.updatePriority=function(e,t){return e},e.prototype.filtersNodes=function(){return!0},e.prototype.getIndexedFilter=function(){return this.indexedFilter_},e.prototype.getIndex=function(){return this.index_},e.getStartPost_=function(e){if(e.hasStart()){var t=e.getIndexStartName();return e.getIndex().makePost(e.getIndexStartValue(),t)}return e.getIndex().minPost()},e.getEndPost_=function(e){if(e.hasEnd()){var t=e.getIndexEndName();return e.getIndex().makePost(e.getIndexEndValue(),t)}return e.getIndex().maxPost()},e}(),rn=function(){function e(e){this.rangedFilter_=new nn(e),this.index_=e.getIndex(),this.limit_=e.getLimit(),this.reverse_=!e.isViewFromLeft()}return e.prototype.updateChild=function(e,t,n,r,i,o){return this.rangedFilter_.matches(new ye(t,n))||(n=Be.EMPTY_NODE),e.getImmediateChild(t).equals(n)?e:e.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(e,t,n,r,i,o):this.fullLimitUpdateChild_(e,t,n,i,o)},e.prototype.updateFullNode=function(e,t,n){var r;if(t.isLeafNode()||t.isEmpty())r=Be.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<t.numChildren()&&t.isIndexed(this.index_)){r=Be.EMPTY_NODE.withIndex(this.index_);var i=void 0;i=this.reverse_?t.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):t.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);for(var o=0;i.hasNext()&&o<this.limit_;){var a=i.getNext();if(!(this.reverse_?this.index_.compare(this.rangedFilter_.getStartPost(),a)<=0:this.index_.compare(a,this.rangedFilter_.getEndPost())<=0))break;r=r.updateImmediateChild(a.name,a.node),o++}}else{r=(r=t.withIndex(this.index_)).updatePriority(Be.EMPTY_NODE);var s=void 0,u=void 0,l=void 0;i=void 0;if(this.reverse_){i=r.getReverseIterator(this.index_),s=this.rangedFilter_.getEndPost(),u=this.rangedFilter_.getStartPost();var c=this.index_.getCompare();l=function(e,t){return c(t,e)}}else i=r.getIterator(this.index_),s=this.rangedFilter_.getStartPost(),u=this.rangedFilter_.getEndPost(),l=this.index_.getCompare();o=0;for(var f=!1;i.hasNext();){a=i.getNext();!f&&l(s,a)<=0&&(f=!0),f&&o<this.limit_&&l(a,u)<=0?o++:r=r.updateImmediateChild(a.name,Be.EMPTY_NODE)}}return this.rangedFilter_.getIndexedFilter().updateFullNode(e,r,n)},e.prototype.updatePriority=function(e,t){return e},e.prototype.filtersNodes=function(){return!0},e.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter()},e.prototype.getIndex=function(){return this.index_},e.prototype.fullLimitUpdateChild_=function(e,t,n,r,i){var o;if(this.reverse_){var a=this.index_.getCompare();o=function(e,t){return a(t,e)}}else o=this.index_.getCompare();var s=e;u.assert(s.numChildren()===this.limit_,"");var l=new ye(t,n),c=this.reverse_?s.getFirstChild(this.index_):s.getLastChild(this.index_),f=this.rangedFilter_.matches(l);if(s.hasChild(t)){for(var h=s.getImmediateChild(t),p=r.getChildAfterChild(this.index_,c,this.reverse_);null!=p&&(p.name===t||s.hasChild(p.name));)p=r.getChildAfterChild(this.index_,p,this.reverse_);var d=null==p?1:o(p,l);if(f&&!n.isEmpty()&&d>=0)return null!=i&&i.trackChildChange(mt.childChangedChange(t,n,h)),s.updateImmediateChild(t,n);null!=i&&i.trackChildChange(mt.childRemovedChange(t,h));var v=s.updateImmediateChild(t,Be.EMPTY_NODE);return null!=p&&this.rangedFilter_.matches(p)?(null!=i&&i.trackChildChange(mt.childAddedChange(p.name,p.node)),v.updateImmediateChild(p.name,p.node)):v}return n.isEmpty()?e:f&&o(c,l)>=0?(null!=i&&(i.trackChildChange(mt.childRemovedChange(c.name,c.node)),i.trackChildChange(mt.childAddedChange(t,n))),s.updateImmediateChild(t,n).updateImmediateChild(c.name,Be.EMPTY_NODE)):e},e}(),on=function(){function e(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=ke}return e.prototype.hasStart=function(){return this.startSet_},e.prototype.isViewFromLeft=function(){return""===this.viewFrom_?this.startSet_:this.viewFrom_===e.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT},e.prototype.getIndexStartValue=function(){return u.assert(this.startSet_,"Only valid if start has been set"),this.indexStartValue_},e.prototype.getIndexStartName=function(){return u.assert(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:k},e.prototype.hasEnd=function(){return this.endSet_},e.prototype.getIndexEndValue=function(){return u.assert(this.endSet_,"Only valid if end has been set"),this.indexEndValue_},e.prototype.getIndexEndName=function(){return u.assert(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:x},e.prototype.hasLimit=function(){return this.limitSet_},e.prototype.hasAnchoredLimit=function(){return this.limitSet_&&""!==this.viewFrom_},e.prototype.getLimit=function(){return u.assert(this.limitSet_,"Only valid if limit has been set"),this.limit_},e.prototype.getIndex=function(){return this.index_},e.prototype.copy_=function(){var t=new e;return t.limitSet_=this.limitSet_,t.limit_=this.limit_,t.startSet_=this.startSet_,t.indexStartValue_=this.indexStartValue_,t.startNameSet_=this.startNameSet_,t.indexStartName_=this.indexStartName_,t.endSet_=this.endSet_,t.indexEndValue_=this.indexEndValue_,t.endNameSet_=this.endNameSet_,t.indexEndName_=this.indexEndName_,t.index_=this.index_,t.viewFrom_=this.viewFrom_,t},e.prototype.limit=function(e){var t=this.copy_();return t.limitSet_=!0,t.limit_=e,t.viewFrom_="",t},e.prototype.limitToFirst=function(t){var n=this.copy_();return n.limitSet_=!0,n.limit_=t,n.viewFrom_=e.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT,n},e.prototype.limitToLast=function(t){var n=this.copy_();return n.limitSet_=!0,n.limit_=t,n.viewFrom_=e.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT,n},e.prototype.startAt=function(e,t){var n=this.copy_();return n.startSet_=!0,void 0===e&&(e=null),n.indexStartValue_=e,null!=t?(n.startNameSet_=!0,n.indexStartName_=t):(n.startNameSet_=!1,n.indexStartName_=""),n},e.prototype.endAt=function(e,t){var n=this.copy_();return n.endSet_=!0,void 0===e&&(e=null),n.indexEndValue_=e,void 0!==t?(n.endNameSet_=!0,n.indexEndName_=t):(n.endNameSet_=!1,n.indexEndName_=""),n},e.prototype.orderBy=function(e){var t=this.copy_();return t.index_=e,t},e.prototype.getQueryObject=function(){var t=e.WIRE_PROTOCOL_CONSTANTS_,n={};if(this.startSet_&&(n[t.INDEX_START_VALUE]=this.indexStartValue_,this.startNameSet_&&(n[t.INDEX_START_NAME]=this.indexStartName_)),this.endSet_&&(n[t.INDEX_END_VALUE]=this.indexEndValue_,this.endNameSet_&&(n[t.INDEX_END_NAME]=this.indexEndName_)),this.limitSet_){n[t.LIMIT]=this.limit_;var r=this.viewFrom_;""===r&&(r=this.isViewFromLeft()?t.VIEW_FROM_LEFT:t.VIEW_FROM_RIGHT),n[t.VIEW_FROM]=r}return this.index_!==ke&&(n[t.INDEX]=this.index_.toString()),n},e.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_)},e.prototype.isDefault=function(){return this.loadsAllData()&&this.index_===ke},e.prototype.getNodeFilter=function(){return this.loadsAllData()?new bt(this.getIndex()):this.hasLimit()?new rn(this):new nn(this)},e.prototype.toRestQueryStringParameters=function(){var t,n=e.REST_QUERY_CONSTANTS_,r={};return this.isDefault()||(this.index_===ke?t=n.PRIORITY_INDEX:this.index_===Ge?t=n.VALUE_INDEX:this.index_===be?t=n.KEY_INDEX:(u.assert(this.index_ instanceof qe,"Unrecognized index type!"),t=this.index_.toString()),r[n.ORDER_BY]=u.stringify(t),this.startSet_&&(r[n.START_AT]=u.stringify(this.indexStartValue_),this.startNameSet_&&(r[n.START_AT]+=","+u.stringify(this.indexStartName_))),this.endSet_&&(r[n.END_AT]=u.stringify(this.indexEndValue_),this.endNameSet_&&(r[n.END_AT]+=","+u.stringify(this.indexEndName_))),this.limitSet_&&(this.isViewFromLeft()?r[n.LIMIT_TO_FIRST]=this.limit_:r[n.LIMIT_TO_LAST]=this.limit_)),r},e.WIRE_PROTOCOL_CONSTANTS_={INDEX_START_VALUE:"sp",INDEX_START_NAME:"sn",INDEX_END_VALUE:"ep",INDEX_END_NAME:"en",LIMIT:"l",VIEW_FROM:"vf",VIEW_FROM_LEFT:"l",VIEW_FROM_RIGHT:"r",INDEX:"i"},e.REST_QUERY_CONSTANTS_={ORDER_BY:"orderBy",PRIORITY_INDEX:"$priority",VALUE_INDEX:"$value",KEY_INDEX:"$key",START_AT:"startAt",END_AT:"endAt",LIMIT_TO_FIRST:"limitToFirst",LIMIT_TO_LAST:"limitToLast"},e.DEFAULT=new e,e}(),an=function(e){function t(t,n){if(!(t instanceof tn))throw new Error("new Reference() no longer supported - use app.database().");return e.call(this,t,n,on.DEFAULT,!1)||this}return s.__extends(t,e),t.prototype.getKey=function(){return u.validateArgCount("Reference.key",0,0,arguments.length),this.path.isEmpty()?null:this.path.getBack()},t.prototype.child=function(e){return u.validateArgCount("Reference.child",1,1,arguments.length),"number"==typeof e?e=String(e):e instanceof H||(null===this.path.getFront()?ce("Reference.child",1,e,!1):le("Reference.child",1,e,!1)),new t(this.repo,this.path.child(e))},t.prototype.getParent=function(){u.validateArgCount("Reference.parent",0,0,arguments.length);var e=this.path.parent();return null===e?null:new t(this.repo,e)},t.prototype.getRoot=function(){u.validateArgCount("Reference.root",0,0,arguments.length);for(var e=this;null!==e.getParent();)e=e.getParent();return e},t.prototype.databaseProp=function(){return this.repo.database},t.prototype.set=function(e,t){u.validateArgCount("Reference.set",1,2,arguments.length),fe("Reference.set",this.path),re("Reference.set",1,e,this.path,!1),u.validateCallback("Reference.set",2,t,!0);var n=new u.Deferred;return this.repo.setWithPriority(this.path,e,null,n.wrapCallback(t)),n.promise},t.prototype.update=function(e,t){if(u.validateArgCount("Reference.update",1,2,arguments.length),fe("Reference.update",this.path),Array.isArray(e)){for(var n={},r=0;r<e.length;++r)n[""+r]=e[r];e=n,O("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}oe("Reference.update",1,e,this.path,!1),u.validateCallback("Reference.update",2,t,!0);var i=new u.Deferred;return this.repo.update(this.path,e,i.wrapCallback(t)),i.promise},t.prototype.setWithPriority=function(e,t,n){if(u.validateArgCount("Reference.setWithPriority",2,3,arguments.length),fe("Reference.setWithPriority",this.path),re("Reference.setWithPriority",1,e,this.path,!1),ae("Reference.setWithPriority",2,t,!1),u.validateCallback("Reference.setWithPriority",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.setWithPriority failed: "+this.getKey()+" is a read-only object.";var r=new u.Deferred;return this.repo.setWithPriority(this.path,e,t,r.wrapCallback(n)),r.promise},t.prototype.remove=function(e){return u.validateArgCount("Reference.remove",0,1,arguments.length),fe("Reference.remove",this.path),u.validateCallback("Reference.remove",1,e,!0),this.set(null,e)},t.prototype.transaction=function(e,t,n){if(u.validateArgCount("Reference.transaction",1,3,arguments.length),fe("Reference.transaction",this.path),u.validateCallback("Reference.transaction",1,e,!1),u.validateCallback("Reference.transaction",2,t,!0),pe("Reference.transaction",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.transaction failed: "+this.getKey()+" is a read-only object.";void 0===n&&(n=!0);var r=new u.Deferred;"function"==typeof t&&r.promise.catch((function(){}));var i=function(e,n,i){e?r.reject(e):r.resolve(new ve(n,i)),"function"==typeof t&&t(e,n,i)};return this.repo.startTransaction(this.path,e,i,n),r.promise},t.prototype.setPriority=function(e,t){u.validateArgCount("Reference.setPriority",1,2,arguments.length),fe("Reference.setPriority",this.path),ae("Reference.setPriority",1,e,!1),u.validateCallback("Reference.setPriority",2,t,!0);var n=new u.Deferred;return this.repo.setWithPriority(this.path.child(".priority"),e,null,n.wrapCallback(t)),n.promise},t.prototype.push=function(e,t){u.validateArgCount("Reference.push",0,2,arguments.length),fe("Reference.push",this.path),re("Reference.push",1,e,this.path,!0),u.validateCallback("Reference.push",2,t,!0);var n,r=this.repo.serverTime(),i=_e(r),o=this.child(i),a=this.child(i);return n=null!=e?o.set(e,t).then((function(){return a})):Promise.resolve(a),o.then=n.then.bind(n),o.catch=n.then.bind(n,void 0),"function"==typeof t&&n.catch((function(){})),o},t.prototype.onDisconnect=function(){return fe("Reference.onDisconnect",this.path),new de(this.repo,this.path)},Object.defineProperty(t.prototype,"database",{get:function(){return this.databaseProp()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.getKey()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return this.getParent()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"root",{get:function(){return this.getRoot()},enumerable:!0,configurable:!0}),t}(Je);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */Je.__referenceConstructor=an,It.__referenceConstructor=an;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var sn,un=function(){this.children={},this.childCount=0,this.value=null},ln=function(){function e(e,t,n){void 0===e&&(e=""),void 0===t&&(t=null),void 0===n&&(n=new un),this.name_=e,this.parent_=t,this.node_=n}return e.prototype.subTree=function(t){for(var n=t instanceof H?t:new H(t),r=this,i=n.getFront();null!==i;){r=new e(i,r,u.safeGet(r.node_.children,i)||new un),i=(n=n.popFront()).getFront()}return r},e.prototype.getValue=function(){return this.node_.value},e.prototype.setValue=function(e){u.assert(void 0!==e,"Cannot set value to undefined"),this.node_.value=e,this.updateParents_()},e.prototype.clear=function(){this.node_.value=null,this.node_.children={},this.node_.childCount=0,this.updateParents_()},e.prototype.hasChildren=function(){return this.node_.childCount>0},e.prototype.isEmpty=function(){return null===this.getValue()&&!this.hasChildren()},e.prototype.forEachChild=function(t){var n=this;L(this.node_.children,(function(r,i){t(new e(r,n,i))}))},e.prototype.forEachDescendant=function(e,t,n){t&&!n&&e(this),this.forEachChild((function(t){t.forEachDescendant(e,!0,n)})),t&&n&&e(this)},e.prototype.forEachAncestor=function(e,t){for(var n=t?this:this.parent();null!==n;){if(e(n))return!0;n=n.parent()}return!1},e.prototype.forEachImmediateDescendantWithValue=function(e){this.forEachChild((function(t){null!==t.getValue()?e(t):t.forEachImmediateDescendantWithValue(e)}))},e.prototype.path=function(){return new H(null===this.parent_?this.name_:this.parent_.path()+"/"+this.name_)},e.prototype.name=function(){return this.name_},e.prototype.parent=function(){return this.parent_},e.prototype.updateParents_=function(){null!==this.parent_&&this.parent_.updateChild_(this.name_,this)},e.prototype.updateChild_=function(e,t){var n=t.isEmpty(),r=u.contains(this.node_.children,e);n&&r?(delete this.node_.children[e],this.node_.childCount--,this.updateParents_()):n||r||(this.node_.children[e]=t.node_,this.node_.childCount++,this.updateParents_())},e}();!function(e){e[e.RUN=0]="RUN",e[e.SENT=1]="SENT",e[e.COMPLETED=2]="COMPLETED",e[e.SENT_NEEDS_ABORT=3]="SENT_NEEDS_ABORT",e[e.NEEDS_ABORT=4]="NEEDS_ABORT"}(sn||(sn={})),tn.MAX_TRANSACTION_RETRIES_=25,tn.prototype.transactionsInit_=function(){this.transactionQueueTree_=new ln},tn.prototype.startTransaction=function(e,t,n,r){this.log_("transaction on "+e);var i=function(){},o=new an(this,e);o.on("value",i);var a={path:e,update:t,onComplete:n,status:null,order:y(),applyLocally:r,retryCount:0,unwatcher:function(){o.off("value",i)},abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null},s=this.getLatestState_(e);a.currentInputSnapshot=s;var l=a.update(s.val());if(void 0===l){if(a.unwatcher(),a.currentOutputSnapshotRaw=null,a.currentOutputSnapshotResolved=null,a.onComplete){var c=new ze(a.currentInputSnapshot,new an(this,a.path),ke);a.onComplete(null,!1,c)}}else{ie("transaction failed: Data returned ",l,a.path),a.status=sn.RUN;var f=this.transactionQueueTree_.subTree(e),h=f.getValue()||[];h.push(a),f.setValue(h);var p=void 0;if("object"==typeof l&&null!==l&&u.contains(l,".priority"))p=u.safeGet(l,".priority"),u.assert(ne(p),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");else p=(this.serverSyncTree_.calcCompleteEventCache(e)||Be.EMPTY_NODE).getPriority().val();p=p;var d=this.generateServerValues(),v=Ke(l,p),_=ot(v,s,d);a.currentOutputSnapshotRaw=v,a.currentOutputSnapshotResolved=_,a.currentWriteId=this.getNextWriteId_();var g=this.serverSyncTree_.applyUserOverwrite(e,_,a.currentWriteId,a.applyLocally);this.eventQueue_.raiseEventsForChangedPath(e,g),this.sendReadyTransactions_()}},tn.prototype.getLatestState_=function(e,t){return this.serverSyncTree_.calcCompleteEventCache(e,t)||Be.EMPTY_NODE},tn.prototype.sendReadyTransactions_=function(e){var t=this;if(void 0===e&&(e=this.transactionQueueTree_),e||this.pruneCompletedTransactionsBelowNode_(e),null!==e.getValue()){var n=this.buildTransactionQueue_(e);u.assert(n.length>0,"Sending zero length transaction queue"),n.every((function(e){return e.status===sn.RUN}))&&this.sendTransactionQueue_(e.path(),n)}else e.hasChildren()&&e.forEachChild((function(e){t.sendReadyTransactions_(e)}))},tn.prototype.sendTransactionQueue_=function(e,t){for(var n=this,r=t.map((function(e){return e.currentWriteId})),i=this.getLatestState_(e,r),o=i,a=i.hash(),s=0;s<t.length;s++){var l=t[s];u.assert(l.status===sn.RUN,"tryToSendTransactionQueue_: items in queue should all be run."),l.status=sn.SENT,l.retryCount++;var c=H.relativePath(e,l.path);o=o.updateChild(c,l.currentOutputSnapshotRaw)}var f=o.val(!0),h=e;this.server_.put(h.toString(),f,(function(r){n.log_("transaction put response",{path:h.toString(),status:r});var i=[];if("ok"===r){for(var o=[],a=0;a<t.length;a++){if(t[a].status=sn.COMPLETED,i=i.concat(n.serverSyncTree_.ackUserWrite(t[a].currentWriteId)),t[a].onComplete){var s=t[a].currentOutputSnapshotResolved,u=new an(n,t[a].path),l=new ze(s,u,ke);o.push(t[a].onComplete.bind(null,null,!0,l))}t[a].unwatcher()}n.pruneCompletedTransactionsBelowNode_(n.transactionQueueTree_.subTree(e)),n.sendReadyTransactions_(),n.eventQueue_.raiseEventsForChangedPath(e,i);for(a=0;a<o.length;a++)W(o[a])}else{if("datastale"===r)for(a=0;a<t.length;a++)t[a].status===sn.SENT_NEEDS_ABORT?t[a].status=sn.NEEDS_ABORT:t[a].status=sn.RUN;else{O("transaction at "+h.toString()+" failed: "+r);for(a=0;a<t.length;a++)t[a].status=sn.NEEDS_ABORT,t[a].abortReason=r}n.rerunTransactions_(e)}}),a)},tn.prototype.rerunTransactions_=function(e){var t=this.getAncestorTransactionNode_(e),n=t.path(),r=this.buildTransactionQueue_(t);return this.rerunTransactionQueue_(r,n),n},tn.prototype.rerunTransactionQueue_=function(e,t){if(0!==e.length){for(var n,r=[],i=[],o=e.filter((function(e){return e.status===sn.RUN})).map((function(e){return e.currentWriteId})),a=0;a<e.length;a++){var s=e[a],l=H.relativePath(t,s.path),c=!1,f=void 0;if(u.assert(null!==l,"rerunTransactionsUnderNode_: relativePath should not be null."),s.status===sn.NEEDS_ABORT)c=!0,f=s.abortReason,i=i.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0));else if(s.status===sn.RUN)if(s.retryCount>=tn.MAX_TRANSACTION_RETRIES_)c=!0,f="maxretry",i=i.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0));else{var h=this.getLatestState_(s.path,o);s.currentInputSnapshot=h;var p=e[a].update(h.val());if(void 0!==p){ie("transaction failed: Data returned ",p,s.path);var d=Ke(p);"object"==typeof p&&null!=p&&u.contains(p,".priority")||(d=d.updatePriority(h.getPriority()));var v=s.currentWriteId,_=this.generateServerValues(),y=ot(d,h,_);s.currentOutputSnapshotRaw=d,s.currentOutputSnapshotResolved=y,s.currentWriteId=this.getNextWriteId_(),o.splice(o.indexOf(v),1),i=(i=i.concat(this.serverSyncTree_.applyUserOverwrite(s.path,y,s.currentWriteId,s.applyLocally))).concat(this.serverSyncTree_.ackUserWrite(v,!0))}else c=!0,f="nodata",i=i.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0))}if(this.eventQueue_.raiseEventsForChangedPath(t,i),i=[],c&&(e[a].status=sn.COMPLETED,n=e[a].unwatcher,setTimeout(n,Math.floor(0)),e[a].onComplete))if("nodata"===f){var g=new an(this,e[a].path),m=e[a].currentInputSnapshot,b=new ze(m,g,ke);r.push(e[a].onComplete.bind(null,null,!1,b))}else r.push(e[a].onComplete.bind(null,new Error(f),!1,null))}this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);for(a=0;a<r.length;a++)W(r[a]);this.sendReadyTransactions_()}},tn.prototype.getAncestorTransactionNode_=function(e){var t,n=this.transactionQueueTree_;for(t=e.getFront();null!==t&&null===n.getValue();)n=n.subTree(t),t=(e=e.popFront()).getFront();return n},tn.prototype.buildTransactionQueue_=function(e){var t=[];return this.aggregateTransactionQueuesForNode_(e,t),t.sort((function(e,t){return e.order-t.order})),t},tn.prototype.aggregateTransactionQueuesForNode_=function(e,t){var n=this,r=e.getValue();if(null!==r)for(var i=0;i<r.length;i++)t.push(r[i]);e.forEachChild((function(e){n.aggregateTransactionQueuesForNode_(e,t)}))},tn.prototype.pruneCompletedTransactionsBelowNode_=function(e){var t=this,n=e.getValue();if(n){for(var r=0,i=0;i<n.length;i++)n[i].status!==sn.COMPLETED&&(n[r]=n[i],r++);n.length=r,e.setValue(n.length>0?n:null)}e.forEachChild((function(e){t.pruneCompletedTransactionsBelowNode_(e)}))},tn.prototype.abortTransactions_=function(e){var t=this,n=this.getAncestorTransactionNode_(e).path(),r=this.transactionQueueTree_.subTree(e);return r.forEachAncestor((function(e){t.abortTransactionsOnNode_(e)})),this.abortTransactionsOnNode_(r),r.forEachDescendant((function(e){t.abortTransactionsOnNode_(e)})),n},tn.prototype.abortTransactionsOnNode_=function(e){var t=e.getValue();if(null!==t){for(var n=[],r=[],i=-1,o=0;o<t.length;o++)if(t[o].status===sn.SENT_NEEDS_ABORT);else if(t[o].status===sn.SENT)u.assert(i===o-1,"All SENT items should be at beginning of queue."),i=o,t[o].status=sn.SENT_NEEDS_ABORT,t[o].abortReason="set";else if(u.assert(t[o].status===sn.RUN,"Unexpected transaction status in abort"),t[o].unwatcher(),r=r.concat(this.serverSyncTree_.ackUserWrite(t[o].currentWriteId,!0)),t[o].onComplete){n.push(t[o].onComplete.bind(null,new Error("set"),!1,null))}-1===i?e.setValue(null):t.length=i+1,this.eventQueue_.raiseEventsForChangedPath(e.path(),r);for(o=0;o<n.length;o++)W(n[o])}};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var cn,fn=function(){function e(){this.repos_={},this.useRestClient_=!1}return e.getInstance=function(){return cn||(cn=new e),cn},e.prototype.interrupt=function(){var e,t,n,r;try{for(var i=s.__values(Object.keys(this.repos_)),o=i.next();!o.done;o=i.next()){var a=o.value;try{for(var u=(n=void 0,s.__values(Object.keys(this.repos_[a]))),l=u.next();!l.done;l=u.next()){var c=l.value;this.repos_[a][c].interrupt()}}catch(e){n={error:e}}finally{try{l&&!l.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}},e.prototype.resume=function(){var e,t,n,r;try{for(var i=s.__values(Object.keys(this.repos_)),o=i.next();!o.done;o=i.next()){var a=o.value;try{for(var u=(n=void 0,s.__values(Object.keys(this.repos_[a]))),l=u.next();!l.done;l=u.next()){var c=l.value;this.repos_[a][c].resume()}}catch(e){n={error:e}}finally{try{l&&!l.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}},e.prototype.databaseFromApp=function(e,t,n){var i=n||e.options.databaseURL;void 0===i&&P("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.initializeApp().");var o=$(i),a=o.repoInfo,s=void 0;return void 0!==r&&(s=r.env.FIREBASE_DATABASE_EMULATOR_HOST),s&&(i="http://"+s+"?ns="+a.namespace,a=(o=$(i)).repoInfo),he("Invalid Firebase Database URL",1,o),o.path.isEmpty()||P("Database URL must point to the root of a Firebase Database (not including a child path)."),this.createRepo(a,e,t).database},e.prototype.deleteRepo=function(e){var t=u.safeGet(this.repos_,e.app.name);t&&u.safeGet(t,e.repoInfo_.toURLString())===e||P("Database "+e.app.name+"("+e.repoInfo_+") has already been deleted."),e.interrupt(),delete t[e.repoInfo_.toURLString()]},e.prototype.createRepo=function(e,t,n){var r=u.safeGet(this.repos_,t.name);r||(r={},this.repos_[t.name]=r);var i=u.safeGet(r,e.toURLString());return i&&P("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."),i=new tn(e,this.useRestClient_,t,n),r[e.toURLString()]=i,i},e.prototype.forceRestClient=function(e){this.useRestClient_=e},e}(),hn=function(){function e(e){this.repo_=e,e instanceof tn||P("Don't call new Database() directly - please use firebase.database()."),this.root_=new an(e,H.Empty),this.INTERNAL=new pn(this)}return Object.defineProperty(e.prototype,"app",{get:function(){return this.repo_.app},enumerable:!0,configurable:!0}),e.prototype.ref=function(e){return this.checkDeleted_("ref"),u.validateArgCount("database.ref",0,1,arguments.length),e instanceof an?this.refFromURL(e.toString()):void 0!==e?this.root_.child(e):this.root_},e.prototype.refFromURL=function(e){var t="database.refFromURL";this.checkDeleted_(t),u.validateArgCount(t,1,1,arguments.length);var n=$(e);he(t,1,n);var r=n.repoInfo;return r.host!==this.repo_.repoInfo_.host&&P(t+": Host name does not match the current database: (found "+r.host+" but expected "+this.repo_.repoInfo_.host+")"),this.ref(n.path.toString())},e.prototype.checkDeleted_=function(e){null===this.repo_&&P("Cannot call "+e+" on a deleted database.")},e.prototype.goOffline=function(){u.validateArgCount("database.goOffline",0,0,arguments.length),this.checkDeleted_("goOffline"),this.repo_.interrupt()},e.prototype.goOnline=function(){u.validateArgCount("database.goOnline",0,0,arguments.length),this.checkDeleted_("goOnline"),this.repo_.resume()},e.ServerValue={TIMESTAMP:{".sv":"timestamp"},increment:function(e){return{".sv":{increment:e}}}},e}(),pn=function(){function e(e){this.database=e}return e.prototype.delete=function(){return s.__awaiter(this,void 0,void 0,(function(){return s.__generator(this,(function(e){return this.database.checkDeleted_("delete"),fn.getInstance().deleteRepo(this.database.repo_),this.database.repo_=null,this.database.root_=null,this.database.INTERNAL=null,this.database=null,[2]}))}))},e}(),dn=Object.freeze({__proto__:null,forceLongPolling:function(){Yt.forceDisallow(),Gt.forceAllow()},forceWebSockets:function(){Gt.forceDisallow()},isWebSocketsAvailable:function(){return Yt.isAvailable()},setSecurityDebugCallback:function(e,t){e.repo.persistentConnection_.securityDebugCallback_=t},stats:function(e,t){e.repo.stats(t)},statsIncrementCounter:function(e,t){e.repo.statsIncrementCounter(t)},dataUpdateCount:function(e){return e.repo.dataUpdateCount},interceptServerData:function(e,t){return e.repo.interceptServerData_(t)}}),vn=Zt;Zt.prototype.simpleListen=function(e,t){this.sendRequest("q",{p:e},t)},Zt.prototype.echo=function(e,t){this.sendRequest("echo",{d:e},t)};var _n=Xt,yn=V,gn=Object.freeze({__proto__:null,DataConnection:vn,RealTimeConnection:_n,hijackHash:function(e){var t=Zt.prototype.put;return Zt.prototype.put=function(n,r,i,o){void 0!==o&&(o=e()),t.call(this,n,r,i,o)},function(){Zt.prototype.put=t}},ConnectionTarget:yn,queryIdentifier:function(e){return e.queryIdentifier()},forceRestClient:function(e){fn.getInstance().forceRestClient(e)}}),mn=hn.ServerValue;function bn(t){!function(e){zt=e}(t.SDK_VERSION);var n=t.INTERNAL.registerComponent(new c.Component("database",(function(e,t){var n=e.getProvider("app").getImmediate(),r=e.getProvider("auth-internal");return fn.getInstance().databaseFromApp(n,r,t)}),"PUBLIC").setServiceProps({Reference:an,Query:Je,Database:hn,DataSnapshot:ze,enableLogging:E,INTERNAL:dn,ServerValue:mn,TEST_ACCESS:gn}).setMultipleInstances(!0));t.registerVersion("@firebase/database","0.6.4"),u.isNodeSdk()&&(e.exports=n)}bn(a),t.DataSnapshot=ze,t.Database=hn,t.OnDisconnect=de,t.Query=Je,t.Reference=an,t.ServerValue=mn,t.enableLogging=E,t.registerDatabase=bn}).call(this,n(365))},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,l=[],c=!1,f=-1;function h(){c&&u&&(c=!1,u.length?l=u.concat(l):f=-1,l.length&&p())}function p(){if(!c){var e=s(h);c=!0;for(var t=l.length;t;){for(u=l,l=[];++f<t;)u&&u[f].run();f=-1,t=l.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new d(e,t)),1!==l.length||c||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t),n.d(t,"__extends",(function(){return i})),n.d(t,"__assign",(function(){return o})),n.d(t,"__rest",(function(){return a})),n.d(t,"__decorate",(function(){return s})),n.d(t,"__param",(function(){return u})),n.d(t,"__metadata",(function(){return l})),n.d(t,"__awaiter",(function(){return c})),n.d(t,"__generator",(function(){return f})),n.d(t,"__exportStar",(function(){return h})),n.d(t,"__values",(function(){return p})),n.d(t,"__read",(function(){return d})),n.d(t,"__spread",(function(){return v})),n.d(t,"__spreadArrays",(function(){return _})),n.d(t,"__await",(function(){return y})),n.d(t,"__asyncGenerator",(function(){return g})),n.d(t,"__asyncDelegator",(function(){return m})),n.d(t,"__asyncValues",(function(){return b})),n.d(t,"__makeTemplateObject",(function(){return w})),n.d(t,"__importStar",(function(){return E})),n.d(t,"__importDefault",(function(){return T})),n.d(t,"__classPrivateFieldGet",(function(){return C})),n.d(t,"__classPrivateFieldSet",(function(){return S}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function i(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function s(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function u(e,t){return function(n,r){t(n,r,e)}}function l(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function c(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function h(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function d(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(d(arguments[t]));return e}function _(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}function y(e){return this instanceof y?(this.v=e,this):new y(e)}function g(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=i[e](t)).value instanceof y?Promise.resolve(n.value.v).then(u,l):c(o[0][2],n)}catch(e){c(o[0][3],e)}var n}function u(e){s("next",e)}function l(e){s("throw",e)}function c(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function m(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,i){t[r]=e[r]?function(t){return(n=!n)?{value:y(e[r](t)),done:"return"===r}:i?i(t):t}:i}}function b(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=p(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){(function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)})(r,i,(t=e[n](t)).done,t.value)}))}}}function w(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function E(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function T(e){return e&&e.__esModule?e:{default:e}}function C(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function S(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},function(e,t,n){"use strict";n(368)},function(e,t,n){"use strict";(function(e){var t=n(2),r=n.n(t);(function(){var t,n="function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,n){e!=Array.prototype&&e!=Object.prototype&&(e[t]=n.value)};var i=function(t){t=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof e&&e,t];for(var n=0;n<t.length;++n){var r=t[n];if(r&&r.Math==Math)return r}return globalThis}(this);function o(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}function a(e){var t="undefined"!=typeof Symbol&&Symbol.iterator&&e[Symbol.iterator];return t?t.call(e):{next:o(e)}}!function(e,t){if(t){var r=i;e=e.split(".");for(var o=0;o<e.length-1;o++){var a=e[o];a in r||(r[a]={}),r=r[a]}(t=t(o=r[e=e[e.length-1]]))!=o&&null!=t&&n(r,e,{configurable:!0,writable:!0,value:t})}}("Promise",(function(e){function t(e){this.b=0,this.c=void 0,this.a=[];var t=this.f();try{e(t.resolve,t.reject)}catch(e){t.reject(e)}}function n(){this.a=null}function r(e){return e instanceof t?e:new t((function(t){t(e)}))}if(e)return e;n.prototype.b=function(e){if(null==this.a){this.a=[];var t=this;this.c((function(){t.g()}))}this.a.push(e)};var o=i.setTimeout;n.prototype.c=function(e){o(e,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var e=this.a;this.a=[];for(var t=0;t<e.length;++t){var n=e[t];e[t]=null;try{n()}catch(e){this.f(e)}}}this.a=null},n.prototype.f=function(e){this.c((function(){throw e}))},t.prototype.f=function(){function e(e){return function(r){n||(n=!0,e.call(t,r))}}var t=this,n=!1;return{resolve:e(this.m),reject:e(this.g)}},t.prototype.m=function(e){if(e===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(e instanceof t)this.s(e);else{e:switch(typeof e){case"object":var n=null!=e;break e;case"function":n=!0;break e;default:n=!1}n?this.u(e):this.h(e)}},t.prototype.u=function(e){var t=void 0;try{t=e.then}catch(e){return void this.g(e)}"function"==typeof t?this.w(t,e):this.h(e)},t.prototype.g=function(e){this.i(2,e)},t.prototype.h=function(e){this.i(1,e)},t.prototype.i=function(e,t){if(0!=this.b)throw Error("Cannot settle("+e+", "+t+"): Promise already settled in state"+this.b);this.b=e,this.c=t,this.l()},t.prototype.l=function(){if(null!=this.a){for(var e=0;e<this.a.length;++e)s.b(this.a[e]);this.a=null}};var s=new n;return t.prototype.s=function(e){var t=this.f();e.Oa(t.resolve,t.reject)},t.prototype.w=function(e,t){var n=this.f();try{e.call(t,n.resolve,n.reject)}catch(e){n.reject(e)}},t.prototype.then=function(e,n){function r(e,t){return"function"==typeof e?function(t){try{i(e(t))}catch(e){o(e)}}:t}var i,o,a=new t((function(e,t){i=e,o=t}));return this.Oa(r(e,i),r(n,o)),a},t.prototype.catch=function(e){return this.then(void 0,e)},t.prototype.Oa=function(e,t){function n(){switch(r.b){case 1:e(r.c);break;case 2:t(r.c);break;default:throw Error("Unexpected state: "+r.b)}}var r=this;null==this.a?s.b(n):this.a.push(n)},t.resolve=r,t.reject=function(e){return new t((function(t,n){n(e)}))},t.race=function(e){return new t((function(t,n){for(var i=a(e),o=i.next();!o.done;o=i.next())r(o.value).Oa(t,n)}))},t.all=function(e){var n=a(e),i=n.next();return i.done?r([]):new t((function(e,t){function o(t){return function(n){a[t]=n,0==--s&&e(a)}}var a=[],s=0;do{a.push(void 0),s++,r(i.value).Oa(o(a.length-1),t),i=n.next()}while(!i.done)}))},t}));var s=s||{},u=this||self,l=/^[\w+/_-]+[=]{0,2}$/,c=null;function f(){}function h(e){var t=typeof e;if("object"==t){if(!e)return"null";if(e instanceof Array)return"array";if(e instanceof Object)return t;var n=Object.prototype.toString.call(e);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof e.length&&void 0!==e.splice&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==e.call&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("call"))return"function"}else if("function"==t&&void 0===e.call)return"object";return t}function p(e){var t=h(e);return"array"==t||"object"==t&&"number"==typeof e.length}function d(e){return"function"==h(e)}function v(e){var t=typeof e;return"object"==t&&null!=e||"function"==t}function _(e){return Object.prototype.hasOwnProperty.call(e,y)&&e[y]||(e[y]=++g)}var y="closure_uid_"+(1e9*Math.random()>>>0),g=0;function m(e,t,n){return e.call.apply(e.bind,arguments)}function b(e,t,n){if(!e)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),e.apply(t,n)}}return function(){return e.apply(t,arguments)}}function w(e,t,n){return(w=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?m:b).apply(null,arguments)}function E(e,t){var n=Array.prototype.slice.call(arguments,1);return function(){var t=n.slice();return t.push.apply(t,arguments),e.apply(this,t)}}var T=Date.now||function(){return+new Date};function C(e,t){function n(){}n.prototype=t.prototype,e.Za=t.prototype,e.prototype=new n,e.prototype.constructor=e}function S(e,t,n){this.code=I+e,this.message=t||k[e]||"",this.a=n||null}function P(e){var t=e&&e.code;return t?new S(t.substring(I.length),e.message,e.serverResponse):null}C(S,Error),S.prototype.v=function(){var e={code:this.code,message:this.message};return this.a&&(e.serverResponse=this.a),e},S.prototype.toJSON=function(){return this.v()};var O,I="auth/",k={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."},x={hd:{Ra:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Xa:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Ua:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},pd:{Ra:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",Xa:"https://securetoken.googleapis.com/v1/token",Ua:"https://identitytoolkit.googleapis.com/v2/",id:"p"},rd:{Ra:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Xa:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Ua:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},sd:{Ra:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",Xa:"https://test-securetoken.sandbox.googleapis.com/v1/token",Ua:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};function A(e){for(var t in x)if(x[t].id===e)return{firebaseEndpoint:(e=x[t]).Ra,secureTokenEndpoint:e.Xa,identityPlatformEndpoint:e.Ua};return null}function D(e){if(!e)return!1;try{return!!e.$goog_Thenable}catch(e){return!1}}function N(e){if(Error.captureStackTrace)Error.captureStackTrace(this,N);else{var t=Error().stack;t&&(this.stack=t)}e&&(this.message=String(e))}function R(e,t){for(var n="",r=(e=e.split("%s")).length-1,i=0;i<r;i++)n+=e[i]+(i<t.length?t[i]:"%s");N.call(this,n+e[r])}function M(e,t){throw new R("Failure"+(e?": "+e:""),Array.prototype.slice.call(arguments,1))}function L(e,t){this.c=e,this.f=t,this.b=0,this.a=null}function F(e,t){e.f(t),100>e.b&&(e.b++,t.next=e.a,e.a=t)}function j(){this.b=this.a=null}O=A("__EID__")?"__EID__":void 0,C(N,Error),N.prototype.name="CustomError",C(R,N),R.prototype.name="AssertionError",L.prototype.get=function(){if(0<this.b){this.b--;var e=this.a;this.a=e.next,e.next=null}else e=this.c();return e};var U=new L((function(){return new B}),(function(e){e.reset()}));function W(){var e=gt,t=null;return e.a&&(t=e.a,e.a=e.a.next,e.a||(e.b=null),t.next=null),t}function B(){this.next=this.b=this.a=null}j.prototype.add=function(e,t){var n=U.get();n.set(e,t),this.b?this.b.next=n:this.a=n,this.b=n},B.prototype.set=function(e,t){this.a=e,this.b=t,this.next=null},B.prototype.reset=function(){this.next=this.b=this.a=null};var H=Array.prototype.indexOf?function(e,t){return Array.prototype.indexOf.call(e,t,void 0)}:function(e,t){if("string"==typeof e)return"string"!=typeof t||1!=t.length?-1:e.indexOf(t,0);for(var n=0;n<e.length;n++)if(n in e&&e[n]===t)return n;return-1},K=Array.prototype.forEach?function(e,t,n){Array.prototype.forEach.call(e,t,n)}:function(e,t,n){for(var r=e.length,i="string"==typeof e?e.split(""):e,o=0;o<r;o++)o in i&&t.call(n,i[o],o,e)};var V=Array.prototype.filter?function(e,t){return Array.prototype.filter.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=[],i=0,o="string"==typeof e?e.split(""):e,a=0;a<n;a++)if(a in o){var s=o[a];t.call(void 0,s,a,e)&&(r[i++]=s)}return r},G=Array.prototype.map?function(e,t){return Array.prototype.map.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=Array(n),i="string"==typeof e?e.split(""):e,o=0;o<n;o++)o in i&&(r[o]=t.call(void 0,i[o],o,e));return r},q=Array.prototype.some?function(e,t){return Array.prototype.some.call(e,t,void 0)}:function(e,t){for(var n=e.length,r="string"==typeof e?e.split(""):e,i=0;i<n;i++)if(i in r&&t.call(void 0,r[i],i,e))return!0;return!1};function z(e,t){return 0<=H(e,t)}function Q(e,t){var n;return(n=0<=(t=H(e,t)))&&Array.prototype.splice.call(e,t,1),n}function Y(e,t){!function(e,t){for(var n="string"==typeof e?e.split(""):e,r=e.length-1;0<=r;--r)r in n&&t.call(void 0,n[r],r,e)}(e,(function(n,r){t.call(void 0,n,r,e)&&1==Array.prototype.splice.call(e,r,1).length&&0}))}function $(e){return Array.prototype.concat.apply([],arguments)}function X(e){var t=e.length;if(0<t){for(var n=Array(t),r=0;r<t;r++)n[r]=e[r];return n}return[]}var J,Z=String.prototype.trim?function(e){return e.trim()}:function(e){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(e)[1]},ee=/&/g,te=/</g,ne=/>/g,re=/"/g,ie=/'/g,oe=/\x00/g,ae=/[\x00&<>"']/;function se(e,t){return-1!=e.indexOf(t)}function ue(e,t){return e<t?-1:e>t?1:0}e:{var le=u.navigator;if(le){var ce=le.userAgent;if(ce){J=ce;break e}}J=""}function fe(e){return se(J,e)}function he(e,t){for(var n in e)t.call(void 0,e[n],n,e)}function pe(e){for(var t in e)return!1;return!0}function de(e){var t,n={};for(t in e)n[t]=e[t];return n}var ve="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function _e(e,t){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])e[n]=r[n];for(var o=0;o<ve.length;o++)n=ve[o],Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}}function ye(e,t){e:{try{var n=e&&e.ownerDocument,r=n&&(n.defaultView||n.parentWindow);if((r=r||u).Element&&r.Location){var i=r;break e}}catch(e){}i=null}if(i&&void 0!==i[t]&&(!e||!(e instanceof i[t])&&(e instanceof i.Location||e instanceof i.Element))){if(v(e))try{var o=e.constructor.displayName||e.constructor.name||Object.prototype.toString.call(e)}catch(e){o="<object could not be stringified>"}else o=void 0===e?"undefined":null===e?"null":typeof e;M("Argument is not a %s (or a non-Element, non-Location mock); got: %s",t,o)}}function ge(e,t){this.a=e===we&&t||"",this.b=be}function me(e){return e instanceof ge&&e.constructor===ge&&e.b===be?e.a:(M("expected object of type Const, got '"+e+"'"),"type_error:Const")}ge.prototype.ra=!0,ge.prototype.qa=function(){return this.a},ge.prototype.toString=function(){return"Const{"+this.a+"}"};var be={},we={},Ee=new ge(we,"");function Te(e,t){this.a=e===ke&&t||"",this.b=Ie}function Ce(e){return e instanceof Te&&e.constructor===Te&&e.b===Ie?e.a:(M("expected object of type TrustedResourceUrl, got '"+e+"' of type "+h(e)),"type_error:TrustedResourceUrl")}function Se(e,t){var n=me(e);if(!Oe.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return e=n.replace(Pe,(function(e,r){if(!Object.prototype.hasOwnProperty.call(t,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(t));return(e=t[r])instanceof ge?me(e):encodeURIComponent(String(e))})),new Te(ke,e)}Te.prototype.ra=!0,Te.prototype.qa=function(){return this.a.toString()},Te.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var Pe=/%{(\w+)}/g,Oe=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,Ie={},ke={};function xe(e,t){this.a=e===Me&&t||"",this.b=Re}function Ae(e){return e instanceof xe&&e.constructor===xe&&e.b===Re?e.a:(M("expected object of type SafeUrl, got '"+e+"' of type "+h(e)),"type_error:SafeUrl")}xe.prototype.ra=!0,xe.prototype.qa=function(){return this.a.toString()},xe.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var De=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function Ne(e){return e instanceof xe?e:(e="object"==typeof e&&e.ra?e.qa():String(e),De.test(e)||(e="about:invalid#zClosurez"),new xe(Me,e))}var Re={},Me={};function Le(){this.a="",this.b=je}function Fe(e){return e instanceof Le&&e.constructor===Le&&e.b===je?e.a:(M("expected object of type SafeHtml, got '"+e+"' of type "+h(e)),"type_error:SafeHtml")}Le.prototype.ra=!0,Le.prototype.qa=function(){return this.a.toString()},Le.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var je={};function Ue(e){var t=new Le;return t.a=e,t}Ue("<!DOCTYPE html>");var We=Ue("");function Be(e,t){for(var n=e.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}function He(e){return ae.test(e)&&(-1!=e.indexOf("&")&&(e=e.replace(ee,"&amp;")),-1!=e.indexOf("<")&&(e=e.replace(te,"&lt;")),-1!=e.indexOf(">")&&(e=e.replace(ne,"&gt;")),-1!=e.indexOf('"')&&(e=e.replace(re,"&quot;")),-1!=e.indexOf("'")&&(e=e.replace(ie,"&#39;")),-1!=e.indexOf("\0")&&(e=e.replace(oe,"&#0;"))),e}function Ke(e){return Ke[" "](e),e}Ue("<br>"),Ke[" "]=f;var Ve,Ge,qe=fe("Opera"),ze=fe("Trident")||fe("MSIE"),Qe=fe("Edge"),Ye=Qe||ze,$e=fe("Gecko")&&!(se(J.toLowerCase(),"webkit")&&!fe("Edge"))&&!(fe("Trident")||fe("MSIE"))&&!fe("Edge"),Xe=se(J.toLowerCase(),"webkit")&&!fe("Edge");function Je(){var e=u.document;return e?e.documentMode:void 0}e:{var Ze="",et=(Ge=J,$e?/rv:([^\);]+)(\)|;)/.exec(Ge):Qe?/Edge\/([\d\.]+)/.exec(Ge):ze?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Ge):Xe?/WebKit\/(\S+)/.exec(Ge):qe?/(?:Version)[ \/]?(\S+)/.exec(Ge):void 0);if(et&&(Ze=et?et[1]:""),ze){var tt=Je();if(null!=tt&&tt>parseFloat(Ze)){Ve=String(tt);break e}}Ve=Ze}var nt,rt={};function it(e){return function(e,t){var n=rt;return Object.prototype.hasOwnProperty.call(n,e)?n[e]:n[e]=t(e)}(e,(function(){for(var t=0,n=Z(String(Ve)).split("."),r=Z(String(e)).split("."),i=Math.max(n.length,r.length),o=0;0==t&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;t=ue(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||ue(0==a[2].length,0==s[2].length)||ue(a[2],s[2]),a=a[3],s=s[3]}while(0==t)}return 0<=t}))}nt=u.document&&ze?Je():void 0;try{new self.OffscreenCanvas(0,0).getContext("2d")}catch(Ge){}var ot=!ze||9<=Number(nt);function at(e){var t=document;return"string"==typeof e?t.getElementById(e):e}function st(e,t){he(t,(function(t,n){t&&"object"==typeof t&&t.ra&&(t=t.qa()),"style"==n?e.style.cssText=t:"class"==n?e.className=t:"for"==n?e.htmlFor=t:ct.hasOwnProperty(n)?e.setAttribute(ct[n],t):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?e.setAttribute(n,t):e[n]=t}))}var ut,lt,ct={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function ft(e,t,n){function r(n){n&&t.appendChild("string"==typeof n?e.createTextNode(n):n)}for(var i=2;i<n.length;i++){var o=n[i];!p(o)||v(o)&&0<o.nodeType?r(o):K(pt(o)?X(o):o,r)}}function ht(e,t){return t=String(t),"application/xhtml+xml"===e.contentType&&(t=t.toLowerCase()),e.createElement(t)}function pt(e){if(e&&"number"==typeof e.length){if(v(e))return"function"==typeof e.item||"string"==typeof e.item;if(d(e))return"function"==typeof e.item}return!1}function dt(e){u.setTimeout((function(){throw e}),0)}function vt(){var e=u.MessageChannel;if(void 0===e&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!fe("Presto")&&(e=function(){var e=ht(document,"IFRAME");e.style.display="none",function(e){var t=new Te(ke,me(Ee));ye(e,"HTMLIFrameElement"),e.src=Ce(t).toString()}(e),document.documentElement.appendChild(e);var t=e.contentWindow;(e=t.document).open(),e.write(Fe(We)),e.close();var n="callImmediate"+Math.random(),r="file:"==t.location.protocol?"*":t.location.protocol+"//"+t.location.host;e=w((function(e){"*"!=r&&e.origin!=r||e.data!=n||this.port1.onmessage()}),this),t.addEventListener("message",e,!1),this.port1={},this.port2={postMessage:function(){t.postMessage(n,r)}}}),void 0!==e&&!fe("Trident")&&!fe("MSIE")){var t=new e,n={},r=n;return t.port1.onmessage=function(){if(void 0!==n.next){var e=(n=n.next).Db;n.Db=null,e()}},function(e){r.next={Db:e},r=r.next,t.port2.postMessage(0)}}return function(e){u.setTimeout(e,0)}}function _t(e,t){lt||function(){if(u.Promise&&u.Promise.resolve){var e=u.Promise.resolve(void 0);lt=function(){e.then(mt)}}else lt=function(){var e=mt;!d(u.setImmediate)||u.Window&&u.Window.prototype&&!fe("Edge")&&u.Window.prototype.setImmediate==u.setImmediate?(ut||(ut=vt()),ut(e)):u.setImmediate(e)}}(),yt||(lt(),yt=!0),gt.add(e,t)}var yt=!1,gt=new j;function mt(){for(var e;e=W();){try{e.a.call(e.b)}catch(e){dt(e)}F(U,e)}yt=!1}function bt(e,t){if(this.a=wt,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,e!=f)try{var n=this;e.call(t,(function(e){Nt(n,Et,e)}),(function(e){if(!(e instanceof Wt))try{if(e instanceof Error)throw e;throw Error("Promise rejected.")}catch(e){}Nt(n,Tt,e)}))}catch(e){Nt(this,Tt,e)}}var wt=0,Et=2,Tt=3;function Ct(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}Ct.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var St=new L((function(){return new Ct}),(function(e){e.reset()}));function Pt(e,t,n){var r=St.get();return r.g=e,r.b=t,r.f=n,r}function Ot(e){if(e instanceof bt)return e;var t=new bt(f);return Nt(t,Et,e),t}function It(e){return new bt((function(t,n){n(e)}))}function kt(e,t,n){Rt(e,t,n,null)||_t(E(t,e))}function xt(e){return new bt((function(t){var n=e.length,r=[];if(n)for(var i=function(e,i,o){n--,r[e]=i?{Mb:!0,value:o}:{Mb:!1,reason:o},0==n&&t(r)},o=0;o<e.length;o++)kt(e[o],E(i,o,!0),E(i,o,!1));else t(r)}))}function At(e,t){e.b||e.a!=Et&&e.a!=Tt||Mt(e),e.f?e.f.next=t:e.b=t,e.f=t}function Dt(e,t,n,r){var i=Pt(null,null,null);return i.a=new bt((function(e,o){i.g=t?function(n){try{var i=t.call(r,n);e(i)}catch(e){o(e)}}:e,i.b=n?function(t){try{var i=n.call(r,t);void 0===i&&t instanceof Wt?o(t):e(i)}catch(e){o(e)}}:o})),i.a.c=e,At(e,i),i.a}function Nt(e,t,n){e.a==wt&&(e===n&&(t=Tt,n=new TypeError("Promise cannot resolve to itself")),e.a=1,Rt(n,e.Yc,e.Zc,e)||(e.i=n,e.a=t,e.c=null,Mt(e),t!=Tt||n instanceof Wt||function(e,t){e.g=!0,_t((function(){e.g&&Ut.call(null,t)}))}(e,n)))}function Rt(e,t,n,r){if(e instanceof bt)return At(e,Pt(t||f,n||null,r)),!0;if(D(e))return e.then(t,n,r),!0;if(v(e))try{var i=e.then;if(d(i))return function(e,t,n,r,i){function o(e){a||(a=!0,r.call(i,e))}var a=!1;try{t.call(e,(function(e){a||(a=!0,n.call(i,e))}),o)}catch(e){o(e)}}(e,i,t,n,r),!0}catch(e){return n.call(r,e),!0}return!1}function Mt(e){e.h||(e.h=!0,_t(e.ec,e))}function Lt(e){var t=null;return e.b&&(t=e.b,e.b=t.next,t.next=null),e.b||(e.f=null),t}function Ft(e,t,n,r){if(n==Tt&&t.b&&!t.c)for(;e&&e.g;e=e.c)e.g=!1;if(t.a)t.a.c=null,jt(t,n,r);else try{t.c?t.g.call(t.f):jt(t,n,r)}catch(e){Ut.call(null,e)}F(St,t)}function jt(e,t,n){t==Et?e.g.call(e.f,n):e.b&&e.b.call(e.f,n)}bt.prototype.then=function(e,t,n){return Dt(this,d(e)?e:null,d(t)?t:null,n)},bt.prototype.$goog_Thenable=!0,(t=bt.prototype).ma=function(e,t){return(e=Pt(e,e,t)).c=!0,At(this,e),this},t.o=function(e,t){return Dt(this,null,e,t)},t.cancel=function(e){if(this.a==wt){var t=new Wt(e);_t((function(){!function e(t,n){if(t.a==wt)if(t.c){var r=t.c;if(r.b){for(var i=0,o=null,a=null,s=r.b;s&&(s.c||(i++,s.a==t&&(o=s),!(o&&1<i)));s=s.next)o||(a=s);o&&(r.a==wt&&1==i?e(r,n):(a?((i=a).next==r.f&&(r.f=i),i.next=i.next.next):Lt(r),Ft(r,o,Tt,n)))}t.c=null}else Nt(t,Tt,n)}(this,t)}),this)}},t.Yc=function(e){this.a=wt,Nt(this,Et,e)},t.Zc=function(e){this.a=wt,Nt(this,Tt,e)},t.ec=function(){for(var e;e=Lt(this);)Ft(this,e,this.a,this.i);this.h=!1};var Ut=dt;function Wt(e){N.call(this,e)}function Bt(){0!=Ht&&(Kt[_(this)]=this),this.wa=this.wa,this.na=this.na}C(Wt,N),Wt.prototype.name="cancel";var Ht=0,Kt={};function Vt(e){if(!e.wa&&(e.wa=!0,e.Ba(),0!=Ht)){var t=_(e);if(0!=Ht&&e.na&&0<e.na.length)throw Error(e+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete Kt[t]}}Bt.prototype.wa=!1,Bt.prototype.Ba=function(){if(this.na)for(;this.na.length;)this.na.shift()()};var Gt=Object.freeze||function(e){return e},qt=!ze||9<=Number(nt),zt=ze&&!it("9"),Qt=function(){if(!u.addEventListener||!Object.defineProperty)return!1;var e=!1,t=Object.defineProperty({},"passive",{get:function(){e=!0}});try{u.addEventListener("test",f,t),u.removeEventListener("test",f,t)}catch(e){}return e}();function Yt(e,t){this.type=e,this.b=this.target=t,this.defaultPrevented=!1}function $t(e,t){if(Yt.call(this,e?e.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,e){var n=this.type=e.type,r=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:null;if(this.target=e.target||e.srcElement,this.b=t,t=e.relatedTarget){if($e){e:{try{Ke(t.nodeName);var i=!0;break e}catch(e){}i=!1}i||(t=null)}}else"mouseover"==n?t=e.fromElement:"mouseout"==n&&(t=e.toElement);this.relatedTarget=t,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==e.clientX?e.clientX:e.pageX,this.clientY=void 0!==e.clientY?e.clientY:e.pageY,this.screenX=e.screenX||0,this.screenY=e.screenY||0),this.button=e.button,this.key=e.key||"",this.ctrlKey=e.ctrlKey,this.altKey=e.altKey,this.shiftKey=e.shiftKey,this.metaKey=e.metaKey,this.pointerId=e.pointerId||0,this.pointerType="string"==typeof e.pointerType?e.pointerType:Xt[e.pointerType]||"",this.a=e,e.defaultPrevented&&this.preventDefault()}}Yt.prototype.preventDefault=function(){this.defaultPrevented=!0},C($t,Yt);var Xt=Gt({2:"touch",3:"pen",4:"mouse"});$t.prototype.preventDefault=function(){$t.Za.preventDefault.call(this);var e=this.a;if(e.preventDefault)e.preventDefault();else if(e.returnValue=!1,zt)try{(e.ctrlKey||112<=e.keyCode&&123>=e.keyCode)&&(e.keyCode=-1)}catch(e){}},$t.prototype.f=function(){return this.a};var Jt="closure_listenable_"+(1e6*Math.random()|0),Zt=0;function en(e,t,n,r,i){this.listener=e,this.proxy=null,this.src=t,this.type=n,this.capture=!!r,this.Ta=i,this.key=++Zt,this.ua=this.Na=!1}function tn(e){e.ua=!0,e.listener=null,e.proxy=null,e.src=null,e.Ta=null}function nn(e){this.src=e,this.a={},this.b=0}function rn(e,t){var n=t.type;n in e.a&&Q(e.a[n],t)&&(tn(t),0==e.a[n].length&&(delete e.a[n],e.b--))}function on(e,t,n,r){for(var i=0;i<e.length;++i){var o=e[i];if(!o.ua&&o.listener==t&&o.capture==!!n&&o.Ta==r)return i}return-1}nn.prototype.add=function(e,t,n,r,i){var o=e.toString();(e=this.a[o])||(e=this.a[o]=[],this.b++);var a=on(e,t,r,i);return-1<a?(t=e[a],n||(t.Na=!1)):((t=new en(t,this.src,o,!!r,i)).Na=n,e.push(t)),t};var an="closure_lm_"+(1e6*Math.random()|0),sn={};function un(e,t,n,r,i){if(r&&r.once)cn(e,t,n,r,i);else if(Array.isArray(t))for(var o=0;o<t.length;o++)un(e,t[o],n,r,i);else n=mn(n),e&&e[Jt]?wn(e,t,n,v(r)?!!r.capture:!!r,i):ln(e,t,n,!1,r,i)}function ln(e,t,n,r,i,o){if(!t)throw Error("Invalid event type");var a=v(i)?!!i.capture:!!i,s=yn(e);if(s||(e[an]=s=new nn(e)),!(n=s.add(t,n,r,a,o)).proxy){if(r=function(){var e=_n,t=qt?function(n){return e.call(t.src,t.listener,n)}:function(n){if(!(n=e.call(t.src,t.listener,n)))return n};return t}(),n.proxy=r,r.src=e,r.listener=n,e.addEventListener)Qt||(i=a),void 0===i&&(i=!1),e.addEventListener(t.toString(),r,i);else if(e.attachEvent)e.attachEvent(pn(t.toString()),r);else{if(!e.addListener||!e.removeListener)throw Error("addEventListener and attachEvent are unavailable.");e.addListener(r)}0}}function cn(e,t,n,r,i){if(Array.isArray(t))for(var o=0;o<t.length;o++)cn(e,t[o],n,r,i);else n=mn(n),e&&e[Jt]?En(e,t,n,v(r)?!!r.capture:!!r,i):ln(e,t,n,!0,r,i)}function fn(e,t,n,r,i){if(Array.isArray(t))for(var o=0;o<t.length;o++)fn(e,t[o],n,r,i);else r=v(r)?!!r.capture:!!r,n=mn(n),e&&e[Jt]?(e=e.u,(t=String(t).toString())in e.a&&(-1<(n=on(o=e.a[t],n,r,i))&&(tn(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete e.a[t],e.b--)))):e&&(e=yn(e))&&(t=e.a[t.toString()],e=-1,t&&(e=on(t,n,r,i)),(n=-1<e?t[e]:null)&&hn(n))}function hn(e){if("number"!=typeof e&&e&&!e.ua){var t=e.src;if(t&&t[Jt])rn(t.u,e);else{var n=e.type,r=e.proxy;t.removeEventListener?t.removeEventListener(n,r,e.capture):t.detachEvent?t.detachEvent(pn(n),r):t.addListener&&t.removeListener&&t.removeListener(r),(n=yn(t))?(rn(n,e),0==n.b&&(n.src=null,t[an]=null)):tn(e)}}}function pn(e){return e in sn?sn[e]:sn[e]="on"+e}function dn(e,t,n,r){var i=!0;if((e=yn(e))&&(t=e.a[t.toString()]))for(t=t.concat(),e=0;e<t.length;e++){var o=t[e];o&&o.capture==n&&!o.ua&&(o=vn(o,r),i=i&&!1!==o)}return i}function vn(e,t){var n=e.listener,r=e.Ta||e.src;return e.Na&&hn(e),n.call(r,t)}function _n(e,t){if(e.ua)return!0;if(!qt){if(!t)e:{t=["window","event"];for(var n=u,r=0;r<t.length;r++)if(null==(n=n[t[r]])){t=null;break e}t=n}if(t=new $t(r=t,this),n=!0,!(0>r.keyCode||null!=r.returnValue)){e:{var i=!1;if(0==r.keyCode)try{r.keyCode=-1;break e}catch(e){i=!0}(i||null==r.returnValue)&&(r.returnValue=!0)}for(r=[],i=t.b;i;i=i.parentNode)r.push(i);for(e=e.type,i=r.length-1;0<=i;i--){t.b=r[i];var o=dn(r[i],e,!0,t);n=n&&o}for(i=0;i<r.length;i++)t.b=r[i],o=dn(r[i],e,!1,t),n=n&&o}return n}return vn(e,new $t(t,this))}function yn(e){return(e=e[an])instanceof nn?e:null}var gn="__closure_events_fn_"+(1e9*Math.random()>>>0);function mn(e){return d(e)?e:(e[gn]||(e[gn]=function(t){return e.handleEvent(t)}),e[gn])}function bn(){Bt.call(this),this.u=new nn(this),this.Yb=this,this.eb=null}function wn(e,t,n,r,i){e.u.add(String(t),n,!1,r,i)}function En(e,t,n,r,i){e.u.add(String(t),n,!0,r,i)}function Tn(e,t,n,r){if(!(t=e.u.a[String(t)]))return!0;t=t.concat();for(var i=!0,o=0;o<t.length;++o){var a=t[o];if(a&&!a.ua&&a.capture==n){var s=a.listener,u=a.Ta||a.src;a.Na&&rn(e.u,a),i=!1!==s.call(u,r)&&i}}return i&&!r.defaultPrevented}function Cn(e,t,n){if(d(e))n&&(e=w(e,n));else{if(!e||"function"!=typeof e.handleEvent)throw Error("Invalid listener argument");e=w(e.handleEvent,e)}return 2147483647<Number(t)?-1:u.setTimeout(e,t||0)}function Sn(e){var t=null;return new bt((function(n,r){-1==(t=Cn((function(){n(void 0)}),e))&&r(Error("Failed to schedule timer."))})).o((function(e){throw u.clearTimeout(t),e}))}function Pn(e){if(e.V&&"function"==typeof e.V)return e.V();if("string"==typeof e)return e.split("");if(p(e)){for(var t=[],n=e.length,r=0;r<n;r++)t.push(e[r]);return t}for(r in t=[],n=0,e)t[n++]=e[r];return t}function On(e){if(e.X&&"function"==typeof e.X)return e.X();if(!e.V||"function"!=typeof e.V){if(p(e)||"string"==typeof e){var t=[];e=e.length;for(var n=0;n<e;n++)t.push(n);return t}for(var r in t=[],n=0,e)t[n++]=r;return t}}function In(e,t){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(e)if(e instanceof In)for(n=e.X(),r=0;r<n.length;r++)this.set(n[r],e.get(n[r]));else for(r in e)this.set(r,e[r])}function kn(e){if(e.c!=e.a.length){for(var t=0,n=0;t<e.a.length;){var r=e.a[t];xn(e.b,r)&&(e.a[n++]=r),t++}e.a.length=n}if(e.c!=e.a.length){var i={};for(n=t=0;t<e.a.length;)xn(i,r=e.a[t])||(e.a[n++]=r,i[r]=1),t++;e.a.length=n}}function xn(e,t){return Object.prototype.hasOwnProperty.call(e,t)}C(bn,Bt),bn.prototype[Jt]=!0,bn.prototype.addEventListener=function(e,t,n,r){un(this,e,t,n,r)},bn.prototype.removeEventListener=function(e,t,n,r){fn(this,e,t,n,r)},bn.prototype.dispatchEvent=function(e){var t,n=this.eb;if(n)for(t=[];n;n=n.eb)t.push(n);n=this.Yb;var r=e.type||e;if("string"==typeof e)e=new Yt(e,n);else if(e instanceof Yt)e.target=e.target||n;else{var i=e;_e(e=new Yt(r,n),i)}if(i=!0,t)for(var o=t.length-1;0<=o;o--){var a=e.b=t[o];i=Tn(a,r,!0,e)&&i}if(i=Tn(a=e.b=n,r,!0,e)&&i,i=Tn(a,r,!1,e)&&i,t)for(o=0;o<t.length;o++)i=Tn(a=e.b=t[o],r,!1,e)&&i;return i},bn.prototype.Ba=function(){if(bn.Za.Ba.call(this),this.u){var e,t=this.u;for(e in t.a){for(var n=t.a[e],r=0;r<n.length;r++)tn(n[r]);delete t.a[e],t.b--}}this.eb=null},(t=In.prototype).V=function(){kn(this);for(var e=[],t=0;t<this.a.length;t++)e.push(this.b[this.a[t]]);return e},t.X=function(){return kn(this),this.a.concat()},t.clear=function(){this.b={},this.c=this.a.length=0},t.get=function(e,t){return xn(this.b,e)?this.b[e]:t},t.set=function(e,t){xn(this.b,e)||(this.c++,this.a.push(e)),this.b[e]=t},t.forEach=function(e,t){for(var n=this.X(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);e.call(t,o,i,this)}};var An=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/\\#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Dn(e,t){var n;this.b=this.i=this.f="",this.l=null,this.g=this.c="",this.h=!1,e instanceof Dn?(this.h=void 0!==t?t:e.h,Nn(this,e.f),this.i=e.i,this.b=e.b,Rn(this,e.l),this.c=e.c,Mn(this,er(e.a)),this.g=e.g):e&&(n=String(e).match(An))?(this.h=!!t,Nn(this,n[1]||"",!0),this.i=Wn(n[2]||""),this.b=Wn(n[3]||"",!0),Rn(this,n[4]),this.c=Wn(n[5]||"",!0),Mn(this,n[6]||"",!0),this.g=Wn(n[7]||"")):(this.h=!!t,this.a=new Qn(null,this.h))}function Nn(e,t,n){e.f=n?Wn(t,!0):t,e.f&&(e.f=e.f.replace(/:$/,""))}function Rn(e,t){if(t){if(t=Number(t),isNaN(t)||0>t)throw Error("Bad port number "+t);e.l=t}else e.l=null}function Mn(e,t,n){t instanceof Qn?(e.a=t,function(e,t){t&&!e.f&&(Yn(e),e.c=null,e.a.forEach((function(e,t){var n=t.toLowerCase();t!=n&&(Xn(this,t),Zn(this,n,e))}),e)),e.f=t}(e.a,e.h)):(n||(t=Bn(t,qn)),e.a=new Qn(t,e.h))}function Ln(e,t,n){e.a.set(t,n)}function Fn(e,t){return e.a.get(t)}function jn(e){return e instanceof Dn?new Dn(e):new Dn(e,void 0)}function Un(e,t){var n=new Dn(null,void 0);return Nn(n,"https"),e&&(n.b=e),t&&(n.c=t),n}function Wn(e,t){return e?t?decodeURI(e.replace(/%25/g,"%2525")):decodeURIComponent(e):""}function Bn(e,t,n){return"string"==typeof e?(e=encodeURI(e).replace(t,Hn),n&&(e=e.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),e):null}function Hn(e){return"%"+((e=e.charCodeAt(0))>>4&15).toString(16)+(15&e).toString(16)}Dn.prototype.toString=function(){var e=[],t=this.f;t&&e.push(Bn(t,Kn,!0),":");var n=this.b;return(n||"file"==t)&&(e.push("//"),(t=this.i)&&e.push(Bn(t,Kn,!0),"@"),e.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.l)&&e.push(":",String(n))),(n=this.c)&&(this.b&&"/"!=n.charAt(0)&&e.push("/"),e.push(Bn(n,"/"==n.charAt(0)?Gn:Vn,!0))),(n=this.a.toString())&&e.push("?",n),(n=this.g)&&e.push("#",Bn(n,zn)),e.join("")},Dn.prototype.resolve=function(e){var t=new Dn(this),n=!!e.f;n?Nn(t,e.f):n=!!e.i,n?t.i=e.i:n=!!e.b,n?t.b=e.b:n=null!=e.l;var r=e.c;if(n)Rn(t,e.l);else if(n=!!e.c){if("/"!=r.charAt(0))if(this.b&&!this.c)r="/"+r;else{var i=t.c.lastIndexOf("/");-1!=i&&(r=t.c.substr(0,i+1)+r)}if(".."==(i=r)||"."==i)r="";else if(se(i,"./")||se(i,"/.")){r=0==i.lastIndexOf("/",0),i=i.split("/");for(var o=[],a=0;a<i.length;){var s=i[a++];"."==s?r&&a==i.length&&o.push(""):".."==s?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),r&&a==i.length&&o.push("")):(o.push(s),r=!0)}r=o.join("/")}else r=i}return n?t.c=r:n=""!==e.a.toString(),n?Mn(t,er(e.a)):n=!!e.g,n&&(t.g=e.g),t};var Kn=/[#\/\?@]/g,Vn=/[#\?:]/g,Gn=/[#\?]/g,qn=/[#\?@]/g,zn=/#/g;function Qn(e,t){this.b=this.a=null,this.c=e||null,this.f=!!t}function Yn(e){e.a||(e.a=new In,e.b=0,e.c&&function(e,t){if(e){e=e.split("&");for(var n=0;n<e.length;n++){var r=e[n].indexOf("="),i=null;if(0<=r){var o=e[n].substring(0,r);i=e[n].substring(r+1)}else o=e[n];t(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(e.c,(function(t,n){e.add(decodeURIComponent(t.replace(/\+/g," ")),n)})))}function $n(e){var t=On(e);if(void 0===t)throw Error("Keys are undefined");var n=new Qn(null,void 0);e=Pn(e);for(var r=0;r<t.length;r++){var i=t[r],o=e[r];Array.isArray(o)?Zn(n,i,o):n.add(i,o)}return n}function Xn(e,t){Yn(e),t=tr(e,t),xn(e.a.b,t)&&(e.c=null,e.b-=e.a.get(t).length,xn((e=e.a).b,t)&&(delete e.b[t],e.c--,e.a.length>2*e.c&&kn(e)))}function Jn(e,t){return Yn(e),t=tr(e,t),xn(e.a.b,t)}function Zn(e,t,n){Xn(e,t),0<n.length&&(e.c=null,e.a.set(tr(e,t),X(n)),e.b+=n.length)}function er(e){var t=new Qn;return t.c=e.c,e.a&&(t.a=new In(e.a),t.b=e.b),t}function tr(e,t){return t=String(t),e.f&&(t=t.toLowerCase()),t}function nr(e){var t=[];return function e(t,n,r){if(null==n)r.push("null");else{if("object"==typeof n){if(Array.isArray(n)){var i=n;n=i.length,r.push("[");for(var o="",a=0;a<n;a++)r.push(o),e(t,i[a],r),o=",";return void r.push("]")}if(!(n instanceof String||n instanceof Number||n instanceof Boolean)){for(i in r.push("{"),o="",n)Object.prototype.hasOwnProperty.call(n,i)&&("function"!=typeof(a=n[i])&&(r.push(o),ar(i,r),r.push(":"),e(t,a,r),o=","));return void r.push("}")}n=n.valueOf()}switch(typeof n){case"string":ar(n,r);break;case"number":r.push(isFinite(n)&&!isNaN(n)?String(n):"null");break;case"boolean":r.push(String(n));break;case"function":r.push("null");break;default:throw Error("Unknown type: "+typeof n)}}}(new rr,e,t),t.join("")}function rr(){}(t=Qn.prototype).add=function(e,t){Yn(this),this.c=null,e=tr(this,e);var n=this.a.get(e);return n||this.a.set(e,n=[]),n.push(t),this.b+=1,this},t.clear=function(){this.a=this.c=null,this.b=0},t.forEach=function(e,t){Yn(this),this.a.forEach((function(n,r){K(n,(function(n){e.call(t,n,r,this)}),this)}),this)},t.X=function(){Yn(this);for(var e=this.a.V(),t=this.a.X(),n=[],r=0;r<t.length;r++)for(var i=e[r],o=0;o<i.length;o++)n.push(t[r]);return n},t.V=function(e){Yn(this);var t=[];if("string"==typeof e)Jn(this,e)&&(t=$(t,this.a.get(tr(this,e))));else{e=this.a.V();for(var n=0;n<e.length;n++)t=$(t,e[n])}return t},t.set=function(e,t){return Yn(this),this.c=null,Jn(this,e=tr(this,e))&&(this.b-=this.a.get(e).length),this.a.set(e,[t]),this.b+=1,this},t.get=function(e,t){return e&&0<(e=this.V(e)).length?String(e[0]):t},t.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var e=[],t=this.a.X(),n=0;n<t.length;n++){var r=t[n],i=encodeURIComponent(String(r));r=this.V(r);for(var o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),e.push(a)}}return this.c=e.join("&")};var ir={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},or=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function ar(e,t){t.push('"',e.replace(or,(function(e){var t=ir[e];return t||(t="\\u"+(65536|e.charCodeAt(0)).toString(16).substr(1),ir[e]=t),t})),'"')}function sr(){var e=Pr();return ze&&!!nt&&11==nt||/Edge\/\d+/.test(e)}function ur(){return u.window&&u.window.location.href||self&&self.location&&self.location.href||""}function lr(e,t){t=t||u.window;var n="about:blank";e&&(n=Ae(Ne(e))),t.location.href=n}function cr(e){return!!((e=(e||Pr()).toLowerCase()).match(/android/)||e.match(/webos/)||e.match(/iphone|ipad|ipod/)||e.match(/blackberry/)||e.match(/windows phone/)||e.match(/iemobile/))}function fr(e){e=e||u.window;try{e.close()}catch(e){}}function hr(e,t,n){var r=Math.floor(1e9*Math.random()).toString();t=t||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-t)/2;for(a in t={width:t,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=Pr().toLowerCase(),r&&(t.target=r,se(n,"crios/")&&(t.target="_blank")),Tr(Pr())==wr&&(e=e||"http://localhost",t.scrollbars=!0),n=e||"",(e=t)||(e={}),r=window,t=n instanceof xe?n:Ne(void 0!==n.href?n.href:String(n)),n=e.target||n.target,i=[],e)switch(a){case"width":case"height":case"top":case"left":i.push(a+"="+e[a]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(a+"="+(e[a]?1:0))}var a=i.join(",");if((fe("iPhone")&&!fe("iPod")&&!fe("iPad")||fe("iPad")||fe("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(ye(a=ht(document,"A"),"HTMLAnchorElement"),t instanceof xe||t instanceof xe||(t="object"==typeof t&&t.ra?t.qa():String(t),De.test(t)||(t="about:invalid#zClosurez"),t=new xe(Me,t)),a.href=Ae(t),a.setAttribute("target",n),e.noreferrer&&a.setAttribute("rel","noreferrer"),(e=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),a.dispatchEvent(e),a={}):e.noreferrer?(a=r.open("",n,a),e=Ae(t),a&&(Ye&&se(e,";")&&(e="'"+e.replace(/'/g,"%27")+"'"),a.opener=null,e=Ue('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+He(e)+'">'),r=a.document)&&(r.write(Fe(e)),r.close())):(a=r.open(Ae(t),n,a))&&e.noopener&&(a.opener=null),a)try{a.focus()}catch(e){}return a}var pr=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,dr=/^[^@]+@[^@]+$/;function vr(){var e=null;return new bt((function(t){"complete"==u.document.readyState?t():(e=function(){t()},cn(window,"load",e))})).o((function(t){throw fn(window,"load",e),t}))}function _r(e){return e=e||Pr(),!("file:"!==Ar()&&"ionic:"!==Ar()||!e.toLowerCase().match(/iphone|ipad|ipod|android/))}function yr(){var e=u.window;try{return!(!e||e==e.top)}catch(e){return!1}}function gr(){return void 0!==u.WorkerGlobalScope&&"function"==typeof u.importScripts}function mr(){return r.a.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":r.a.INTERNAL.hasOwnProperty("node")?"Node":gr()?"Worker":"Browser"}function br(){var e=mr();return"ReactNative"===e||"Node"===e}var wr="Firefox",Er="Chrome";function Tr(e){var t=e.toLowerCase();return se(t,"opera/")||se(t,"opr/")||se(t,"opios/")?"Opera":se(t,"iemobile")?"IEMobile":se(t,"msie")||se(t,"trident/")?"IE":se(t,"edge/")?"Edge":se(t,"firefox/")?wr:se(t,"silk/")?"Silk":se(t,"blackberry")?"Blackberry":se(t,"webos")?"Webos":!se(t,"safari/")||se(t,"chrome/")||se(t,"crios/")||se(t,"android")?!se(t,"chrome/")&&!se(t,"crios/")||se(t,"edge/")?se(t,"android")?"Android":(e=e.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==e.length?e[1]:"Other":Er:"Safari"}var Cr={jd:"FirebaseCore-web",ld:"FirebaseUI-web"};function Sr(e,t){t=t||[];var n,r=[],i={};for(n in Cr)i[Cr[n]]=!0;for(n=0;n<t.length;n++)void 0!==i[t[n]]&&(delete i[t[n]],r.push(t[n]));return r.sort(),(t=r).length||(t=["FirebaseCore-web"]),"Browser"===(r=mr())?r=Tr(i=Pr()):"Worker"===r&&(r=Tr(i=Pr())+"-"+r),r+"/JsCore/"+e+"/"+t.join(",")}function Pr(){return u.navigator&&u.navigator.userAgent||""}function Or(e,t){e=e.split("."),t=t||u;for(var n=0;n<e.length&&"object"==typeof t&&null!=t;n++)t=t[e[n]];return n!=e.length&&(t=void 0),t}function Ir(){try{var e=u.localStorage,t=Lr();if(e)return e.setItem(t,"1"),e.removeItem(t),!sr()||!!u.indexedDB}catch(e){return gr()&&!!u.indexedDB}return!1}function kr(){return(xr()||"chrome-extension:"===Ar()||_r())&&!br()&&Ir()&&!gr()}function xr(){return"http:"===Ar()||"https:"===Ar()}function Ar(){return u.location&&u.location.protocol||null}function Dr(e){return!cr(e=e||Pr())&&Tr(e)!=wr}function Nr(e){return void 0===e?null:nr(e)}function Rr(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&null!==e[t]&&void 0!==e[t]&&(n[t]=e[t]);return n}function Mr(e){if(null!==e)return JSON.parse(e)}function Lr(e){return e||Math.floor(1e9*Math.random()).toString()}function Fr(e){return"Safari"!=Tr(e=e||Pr())&&!e.toLowerCase().match(/iphone|ipad|ipod/)}function jr(){var e=u.___jsl;if(e&&e.H)for(var t in e.H)if(e.H[t].r=e.H[t].r||[],e.H[t].L=e.H[t].L||[],e.H[t].r=e.H[t].L.concat(),e.CP)for(var n=0;n<e.CP.length;n++)e.CP[n]=null}function Ur(e,t){if(e>t)throw Error("Short delay should be less than long delay!");this.a=e,this.c=t,e=Pr(),t=mr(),this.b=cr(e)||"ReactNative"===t}function Wr(){var e=u.document;return!e||void 0===e.visibilityState||"visible"==e.visibilityState}function Br(e){try{var t=new Date(parseInt(e,10));if(!isNaN(t.getTime())&&!/[^0-9]/.test(e))return t.toUTCString()}catch(e){}return null}function Hr(){return!(!Or("fireauth.oauthhelper",u)&&!Or("fireauth.iframe",u))}Ur.prototype.get=function(){var e=u.navigator;return!e||"boolean"!=typeof e.onLine||!xr()&&"chrome-extension:"!==Ar()&&void 0===e.connection||e.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var Kr,Vr={};function Gr(e){Vr[e]||(Vr[e]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(e))}try{var qr={};Object.defineProperty(qr,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(qr,"abcd",{configurable:!0,enumerable:!0,value:2}),Kr=2==qr.abcd}catch(Ge){Kr=!1}function zr(e,t,n){Kr?Object.defineProperty(e,t,{configurable:!0,enumerable:!0,value:n}):e[t]=n}function Qr(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&zr(e,n,t[n])}function Yr(e){var t={};return Qr(t,e),t}function $r(e){var t=e;if("object"==typeof e&&null!=e)for(var n in t="length"in e?[]:{},e)zr(t,n,$r(e[n]));return t}function Xr(e){var t=e&&(e[ni]?"phone":null);if(!(t&&e&&e[ti]))throw new S("internal-error","Internal assert: invalid MultiFactorInfo object");zr(this,"uid",e[ti]),zr(this,"displayName",e[Zr]||null);var n=null;e[ei]&&(n=new Date(e[ei]).toUTCString()),zr(this,"enrollmentTime",n),zr(this,"factorId",t)}function Jr(e){try{var t=new ri(e)}catch(e){t=null}return t}Xr.prototype.v=function(){return{uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};var Zr="displayName",ei="enrolledAt",ti="mfaEnrollmentId",ni="phoneInfo";function ri(e){Xr.call(this,e),zr(this,"phoneNumber",e[ni])}function ii(e){var t={},n=e[ui],r=e[ci],i=e[fi];if(e=Jr(e[li]),!i||i!=ai&&i!=si&&!n||i==si&&!r||i==oi&&!e)throw Error("Invalid checkActionCode response!");i==si?(t[pi]=n||null,t[vi]=n||null,t[hi]=r):(t[pi]=r||null,t[vi]=r||null,t[hi]=n||null),t[di]=e||null,zr(this,yi,i),zr(this,_i,$r(t))}C(ri,Xr),ri.prototype.v=function(){var e=ri.Za.v.call(this);return e.phoneNumber=this.phoneNumber,e};var oi="REVERT_SECOND_FACTOR_ADDITION",ai="EMAIL_SIGNIN",si="VERIFY_AND_CHANGE_EMAIL",ui="email",li="mfaInfo",ci="newEmail",fi="requestType",hi="email",pi="fromEmail",di="multiFactorInfo",vi="previousEmail",_i="data",yi="operation";function gi(e){var t=Fn(e=jn(e),mi)||null,n=Fn(e,bi)||null,r=Fn(e,Ti)||null;if(r=r&&Si[r]||null,!t||!n||!r)throw new S("argument-error",mi+", "+bi+"and "+Ti+" are required in a valid action code URL.");Qr(this,{apiKey:t,operation:r,code:n,continueUrl:Fn(e,wi)||null,languageCode:Fn(e,Ei)||null,tenantId:Fn(e,Ci)||null})}var mi="apiKey",bi="oobCode",wi="continueUrl",Ei="languageCode",Ti="mode",Ci="tenantId",Si={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:oi,signIn:ai,verifyAndChangeEmail:si,verifyEmail:"VERIFY_EMAIL"};function Pi(e){try{return new gi(e)}catch(e){return null}}function Oi(e){var t=e[Di];if(void 0===t)throw new S("missing-continue-uri");if("string"!=typeof t||"string"==typeof t&&!t.length)throw new S("invalid-continue-uri");this.h=t,this.b=this.a=null,this.g=!1;var n=e[Ii];if(n&&"object"==typeof n){t=n[Mi];var r=n[Ni];if(n=n[Ri],"string"==typeof t&&t.length){if(this.a=t,void 0!==r&&"boolean"!=typeof r)throw new S("argument-error",Ni+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new S("argument-error",Ri+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==t)throw new S("argument-error",Mi+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new S("missing-android-pkg-name")}}else if(void 0!==n)throw new S("argument-error",Ii+" property must be a non null object when specified.");if(this.f=null,(t=e[Ai])&&"object"==typeof t){if("string"==typeof(t=t[Li])&&t.length)this.f=t;else if(void 0!==t)throw new S("argument-error",Li+" property must be a non empty string when specified.")}else if(void 0!==t)throw new S("argument-error",Ai+" property must be a non null object when specified.");if(void 0!==(t=e[xi])&&"boolean"!=typeof t)throw new S("argument-error",xi+" property must be a boolean when specified.");if(this.c=!!t,void 0!==(e=e[ki])&&("string"!=typeof e||"string"==typeof e&&!e.length))throw new S("argument-error",ki+" property must be a non empty string when specified.");this.i=e||null}var Ii="android",ki="dynamicLinkDomain",xi="handleCodeInApp",Ai="iOS",Di="url",Ni="installApp",Ri="minimumVersion",Mi="packageName",Li="bundleId";function Fi(e){var t={};for(var n in t.continueUrl=e.h,t.canHandleCodeInApp=e.c,(t.androidPackageName=e.a)&&(t.androidMinimumVersion=e.b,t.androidInstallApp=e.g),t.iOSBundleId=e.f,t.dynamicLinkDomain=e.i,t)null===t[n]&&delete t[n];return t}var ji=null;function Ui(e){var t="";return function(e,t){function n(t){for(;r<e.length;){var n=e.charAt(r++),i=ji[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return t}!function(){if(!ji){ji={};for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),t=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++)for(var r=e.concat(t[n].split("")),i=0;i<r.length;i++){var o=r[i];void 0===ji[o]&&(ji[o]=i)}}}();for(var r=0;;){var i=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===i)break;t(i<<2|o>>4),64!=a&&(t(o<<4&240|a>>2),64!=s&&t(a<<6&192|s))}}(e,(function(e){t+=String.fromCharCode(e)})),t}function Wi(e){var t=Hi(e);if(!(t&&t.sub&&t.iss&&t.aud&&t.exp))throw Error("Invalid JWT");this.g=e,this.c=t.exp,this.h=t.sub,T(),this.a=t.provider_id||t.firebase&&t.firebase.sign_in_provider||null,this.f=t.firebase&&t.firebase.tenant||null,this.b=!!t.is_anonymous||"anonymous"==this.a}function Bi(e){try{return new Wi(e)}catch(e){return null}}function Hi(e){if(!e)return null;if(3!=(e=e.split(".")).length)return null;for(var t=(4-(e=e[1]).length%4)%4,n=0;n<t;n++)e+=".";try{return JSON.parse(Ui(e))}catch(e){}return null}Wi.prototype.S=function(){return this.f},Wi.prototype.i=function(){return this.b},Wi.prototype.toString=function(){return this.g};var Ki="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Vi=["client_id","response_type","scope","redirect_uri","state"],Gi={kd:{Ha:"locale",ta:700,sa:600,ea:"facebook.com",Va:Vi},md:{Ha:null,ta:500,sa:750,ea:"github.com",Va:Vi},nd:{Ha:"hl",ta:515,sa:680,ea:"google.com",Va:Vi},td:{Ha:"lang",ta:485,sa:705,ea:"twitter.com",Va:Ki},gd:{Ha:"locale",ta:640,sa:600,ea:"apple.com",Va:[]}};function qi(e){for(var t in Gi)if(Gi[t].ea==e)return Gi[t];return null}function zi(e){var t={};t["facebook.com"]=Ji,t["google.com"]=eo,t["github.com"]=Zi,t["twitter.com"]=to;var n=e&&e[Yi];try{if(n)return t[n]?new t[n](e):new Xi(e);if(void 0!==e[Qi])return new $i(e)}catch(e){}return null}var Qi="idToken",Yi="providerId";function $i(e){var t=e[Yi];if(!t&&e[Qi]){var n=Bi(e[Qi]);n&&n.a&&(t=n.a)}if(!t)throw Error("Invalid additional user info!");"anonymous"!=t&&"custom"!=t||(t=null),n=!1,void 0!==e.isNewUser?n=!!e.isNewUser:"identitytoolkit#SignupNewUserResponse"===e.kind&&(n=!0),zr(this,"providerId",t),zr(this,"isNewUser",n)}function Xi(e){$i.call(this,e),zr(this,"profile",$r((e=Mr(e.rawUserInfo||"{}"))||{}))}function Ji(e){if(Xi.call(this,e),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function Zi(e){if(Xi.call(this,e),"github.com"!=this.providerId)throw Error("Invalid provider ID!");zr(this,"username",this.profile&&this.profile.login||null)}function eo(e){if(Xi.call(this,e),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function to(e){if(Xi.call(this,e),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");zr(this,"username",e.screenName||null)}function no(e){var t=jn(e),n=Fn(t,"link"),r=Fn(jn(n),"link");return t=Fn(t,"deep_link_id"),Fn(jn(t),"link")||t||r||n||e}function ro(e,t){if(!e&&!t)throw new S("internal-error","Internal assert: no raw session string available");if(e&&t)throw new S("internal-error","Internal assert: unable to determine the session type");this.a=e||null,this.b=t||null,this.type=this.a?io:oo}C(Xi,$i),C(Ji,Xi),C(Zi,Xi),C(eo,Xi),C(to,Xi);var io="enroll",oo="signin";function ao(){}function so(e,t){return e.then((function(e){if(e[Ya]){var n=Bi(e[Ya]);if(!n||t!=n.h)throw new S("user-mismatch");return e}throw new S("user-mismatch")})).o((function(e){throw e&&e.code&&e.code==I+"user-not-found"?new S("user-mismatch"):e}))}function uo(e,t){if(!t)throw new S("internal-error","failed to construct a credential");this.a=t,zr(this,"providerId",e),zr(this,"signInMethod",e)}function lo(e){return{pendingToken:e.a,requestUri:"http://localhost"}}function co(e){if(e&&e.providerId&&e.signInMethod&&0==e.providerId.indexOf("saml.")&&e.pendingToken)try{return new uo(e.providerId,e.pendingToken)}catch(e){}return null}function fo(e,t,n){if(this.a=null,t.idToken||t.accessToken)t.idToken&&zr(this,"idToken",t.idToken),t.accessToken&&zr(this,"accessToken",t.accessToken),t.nonce&&!t.pendingToken&&zr(this,"nonce",t.nonce),t.pendingToken&&(this.a=t.pendingToken);else{if(!t.oauthToken||!t.oauthTokenSecret)throw new S("internal-error","failed to construct a credential");zr(this,"accessToken",t.oauthToken),zr(this,"secret",t.oauthTokenSecret)}zr(this,"providerId",e),zr(this,"signInMethod",n)}function ho(e){var t={};return e.idToken&&(t.id_token=e.idToken),e.accessToken&&(t.access_token=e.accessToken),e.secret&&(t.oauth_token_secret=e.secret),t.providerId=e.providerId,e.nonce&&!e.a&&(t.nonce=e.nonce),t={postBody:$n(t).toString(),requestUri:"http://localhost"},e.a&&(delete t.postBody,t.pendingToken=e.a),t}function po(e){if(e&&e.providerId&&e.signInMethod){var t={idToken:e.oauthIdToken,accessToken:e.oauthTokenSecret?null:e.oauthAccessToken,oauthTokenSecret:e.oauthTokenSecret,oauthToken:e.oauthTokenSecret&&e.oauthAccessToken,nonce:e.nonce,pendingToken:e.pendingToken};try{return new fo(e.providerId,t,e.signInMethod)}catch(e){}}return null}function vo(e,t){this.Oc=t||[],Qr(this,{providerId:e,isOAuthProvider:!0}),this.Fb={},this.lb=(qi(e)||{}).Ha||null,this.kb=null}function _o(e){if("string"!=typeof e||0!=e.indexOf("saml."))throw new S("argument-error",'SAML provider IDs must be prefixed with "saml."');vo.call(this,e,[])}function yo(e){vo.call(this,e,Vi),this.a=[]}function go(){yo.call(this,"facebook.com")}function mo(e){if(!e)throw new S("argument-error","credential failed: expected 1 argument (the OAuth access token).");var t=e;return v(e)&&(t=e.accessToken),(new go).credential({accessToken:t})}function bo(){yo.call(this,"github.com")}function wo(e){if(!e)throw new S("argument-error","credential failed: expected 1 argument (the OAuth access token).");var t=e;return v(e)&&(t=e.accessToken),(new bo).credential({accessToken:t})}function Eo(){yo.call(this,"google.com"),this.Aa("profile")}function To(e,t){var n=e;return v(e)&&(n=e.idToken,t=e.accessToken),(new Eo).credential({idToken:n,accessToken:t})}function Co(){vo.call(this,"twitter.com",Ki)}function So(e,t){var n=e;if(v(n)||(n={oauthToken:e,oauthTokenSecret:t}),!n.oauthToken||!n.oauthTokenSecret)throw new S("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new fo("twitter.com",n,"twitter.com")}function Po(e,t,n){this.a=e,this.f=t,zr(this,"providerId","password"),zr(this,"signInMethod",n===Io.EMAIL_LINK_SIGN_IN_METHOD?Io.EMAIL_LINK_SIGN_IN_METHOD:Io.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Oo(e){return e&&e.email&&e.password?new Po(e.email,e.password,e.signInMethod):null}function Io(){Qr(this,{providerId:"password",isOAuthProvider:!1})}function ko(e,t){if(!(t=xo(t)))throw new S("argument-error","Invalid email link!");return new Po(e,t.code,Io.EMAIL_LINK_SIGN_IN_METHOD)}function xo(e){return(e=Pi(e=no(e)))&&e.operation===ai?e:null}function Ao(e){if(!(e.bb&&e.ab||e.Ja&&e.da))throw new S("internal-error");this.a=e,zr(this,"providerId","phone"),this.ea="phone",zr(this,"signInMethod","phone")}function Do(e){if(e&&"phone"===e.providerId&&(e.verificationId&&e.verificationCode||e.temporaryProof&&e.phoneNumber)){var t={};return K(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){e[n]&&(t[n]=e[n])})),new Ao(t)}return null}function No(e){return e.a.Ja&&e.a.da?{temporaryProof:e.a.Ja,phoneNumber:e.a.da}:{sessionInfo:e.a.bb,code:e.a.ab}}function Ro(e){try{this.a=e||r.a.auth()}catch(e){throw new S("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}Qr(this,{providerId:"phone",isOAuthProvider:!1})}function Mo(e,t){if(!e)throw new S("missing-verification-id");if(!t)throw new S("missing-verification-code");return new Ao({bb:e,ab:t})}function Lo(e){if(e.temporaryProof&&e.phoneNumber)return new Ao({Ja:e.temporaryProof,da:e.phoneNumber});var t=e&&e.providerId;if(!t||"password"===t)return null;var n=e&&e.oauthAccessToken,r=e&&e.oauthTokenSecret,i=e&&e.nonce,o=e&&e.oauthIdToken,a=e&&e.pendingToken;try{switch(t){case"google.com":return To(o,n);case"facebook.com":return mo(n);case"github.com":return wo(n);case"twitter.com":return So(n,r);default:return n||r||o||a?a?0==t.indexOf("saml.")?new uo(t,a):new fo(t,{pendingToken:a,idToken:e.oauthIdToken,accessToken:e.oauthAccessToken},t):new yo(t).credential({idToken:o,accessToken:n,rawNonce:i}):null}}catch(e){return null}}function Fo(e){if(!e.isOAuthProvider)throw new S("invalid-oauth-provider")}function jo(e,t,n,r,i,o,a){if(this.c=e,this.b=t||null,this.g=n||null,this.f=r||null,this.i=o||null,this.h=a||null,this.a=i||null,!this.g&&!this.a)throw new S("invalid-auth-event");if(this.g&&this.a)throw new S("invalid-auth-event");if(this.g&&!this.f)throw new S("invalid-auth-event")}function Uo(e){return(e=e||{}).type?new jo(e.type,e.eventId,e.urlResponse,e.sessionId,e.error&&P(e.error),e.postBody,e.tenantId):null}function Wo(){this.b=null,this.a=[]}ro.prototype.Fa=function(){return this.a?Ot(this.a):Ot(this.b)},ro.prototype.v=function(){return this.type==io?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}},ao.prototype.ia=function(){},ao.prototype.b=function(){},ao.prototype.c=function(){},ao.prototype.v=function(){},uo.prototype.ia=function(e){return vs(e,lo(this))},uo.prototype.b=function(e,t){var n=lo(this);return n.idToken=t,_s(e,n)},uo.prototype.c=function(e,t){return so(ys(e,lo(this)),t)},uo.prototype.v=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},fo.prototype.ia=function(e){return vs(e,ho(this))},fo.prototype.b=function(e,t){var n=ho(this);return n.idToken=t,_s(e,n)},fo.prototype.c=function(e,t){return so(ys(e,ho(this)),t)},fo.prototype.v=function(){var e={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(e.oauthIdToken=this.idToken),this.accessToken&&(e.oauthAccessToken=this.accessToken),this.secret&&(e.oauthTokenSecret=this.secret),this.nonce&&(e.nonce=this.nonce),this.a&&(e.pendingToken=this.a),e},vo.prototype.Ia=function(e){return this.Fb=de(e),this},C(_o,vo),C(yo,vo),yo.prototype.Aa=function(e){return z(this.a,e)||this.a.push(e),this},yo.prototype.Nb=function(){return X(this.a)},yo.prototype.credential=function(e,t){var n;if(!(n=v(e)?{idToken:e.idToken||null,accessToken:e.accessToken||null,nonce:e.rawNonce||null}:{idToken:e||null,accessToken:t||null}).idToken&&!n.accessToken)throw new S("argument-error","credential failed: must provide the ID token and/or the access token.");return new fo(this.providerId,n,this.providerId)},C(go,yo),zr(go,"PROVIDER_ID","facebook.com"),zr(go,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),C(bo,yo),zr(bo,"PROVIDER_ID","github.com"),zr(bo,"GITHUB_SIGN_IN_METHOD","github.com"),C(Eo,yo),zr(Eo,"PROVIDER_ID","google.com"),zr(Eo,"GOOGLE_SIGN_IN_METHOD","google.com"),C(Co,vo),zr(Co,"PROVIDER_ID","twitter.com"),zr(Co,"TWITTER_SIGN_IN_METHOD","twitter.com"),Po.prototype.ia=function(e){return this.signInMethod==Io.EMAIL_LINK_SIGN_IN_METHOD?Js(e,Ss,{email:this.a,oobCode:this.f}):Js(e,zs,{email:this.a,password:this.f})},Po.prototype.b=function(e,t){return this.signInMethod==Io.EMAIL_LINK_SIGN_IN_METHOD?Js(e,Ps,{idToken:t,email:this.a,oobCode:this.f}):Js(e,Us,{idToken:t,email:this.a,password:this.f})},Po.prototype.c=function(e,t){return so(this.ia(e),t)},Po.prototype.v=function(){return{email:this.a,password:this.f,signInMethod:this.signInMethod}},Qr(Io,{PROVIDER_ID:"password"}),Qr(Io,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),Qr(Io,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Ao.prototype.ia=function(e){return e.cb(No(this))},Ao.prototype.b=function(e,t){var n=No(this);return n.idToken=t,Js(e,Ys,n)},Ao.prototype.c=function(e,t){var n=No(this);return n.operation="REAUTH",so(e=Js(e,$s,n),t)},Ao.prototype.v=function(){var e={providerId:"phone"};return this.a.bb&&(e.verificationId=this.a.bb),this.a.ab&&(e.verificationCode=this.a.ab),this.a.Ja&&(e.temporaryProof=this.a.Ja),this.a.da&&(e.phoneNumber=this.a.da),e},Ro.prototype.cb=function(e,t){var n=this.a.b;return Ot(t.verify()).then((function(r){if("string"!=typeof r)throw new S("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(t.type){case"recaptcha":var i=v(e)?e.session:null,o=v(e)?e.phoneNumber:e;return(i&&i.type==io?i.Fa().then((function(e){return function(e,t){return Js(e,Bs,t).then((function(e){return e.phoneSessionInfo.sessionInfo}))}(n,{idToken:e,phoneEnrollmentInfo:{phoneNumber:o,recaptchaToken:r}})})):i&&i.type==oo?i.Fa().then((function(t){return function(e,t){return Js(e,Hs,t).then((function(e){return e.phoneResponseInfo.sessionInfo}))}(n,{mfaPendingCredential:t,mfaEnrollmentId:e.multiFactorHint&&e.multiFactorHint.uid||e.multiFactorUid,phoneSignInInfo:{recaptchaToken:r}})})):function(e,t){return Js(e,Fs,t)}(n,{phoneNumber:o,recaptchaToken:r})).then((function(e){return"function"==typeof t.reset&&t.reset(),e}),(function(e){throw"function"==typeof t.reset&&t.reset(),e}));default:throw new S("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},Qr(Ro,{PROVIDER_ID:"phone"}),Qr(Ro,{PHONE_SIGN_IN_METHOD:"phone"}),jo.prototype.getUid=function(){var e=[];return e.push(this.c),this.b&&e.push(this.b),this.f&&e.push(this.f),this.h&&e.push(this.h),e.join("-")},jo.prototype.S=function(){return this.h},jo.prototype.v=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.v()}};var Bo,Ho=null;function Ko(e){var t="unauthorized-domain",n=void 0,r=jn(e);e=r.b,"chrome-extension"==(r=r.f)?n=Be("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",e):"http"==r||"https"==r?n=Be("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",e):t="operation-not-supported-in-this-environment",S.call(this,t,n)}function Vo(e,t,n){S.call(this,e,n),(e=t||{}).Gb&&zr(this,"email",e.Gb),e.da&&zr(this,"phoneNumber",e.da),e.credential&&zr(this,"credential",e.credential),e.Wb&&zr(this,"tenantId",e.Wb)}function Go(e){if(e.code){var t=e.code||"";0==t.indexOf(I)&&(t=t.substring(I.length));var n={credential:Lo(e),Wb:e.tenantId};if(e.email)n.Gb=e.email;else if(e.phoneNumber)n.da=e.phoneNumber;else if(!n.credential)return new S(t,e.message||void 0);return new Vo(t,n,e.message)}return null}function qo(){}function zo(e){return e.c||(e.c=e.b())}function Qo(){}function Yo(e){if(!e.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var t=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<t.length;n++){var r=t[n];try{return new ActiveXObject(r),e.f=r}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return e.f}function $o(){}function Xo(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=w(this.oc,this),this.a.onerror=w(this.Pb,this),this.a.onprogress=w(this.pc,this),this.a.ontimeout=w(this.tc,this)}function Jo(e,t){e.readyState=t,e.onreadystatechange&&e.onreadystatechange()}function Zo(e,t,n){this.reset(e,t,n,void 0,void 0)}C(Ko,S),C(Vo,S),Vo.prototype.v=function(){var e={code:this.code,message:this.message};this.email&&(e.email=this.email),this.phoneNumber&&(e.phoneNumber=this.phoneNumber),this.tenantId&&(e.tenantId=this.tenantId);var t=this.credential&&this.credential.v();return t&&_e(e,t),e},Vo.prototype.toJSON=function(){return this.v()},qo.prototype.c=null,C(Qo,qo),Qo.prototype.a=function(){var e=Yo(this);return e?new ActiveXObject(e):new XMLHttpRequest},Qo.prototype.b=function(){var e={};return Yo(this)&&(e[0]=!0,e[1]=!0),e},Bo=new Qo,C($o,qo),$o.prototype.a=function(){var e=new XMLHttpRequest;if("withCredentials"in e)return e;if("undefined"!=typeof XDomainRequest)return new Xo;throw Error("Unsupported browser")},$o.prototype.b=function(){return{}},(t=Xo.prototype).open=function(e,t,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(e,t)},t.send=function(e){if(e){if("string"!=typeof e)throw Error("Only string data is supported");this.a.send(e)}else this.a.send()},t.abort=function(){this.a.abort()},t.setRequestHeader=function(){},t.getResponseHeader=function(e){return"content-type"==e.toLowerCase()?this.a.contentType:""},t.oc=function(){this.status=200,this.response=this.responseText=this.a.responseText,Jo(this,4)},t.Pb=function(){this.status=500,this.response=this.responseText="",Jo(this,4)},t.tc=function(){this.Pb()},t.pc=function(){this.status=200,Jo(this,1)},t.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},Zo.prototype.a=null;function ea(e){this.f=e,this.b=this.c=this.a=null}function ta(e,t){this.name=e,this.value=t}Zo.prototype.reset=function(e,t,n,r,i){"number"==typeof i||0,r||T(),delete this.a},ta.prototype.toString=function(){return this.name};var na=new ta("SEVERE",1e3),ra=new ta("WARNING",900),ia=new ta("CONFIG",700),oa=new ta("FINE",500);ea.prototype.log=function(e,t,n){if(e.value>=function e(t){return t.c?t.c:t.a?e(t.a):(M("Root logger has no level set."),null)}(this).value)for(d(t)&&(t=t()),e=new Zo(e,String(t),this.f),n&&(e.a=n),n=this;n;)n=n.a};var aa={},sa=null;function ua(e){var t;if(sa||(sa=new ea(""),aa[""]=sa,sa.c=ia),!(t=aa[e])){t=new ea(e);var n=e.lastIndexOf("."),r=e.substr(n+1);(n=ua(e.substr(0,n))).b||(n.b={}),n.b[r]=t,t.a=n,aa[e]=t}return t}function la(e,t){e&&e.log(oa,t,void 0)}function ca(e){this.f=e}function fa(e){bn.call(this),this.s=e,this.readyState=ha,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.i=new Headers,this.b=null,this.m="GET",this.g="",this.a=!1,this.h=ua("goog.net.FetchXmlHttp"),this.l=this.c=this.f=null}C(ca,qo),ca.prototype.a=function(){return new fa(this.f)},ca.prototype.b=function(e){return function(){return e}}({}),C(fa,bn);var ha=0;function pa(e){e.c.read().then(e.nc.bind(e)).catch(e.Sa.bind(e))}function da(e,t){t&&e.f&&(e.status=e.f.status,e.statusText=e.f.statusText),e.readyState=4,e.f=null,e.c=null,e.l=null,va(e)}function va(e){e.onreadystatechange&&e.onreadystatechange.call(e)}function _a(e){bn.call(this),this.headers=new In,this.D=e||null,this.c=!1,this.B=this.a=null,this.h=this.P=this.l="",this.f=this.O=this.i=this.N=!1,this.g=0,this.s=null,this.m=ya,this.w=this.R=!1}(t=fa.prototype).open=function(e,t){if(this.readyState!=ha)throw this.abort(),Error("Error reopening a connection");this.m=e,this.g=t,this.readyState=1,va(this)},t.send=function(e){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var t={headers:this.i,method:this.m,credentials:void 0,cache:void 0};e&&(t.body=e),this.s.fetch(new Request(this.g,t)).then(this.sc.bind(this),this.Sa.bind(this))},t.abort=function(){this.response=this.responseText="",this.i=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,da(this,!1)),this.readyState=ha},t.sc=function(e){this.a&&(this.f=e,this.b||(this.b=e.headers,this.readyState=2,va(this)),this.a&&(this.readyState=3,va(this),this.a&&("arraybuffer"===this.responseType?e.arrayBuffer().then(this.qc.bind(this),this.Sa.bind(this)):void 0!==u.ReadableStream&&"body"in e?(this.response=this.responseText="",this.c=e.body.getReader(),this.l=new TextDecoder,pa(this)):e.text().then(this.rc.bind(this),this.Sa.bind(this)))))},t.nc=function(e){if(this.a){var t=this.l.decode(e.value?e.value:new Uint8Array(0),{stream:!e.done});t&&(this.response=this.responseText+=t),e.done?da(this,!0):va(this),3==this.readyState&&pa(this)}},t.rc=function(e){this.a&&(this.response=this.responseText=e,da(this,!0))},t.qc=function(e){this.a&&(this.response=e,da(this,!0))},t.Sa=function(e){var t=this.h;t&&t.log(ra,"Failed to fetch url "+this.g,e instanceof Error?e:Error(e)),this.a&&da(this,!0)},t.setRequestHeader=function(e,t){this.i.append(e,t)},t.getResponseHeader=function(e){return this.b?this.b.get(e.toLowerCase())||"":((e=this.h)&&e.log(ra,"Attempting to get response header but no headers have been received for url: "+this.g,void 0),"")},t.getAllResponseHeaders=function(){if(!this.b){var e=this.h;return e&&e.log(ra,"Attempting to get all response headers but no headers have been received for url: "+this.g,void 0),""}e=[];for(var t=this.b.entries(),n=t.next();!n.done;)n=n.value,e.push(n[0]+": "+n[1]),n=t.next();return e.join("\r\n")},C(_a,bn);var ya="";_a.prototype.b=ua("goog.net.XhrIo");var ga=/^https?$/i,ma=["POST","PUT"];function ba(e,t,n,r,i){if(e.a)throw Error("[goog.net.XhrIo] Object is active with another request="+e.l+"; newUri="+t);n=n?n.toUpperCase():"GET",e.l=t,e.h="",e.P=n,e.N=!1,e.c=!0,e.a=e.D?e.D.a():Bo.a(),e.B=e.D?zo(e.D):zo(Bo),e.a.onreadystatechange=w(e.Sb,e);try{la(e.b,ka(e,"Opening Xhr")),e.O=!0,e.a.open(n,String(t),!0),e.O=!1}catch(t){return la(e.b,ka(e,"Error opening Xhr: "+t.message)),void Ea(e,t)}t=r||"";var o=new In(e.headers);i&&function(e,t){if(e.forEach&&"function"==typeof e.forEach)e.forEach(t,void 0);else if(p(e)||"string"==typeof e)K(e,t,void 0);else for(var n=On(e),r=Pn(e),i=r.length,o=0;o<i;o++)t.call(void 0,r[o],n&&n[o],e)}(i,(function(e,t){o.set(t,e)})),i=function(e){e:{for(var t=wa,n=e.length,r="string"==typeof e?e.split(""):e,i=0;i<n;i++)if(i in r&&t.call(void 0,r[i],i,e)){t=i;break e}t=-1}return 0>t?null:"string"==typeof e?e.charAt(t):e[t]}(o.X()),r=u.FormData&&t instanceof u.FormData,!z(ma,n)||i||r||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(e,t){this.a.setRequestHeader(t,e)}),e),e.m&&(e.a.responseType=e.m),"withCredentials"in e.a&&e.a.withCredentials!==e.R&&(e.a.withCredentials=e.R);try{Pa(e),0<e.g&&(e.w=function(e){return ze&&it(9)&&"number"==typeof e.timeout&&void 0!==e.ontimeout}(e.a),la(e.b,ka(e,"Will abort after "+e.g+"ms if incomplete, xhr2 "+e.w)),e.w?(e.a.timeout=e.g,e.a.ontimeout=w(e.Ka,e)):e.s=Cn(e.Ka,e.g,e)),la(e.b,ka(e,"Sending request")),e.i=!0,e.a.send(t),e.i=!1}catch(t){la(e.b,ka(e,"Send error: "+t.message)),Ea(e,t)}}function wa(e){return"content-type"==e.toLowerCase()}function Ea(e,t){e.c=!1,e.a&&(e.f=!0,e.a.abort(),e.f=!1),e.h=t,Ta(e),Sa(e)}function Ta(e){e.N||(e.N=!0,e.dispatchEvent("complete"),e.dispatchEvent("error"))}function Ca(e){if(e.c&&void 0!==s)if(e.B[1]&&4==Oa(e)&&2==Ia(e))la(e.b,ka(e,"Local request error detected and ignored"));else if(e.i&&4==Oa(e))Cn(e.Sb,0,e);else if(e.dispatchEvent("readystatechange"),4==Oa(e)){la(e.b,ka(e,"Request complete")),e.c=!1;try{var t,n=Ia(e);e:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break e;default:r=!1}if(!(t=r)){var i;if(i=0===n){var o=String(e.l).match(An)[1]||null;if(!o&&u.self&&u.self.location){var a=u.self.location.protocol;o=a.substr(0,a.length-1)}i=!ga.test(o?o.toLowerCase():"")}t=i}if(t)e.dispatchEvent("complete"),e.dispatchEvent("success");else{try{var l=2<Oa(e)?e.a.statusText:""}catch(t){la(e.b,"Can not get status: "+t.message),l=""}e.h=l+" ["+Ia(e)+"]",Ta(e)}}finally{Sa(e)}}}function Sa(e,t){if(e.a){Pa(e);var n=e.a,r=e.B[0]?f:null;e.a=null,e.B=null,t||e.dispatchEvent("ready");try{n.onreadystatechange=r}catch(t){(e=e.b)&&e.log(na,"Problem encountered resetting onreadystatechange: "+t.message,void 0)}}}function Pa(e){e.a&&e.w&&(e.a.ontimeout=null),e.s&&(u.clearTimeout(e.s),e.s=null)}function Oa(e){return e.a?e.a.readyState:0}function Ia(e){try{return 2<Oa(e)?e.a.status:-1}catch(e){return-1}}function ka(e,t){return t+" ["+e.P+" "+e.l+" "+Ia(e)+"]"}function xa(e){var t=Ba;this.g=[],this.w=t,this.s=e||null,this.f=this.a=!1,this.c=void 0,this.u=this.B=this.i=!1,this.h=0,this.b=null,this.l=0}function Aa(e,t,n){e.a=!0,e.c=n,e.f=!t,Ma(e)}function Da(e){if(e.a){if(!e.u)throw new La(e);e.u=!1}}function Na(e,t,n,r){e.g.push([t,n,r]),e.a&&Ma(e)}function Ra(e){return q(e.g,(function(e){return d(e[1])}))}function Ma(e){if(e.h&&e.a&&Ra(e)){var t=e.h,n=Ua[t];n&&(u.clearTimeout(n.a),delete Ua[t]),e.h=0}e.b&&(e.b.l--,delete e.b),t=e.c;for(var r=n=!1;e.g.length&&!e.i;){var i=e.g.shift(),o=i[0],a=i[1];if(i=i[2],o=e.f?a:o)try{var s=o.call(i||e.s,t);void 0!==s&&(e.f=e.f&&(s==t||s instanceof Error),e.c=t=s),(D(t)||"function"==typeof u.Promise&&t instanceof u.Promise)&&(r=!0,e.i=!0)}catch(r){t=r,e.f=!0,Ra(e)||(n=!0)}}e.c=t,r&&(s=w(e.m,e,!0),r=w(e.m,e,!1),t instanceof xa?(Na(t,s,r),t.B=!0):t.then(s,r)),n&&(t=new ja(t),Ua[t.a]=t,e.h=t.a)}function La(){N.call(this)}function Fa(){N.call(this)}function ja(e){this.a=u.setTimeout(w(this.c,this),0),this.b=e}(t=_a.prototype).Ka=function(){void 0!==s&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",la(this.b,ka(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},t.abort=function(){this.a&&this.c&&(la(this.b,ka(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),Sa(this))},t.Ba=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),Sa(this,!0)),_a.Za.Ba.call(this)},t.Sb=function(){this.wa||(this.O||this.i||this.f?Ca(this):this.Hc())},t.Hc=function(){Ca(this)},t.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case ya:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var e=this.b;return e&&e.log(na,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(e){return la(this.b,"Can not get response: "+e.message),null}},xa.prototype.cancel=function(e){if(this.a)this.c instanceof xa&&this.c.cancel();else{if(this.b){var t=this.b;delete this.b,e?t.cancel(e):(t.l--,0>=t.l&&t.cancel())}this.w?this.w.call(this.s,this):this.u=!0,this.a||(e=new Fa(this),Da(this),Aa(this,!1,e))}},xa.prototype.m=function(e,t){this.i=!1,Aa(this,e,t)},xa.prototype.then=function(e,t,n){var r,i,o=new bt((function(e,t){r=e,i=t}));return Na(this,r,(function(e){e instanceof Fa?o.cancel():i(e)})),o.then(e,t,n)},xa.prototype.$goog_Thenable=!0,C(La,N),La.prototype.message="Deferred has already fired",La.prototype.name="AlreadyCalledError",C(Fa,N),Fa.prototype.message="Deferred was canceled",Fa.prototype.name="CanceledError",ja.prototype.c=function(){throw delete Ua[this.a],this.b};var Ua={};function Wa(e){var t={},n=t.document||document,r=Ce(e).toString(),i=ht(document,"SCRIPT"),o={Tb:i,Ka:void 0},a=new xa(o),s=null,f=null!=t.timeout?t.timeout:5e3;return 0<f&&(s=window.setTimeout((function(){Ha(i,!0);var e=new Ga(Va,"Timeout reached for loading script "+r);Da(a),Aa(a,!1,e)}),f),o.Ka=s),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(Ha(i,t.ud||!1,s),Da(a),Aa(a,!0,null))},i.onerror=function(){Ha(i,!0,s);var e=new Ga(Ka,"Error while loading script "+r);Da(a),Aa(a,!1,e)},_e(o=t.attributes||{},{type:"text/javascript",charset:"UTF-8"}),st(i,o),function(e,t){ye(e,"HTMLScriptElement"),e.src=Ce(t),null===c&&(c=(t=(t=u.document).querySelector&&t.querySelector("script[nonce]"))&&(t=t.nonce||t.getAttribute("nonce"))&&l.test(t)?t:""),(t=c)&&e.setAttribute("nonce",t)}(i,e),function(e){var t;return(t=(e||document).getElementsByTagName("HEAD"))&&0!=t.length?t[0]:e.documentElement}(n).appendChild(i),a}function Ba(){if(this&&this.Tb){var e=this.Tb;e&&"SCRIPT"==e.tagName&&Ha(e,!0,this.Ka)}}function Ha(e,t,n){null!=n&&u.clearTimeout(n),e.onload=f,e.onerror=f,e.onreadystatechange=f,t&&window.setTimeout((function(){e&&e.parentNode&&e.parentNode.removeChild(e)}),0)}var Ka=0,Va=1;function Ga(e,t){var n="Jsloader error (code #"+e+")";t&&(n+=": "+t),N.call(this,n),this.code=e}function qa(e){this.f=e}function za(e,t,n){if(this.c=e,e=t||{},this.u=e.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.m=e.secureTokenTimeout||$a,this.g=de(e.secureTokenHeaders||Xa),this.h=e.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.l=e.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/",this.i=e.firebaseTimeout||Ja,this.a=de(e.firebaseHeaders||Za),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==mr(),!(n=u.XMLHttpRequest||n&&r.a.INTERNAL.node&&r.a.INTERNAL.node.XMLHttpRequest)&&!gr())throw new S("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,gr()?this.f=new ca(self):br()?this.f=new qa(n):this.f=new $o,this.b=null}C(Ga,N),C(qa,qo),qa.prototype.a=function(){return new this.f},qa.prototype.b=function(){return{}};var Qa,Ya="idToken",$a=new Ur(3e4,6e4),Xa={"Content-Type":"application/x-www-form-urlencoded"},Ja=new Ur(3e4,6e4),Za={"Content-Type":"application/json"};function es(e,t){t?e.a["X-Firebase-Locale"]=t:delete e.a["X-Firebase-Locale"]}function ts(e,t){t?(e.a["X-Client-Version"]=t,e.g["X-Client-Version"]=t):(delete e.a["X-Client-Version"],delete e.g["X-Client-Version"])}function ns(e,t,n,r,i,o,a){(function(){var e=Pr();return!((e=Tr(e)!=Er?null:(e=e.match(/\sChrome\/(\d+)/i))&&2==e.length?parseInt(e[1],10):null)&&30>e)&&(!ze||!nt||9<nt)})()||gr()?e=w(e.w,e):(Qa||(Qa=new bt((function(e,t){!function(e,t){if(((window.gapi||{}).client||{}).request)e();else{u[is]=function(){((window.gapi||{}).client||{}).request?e():t(Error("CORS_UNSUPPORTED"))},function(e,t){Na(e,null,t,void 0)}(Wa(Se(rs,{onload:is})),(function(){t(Error("CORS_UNSUPPORTED"))}))}}(e,t)}))),e=w(e.s,e)),e(t,n,r,i,o,a)}za.prototype.S=function(){return this.b},za.prototype.w=function(e,t,n,r,i,o){if(gr()&&(void 0===u.fetch||void 0===u.Headers||void 0===u.Request))throw new S("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var a=new _a(this.f);if(o){a.g=Math.max(0,o);var s=setTimeout((function(){a.dispatchEvent("timeout")}),o)}wn(a,"complete",(function(){s&&clearTimeout(s);var e=null;try{e=JSON.parse(function(e){try{return e.a?e.a.responseText:""}catch(t){return la(e.b,"Can not get responseText: "+t.message),""}}(this))||null}catch(t){e=null}t&&t(e)})),En(a,"ready",(function(){s&&clearTimeout(s),Vt(this)})),En(a,"timeout",(function(){s&&clearTimeout(s),Vt(this),t&&t(null)})),ba(a,e,n,r,i)};var rs=new ge(we,"https://apis.google.com/js/client.js?onload=%{onload}"),is="__fcb"+Math.floor(1e6*Math.random()).toString();function os(e,t,n,r,i,o,a){var s=jn(t+n);Ln(s,"key",e.c),a&&Ln(s,"cb",T().toString());var u="GET"==r;if(u)for(var l in i)i.hasOwnProperty(l)&&Ln(s,l,i[l]);return new bt((function(t,n){ns(e,s.toString(),(function(e){e?e.error?n(eu(e,o||{})):t(e):n(new S("network-request-failed"))}),r,u?void 0:nr(Rr(i)),e.a,e.i.get())}))}function as(e){if("string"!=typeof(e=e.email)||!dr.test(e))throw new S("invalid-email")}function ss(e){"email"in e&&as(e)}function us(e){if(!e[Ya]){if(e.mfaPendingCredential)throw new S("multi-factor-auth-required",null,de(e));throw new S("internal-error")}}function ls(e){if(e.phoneNumber||e.temporaryProof){if(!e.phoneNumber||!e.temporaryProof)throw new S("internal-error")}else{if(!e.sessionInfo)throw new S("missing-verification-id");if(!e.code)throw new S("missing-verification-code")}}za.prototype.s=function(e,t,n,r,i){var o=this;Qa.then((function(){window.gapi.client.setApiKey(o.c);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:e,method:n,body:r,headers:i,authType:"none",callback:function(e){window.gapi.auth.setToken(a),t&&t(e)}})})).o((function(e){t&&t({error:{message:e&&e.message||"CORS_UNSUPPORTED"}})}))},za.prototype.vb=function(){return Js(this,Ws,{})},za.prototype.xb=function(e,t){return Js(this,js,{idToken:e,email:t})},za.prototype.yb=function(e,t){return Js(this,Us,{idToken:e,password:t})};var cs={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function fs(e){if(!e.phoneVerificationInfo)throw new S("internal-error");if(!e.phoneVerificationInfo.sessionInfo)throw new S("missing-verification-id");if(!e.phoneVerificationInfo.code)throw new S("missing-verification-code")}function hs(e){if(!e.requestUri||!e.sessionId&&!e.postBody&&!e.pendingToken)throw new S("internal-error")}function ps(e,t){return t.oauthIdToken&&t.providerId&&0==t.providerId.indexOf("oidc.")&&!t.pendingToken&&(e.sessionId?t.nonce=e.sessionId:e.postBody&&(Jn(e=new Qn(e.postBody),"nonce")&&(t.nonce=e.get("nonce")))),t}function ds(e){var t=null;if(e.needConfirmation?(e.code="account-exists-with-different-credential",t=Go(e)):"FEDERATED_USER_ID_ALREADY_LINKED"==e.errorMessage?(e.code="credential-already-in-use",t=Go(e)):"EMAIL_EXISTS"==e.errorMessage?(e.code="email-already-in-use",t=Go(e)):e.errorMessage&&(t=Zs(e.errorMessage)),t)throw t;us(e)}function vs(e,t){return t.returnIdpCredential=!0,Js(e,Ks,t)}function _s(e,t){return t.returnIdpCredential=!0,Js(e,Gs,t)}function ys(e,t){return t.returnIdpCredential=!0,t.autoCreate=!1,Js(e,Vs,t)}function gs(e){if(!e.oobCode)throw new S("invalid-action-code")}(t=za.prototype).zb=function(e,t){var n={idToken:e},r=[];return he(cs,(function(e,i){var o=t[i];null===o?r.push(e):i in t&&(n[i]=o)})),r.length&&(n.deleteAttribute=r),Js(this,js,n)},t.rb=function(e,t){return _e(e={requestType:"PASSWORD_RESET",email:e},t),Js(this,Ns,e)},t.sb=function(e,t){return _e(e={requestType:"EMAIL_SIGNIN",email:e},t),Js(this,xs,e)},t.qb=function(e,t){return _e(e={requestType:"VERIFY_EMAIL",idToken:e},t),Js(this,As,e)},t.Ab=function(e,t,n){return _e(e={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:e,newEmail:t},n),Js(this,Ds,e)},t.cb=function(e){return Js(this,Qs,e)},t.jb=function(e,t){return Js(this,Ls,{oobCode:e,newPassword:t})},t.Pa=function(e){return Js(this,bs,{oobCode:e})},t.fb=function(e){return Js(this,ms,{oobCode:e})};var ms={endpoint:"setAccountInfo",A:gs,Y:"email",C:!0},bs={endpoint:"resetPassword",A:gs,G:function(e){var t=e.requestType;if(!t||!e.email&&"EMAIL_SIGNIN"!=t&&"VERIFY_AND_CHANGE_EMAIL"!=t)throw new S("internal-error")},C:!0},ws={endpoint:"signupNewUser",A:function(e){if(as(e),!e.password)throw new S("weak-password")},G:us,U:!0,C:!0},Es={endpoint:"createAuthUri",C:!0},Ts={endpoint:"deleteAccount",M:["idToken"]},Cs={endpoint:"setAccountInfo",M:["idToken","deleteProvider"],A:function(e){if("array"!=h(e.deleteProvider))throw new S("internal-error")}},Ss={endpoint:"emailLinkSignin",M:["email","oobCode"],A:as,G:us,U:!0,C:!0},Ps={endpoint:"emailLinkSignin",M:["idToken","email","oobCode"],A:as,G:us,U:!0},Os={endpoint:"accounts/mfaEnrollment:finalize",M:["idToken","phoneVerificationInfo"],A:fs,G:us,C:!0,La:!0},Is={endpoint:"accounts/mfaSignIn:finalize",M:["mfaPendingCredential","phoneVerificationInfo"],A:fs,G:us,C:!0,La:!0},ks={endpoint:"getAccountInfo"},xs={endpoint:"getOobConfirmationCode",M:["requestType"],A:function(e){if("EMAIL_SIGNIN"!=e.requestType)throw new S("internal-error");as(e)},Y:"email",C:!0},As={endpoint:"getOobConfirmationCode",M:["idToken","requestType"],A:function(e){if("VERIFY_EMAIL"!=e.requestType)throw new S("internal-error")},Y:"email",C:!0},Ds={endpoint:"getOobConfirmationCode",M:["idToken","newEmail","requestType"],A:function(e){if("VERIFY_AND_CHANGE_EMAIL"!=e.requestType)throw new S("internal-error")},Y:"email",C:!0},Ns={endpoint:"getOobConfirmationCode",M:["requestType"],A:function(e){if("PASSWORD_RESET"!=e.requestType)throw new S("internal-error");as(e)},Y:"email",C:!0},Rs={hb:!0,endpoint:"getProjectConfig",Rb:"GET"},Ms={hb:!0,endpoint:"getRecaptchaParam",Rb:"GET",G:function(e){if(!e.recaptchaSiteKey)throw new S("internal-error")}},Ls={endpoint:"resetPassword",A:gs,Y:"email",C:!0},Fs={endpoint:"sendVerificationCode",M:["phoneNumber","recaptchaToken"],Y:"sessionInfo",C:!0},js={endpoint:"setAccountInfo",M:["idToken"],A:ss,U:!0},Us={endpoint:"setAccountInfo",M:["idToken"],A:function(e){if(ss(e),!e.password)throw new S("weak-password")},G:us,U:!0},Ws={endpoint:"signupNewUser",G:us,U:!0,C:!0},Bs={endpoint:"accounts/mfaEnrollment:start",M:["idToken","phoneEnrollmentInfo"],A:function(e){if(!e.phoneEnrollmentInfo)throw new S("internal-error");if(!e.phoneEnrollmentInfo.phoneNumber)throw new S("missing-phone-number");if(!e.phoneEnrollmentInfo.recaptchaToken)throw new S("missing-app-credential")},G:function(e){if(!e.phoneSessionInfo||!e.phoneSessionInfo.sessionInfo)throw new S("internal-error")},C:!0,La:!0},Hs={endpoint:"accounts/mfaSignIn:start",M:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],A:function(e){if(!e.phoneSignInInfo||!e.phoneSignInInfo.recaptchaToken)throw new S("missing-app-credential")},G:function(e){if(!e.phoneResponseInfo||!e.phoneResponseInfo.sessionInfo)throw new S("internal-error")},C:!0,La:!0},Ks={endpoint:"verifyAssertion",A:hs,Wa:ps,G:ds,U:!0,C:!0},Vs={endpoint:"verifyAssertion",A:hs,Wa:ps,G:function(e){if(e.errorMessage&&"USER_NOT_FOUND"==e.errorMessage)throw new S("user-not-found");if(e.errorMessage)throw Zs(e.errorMessage);us(e)},U:!0,C:!0},Gs={endpoint:"verifyAssertion",A:function(e){if(hs(e),!e.idToken)throw new S("internal-error")},Wa:ps,G:ds,U:!0},qs={endpoint:"verifyCustomToken",A:function(e){if(!e.token)throw new S("invalid-custom-token")},G:us,U:!0,C:!0},zs={endpoint:"verifyPassword",A:function(e){if(as(e),!e.password)throw new S("wrong-password")},G:us,U:!0,C:!0},Qs={endpoint:"verifyPhoneNumber",A:ls,G:us,C:!0},Ys={endpoint:"verifyPhoneNumber",A:function(e){if(!e.idToken)throw new S("internal-error");ls(e)},G:function(e){if(e.temporaryProof)throw e.code="credential-already-in-use",Go(e);us(e)}},$s={Eb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",A:ls,G:us,C:!0},Xs={endpoint:"accounts/mfaEnrollment:withdraw",M:["idToken","mfaEnrollmentId"],G:function(e){if(!!e[Ya]^!!e.refreshToken)throw new S("internal-error")},C:!0,La:!0};function Js(e,t,n){if(!function(e,t){if(!t||!t.length)return!0;if(!e)return!1;for(var n=0;n<t.length;n++){var r=e[t[n]];if(null==r||""===r)return!1}return!0}(n,t.M))return It(new S("internal-error"));var r,i=!!t.La,o=t.Rb||"POST";return Ot(n).then(t.A).then((function(){return t.U&&(n.returnSecureToken=!0),t.C&&e.b&&void 0===n.tenantId&&(n.tenantId=e.b),os(e,i?e.l:e.h,t.endpoint,o,n,t.Eb,t.hb||!1)})).then((function(e){return r=e,t.Wa?t.Wa(n,r):r})).then(t.G).then((function(){if(!t.Y)return r;if(!(t.Y in r))throw new S("internal-error");return r[t.Y]}))}function Zs(e){return eu({error:{errors:[{message:e}],code:400,message:e}})}function eu(e,t){var n=(e.error&&e.error.errors&&e.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new S(r[n]):null)return n;for(var i in n=e.error&&e.error.message||"",_e(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"},t||{}),t=(t=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<t.length?t[1]:void 0,r)if(0===n.indexOf(i))return new S(r[i],t);return!t&&e&&(t=Nr(e)),new S("internal-error",t)}function tu(e){this.b=e,this.a=null,this.nb=function(e){return(ou||(ou=new bt((function(e,t){function n(){jr(),Or("gapi.load")("gapi.iframes",{callback:e,ontimeout:function(){jr(),t(Error("Network Error"))},timeout:ru.get()})}if(Or("gapi.iframes.Iframe"))e();else if(Or("gapi.load"))n();else{var r="__iframefcb"+Math.floor(1e6*Math.random()).toString();u[r]=function(){Or("gapi.load")?n():t(Error("Network Error"))},Ot(Wa(r=Se(nu,{onload:r}))).o((function(){t(Error("Network Error"))}))}})).o((function(e){throw ou=null,e})))).then((function(){return new bt((function(t,n){Or("gapi.iframes.getContext")().open({where:document.body,url:e.b,messageHandlersFilter:Or("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(r){function i(){clearTimeout(o),t()}e.a=r,e.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),iu.get());r.ping(i).then(i,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var nu=new ge(we,"https://apis.google.com/js/api.js?onload=%{onload}"),ru=new Ur(3e4,6e4),iu=new Ur(5e3,15e3),ou=null;function au(e,t,n){this.i=e,this.g=t,this.h=n,this.f=null,this.a=Un(this.i,"/__/auth/iframe"),Ln(this.a,"apiKey",this.g),Ln(this.a,"appName",this.h),this.b=null,this.c=[]}function su(e,t,n,r,i){this.s=e,this.m=t,this.c=n,this.u=r,this.i=this.g=this.l=null,this.a=i,this.h=this.f=null}function uu(e){try{return r.a.app(e).auth().Ea()}catch(e){return[]}}function lu(e,t,n,r,i){this.u=e,this.f=t,this.b=n,this.c=r||null,this.h=i||null,this.m=this.s=this.w=null,this.g=[],this.l=this.a=null}function cu(e){var t=ur();return function(e){return Js(e,Rs,{}).then((function(e){return e.authorizedDomains||[]}))}(e).then((function(e){e:{var n=jn(t),r=n.f;n=n.b;for(var i=0;i<e.length;i++){var o=e[i],a=n,s=r;if(0==o.indexOf("chrome-extension://")?a=jn(o).b==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:pr.test(o)?a=a==o:(o=o.split(".").join("\\."),a=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(a)),a){e=!0;break e}}e=!1}if(!e)throw new Ko(ur())}))}function fu(e){return e.l||(e.l=vr().then((function(){if(!e.s){var t=e.c,n=e.h,r=uu(e.b),i=new au(e.u,e.f,e.b);i.f=t,i.b=n,i.c=X(r||[]),e.s=i.toString()}e.i=new tu(e.s),function(e){if(!e.i)throw Error("IfcHandler must be initialized!");!function(e,t){e.nb.then((function(){e.a.register("authEvent",t,Or("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(e.i,(function(t){var n={};if(t&&t.authEvent){var r=!1;for(t=Uo(t.authEvent),n=0;n<e.g.length;n++)r=e.g[n](t)||r;return(n={}).status=r?"ACK":"ERROR",Ot(n)}return n.status="ERROR",Ot(n)}))}(e)}))),e.l}function hu(e){return e.m||(e.w=e.c?Sr(e.c,uu(e.b)):null,e.m=new za(e.f,A(e.h),e.w)),e.m}function pu(e,t,n,r,i,o,a,s,u,l,c){return(e=new su(e,t,n,r,i)).l=o,e.g=a,e.i=s,e.b=de(u||null),e.f=l,e.ub(c).toString()}function du(e){if(this.a=e||r.a.INTERNAL.reactNative&&r.a.INTERNAL.reactNative.AsyncStorage,!this.a)throw new S("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function vu(e){this.b=e,this.a={},this.f=w(this.c,this)}au.prototype.toString=function(){return this.f?Ln(this.a,"v",this.f):Xn(this.a.a,"v"),this.b?Ln(this.a,"eid",this.b):Xn(this.a.a,"eid"),this.c.length?Ln(this.a,"fw",this.c.join(",")):Xn(this.a.a,"fw"),this.a.toString()},su.prototype.ub=function(e){return this.h=e,this},su.prototype.toString=function(){var e=Un(this.s,"/__/auth/handler");if(Ln(e,"apiKey",this.m),Ln(e,"appName",this.c),Ln(e,"authType",this.u),this.a.isOAuthProvider){var t=this.a;try{var n=r.a.app(this.c).auth().ja()}catch(e){n=null}for(var i in t.kb=n,Ln(e,"providerId",this.a.providerId),n=Rr((t=this.a).Fb))n[i]=n[i].toString();i=t.Oc,n=de(n);for(var o=0;o<i.length;o++){var a=i[o];a in n&&delete n[a]}t.lb&&t.kb&&!n[t.lb]&&(n[t.lb]=t.kb),pe(n)||Ln(e,"customParameters",Nr(n))}if("function"==typeof this.a.Nb&&((t=this.a.Nb()).length&&Ln(e,"scopes",t.join(","))),this.l?Ln(e,"redirectUrl",this.l):Xn(e.a,"redirectUrl"),this.g?Ln(e,"eventId",this.g):Xn(e.a,"eventId"),this.i?Ln(e,"v",this.i):Xn(e.a,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Fn(e,s)&&Ln(e,s,this.b[s]);return this.h?Ln(e,"tid",this.h):Xn(e.a,"tid"),this.f?Ln(e,"eid",this.f):Xn(e.a,"eid"),(s=uu(this.c)).length&&Ln(e,"fw",s.join(",")),e.toString()},(t=lu.prototype).Lb=function(e,t,n){var r=new S("popup-closed-by-user"),i=new S("web-storage-unsupported"),o=this,a=!1;return this.ka().then((function(){(function(e){var t={type:"webStorageSupport"};return fu(e).then((function(){return function(e,t){return e.nb.then((function(){return new bt((function(n){e.a.send(t.type,t,n,Or("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(e.i,t)})).then((function(e){if(e&&e.length&&void 0!==e[0].webStorageSupport)return e[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(e&&fr(e),t(i),a=!0)}))})).o((function(){})).then((function(){if(!a)return function(e){return new bt((function(t){return function n(){Sn(2e3).then((function(){if(e&&!e.closed)return n();t()}))}()}))}(e)})).then((function(){if(!a)return Sn(n).then((function(){t(r)}))}))},t.Ub=function(){var e=Pr();return!Dr(e)&&!Fr(e)},t.Qb=function(){return!1},t.Jb=function(e,t,n,r,i,o,a,s){if(!e)return It(new S("popup-blocked"));if(a&&!Dr())return this.ka().o((function(t){fr(e),i(t)})),r(),Ot();this.a||(this.a=cu(hu(this)));var u=this;return this.a.then((function(){var t=u.ka().o((function(t){throw fr(e),i(t),t}));return r(),t})).then((function(){(Fo(n),a)||lr(pu(u.u,u.f,u.b,t,n,null,o,u.c,void 0,u.h,s),e)})).o((function(e){throw"auth/network-request-failed"==e.code&&(u.a=null),e}))},t.Kb=function(e,t,n,r){this.a||(this.a=cu(hu(this)));var i=this;return this.a.then((function(){Fo(t),lr(pu(i.u,i.f,i.b,e,t,ur(),n,i.c,void 0,i.h,r))})).o((function(e){throw"auth/network-request-failed"==e.code&&(i.a=null),e}))},t.ka=function(){var e=this;return fu(this).then((function(){return e.i.nb})).o((function(){throw e.a=null,new S("network-request-failed")}))},t.Xb=function(){return!0},t.Ca=function(e){this.g.push(e)},t.Qa=function(e){Y(this.g,(function(t){return t==e}))},(t=du.prototype).get=function(e){return Ot(this.a.getItem(e)).then((function(e){return e&&Mr(e)}))},t.set=function(e,t){return Ot(this.a.setItem(e,Nr(t)))},t.T=function(e){return Ot(this.a.removeItem(e))},t.ba=function(){},t.ha=function(){};var _u,yu=[];function gu(e,t,n){pe(e.a)&&e.b.addEventListener("message",e.f),void 0===e.a[t]&&(e.a[t]=[]),e.a[t].push(n)}function mu(e){this.a=e}function bu(e){this.c=e,this.b=!1,this.a=[]}function wu(e,t,n,r){var i,o,a,s,u=n||{},l=null;if(e.b)return It(Error("connection_unavailable"));var c=r?800:50,f="undefined"!=typeof MessageChannel?new MessageChannel:null;return new bt((function(n,r){f?(i=Math.floor(Math.random()*Math.pow(10,20)).toString(),f.port1.start(),a=setTimeout((function(){r(Error("unsupported_event"))}),c),l={messageChannel:f,onMessage:o=function(e){e.data.eventId===i&&("ack"===e.data.status?(clearTimeout(a),s=setTimeout((function(){r(Error("timeout"))}),3e3)):"done"===e.data.status?(clearTimeout(s),void 0!==e.data.response?n(e.data.response):r(Error("unknown_error"))):(clearTimeout(a),clearTimeout(s),r(Error("invalid_response"))))}},e.a.push(l),f.port1.addEventListener("message",o),e.c.postMessage({eventType:t,eventId:i,data:u},[f.port2])):r(Error("connection_unavailable"))})).then((function(t){return Eu(e,l),t})).o((function(t){throw Eu(e,l),t}))}function Eu(e,t){if(t){var n=t.messageChannel,r=t.onMessage;n&&(n.port1.removeEventListener("message",r),n.port1.close()),Y(e.a,(function(e){return e==t}))}}function Tu(){if(!Pu())throw new S("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.u=u.indexedDB,this.type="indexedDB",this.g=this.l=this.f=this.i=null,this.s=!1,this.h=null;var e=this;gr()&&self?(this.l=function(){var e=gr()?self:null;if(K(yu,(function(n){n.b==e&&(t=n)})),!t){var t=new vu(e);yu.push(t)}return t}(),gu(this.l,"keyChanged",(function(t,n){return Au(e).then((function(t){return 0<t.length&&K(e.a,(function(e){e(t)})),{keyProcessed:z(t,n.key)}}))})),gu(this.l,"ping",(function(){return Ot(["keyChanged"])}))):function(){var e=u.navigator;return e&&e.serviceWorker?Ot().then((function(){return e.serviceWorker.ready})).then((function(e){return e.active||null})).o((function(){return null})):Ot(null)}().then((function(t){(e.h=t)&&(e.g=new bu(new mu(t)),wu(e.g,"ping",null,!0).then((function(t){t[0].fulfilled&&z(t[0].value,"keyChanged")&&(e.s=!0)})).o((function(){})))}))}function Cu(e){return new bt((function(t,n){var r=e.u.open("firebaseLocalStorageDb",1);r.onerror=function(e){try{e.preventDefault()}catch(e){}n(Error(e.target.error))},r.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(e){n(e)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?t(r):function(e){return new bt((function(t,n){var r=e.u.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){t()},r.onerror=function(e){n(Error(e.target.error))}}))}(e).then((function(){return Cu(e)})).then((function(e){t(e)})).o((function(e){n(e)}))}}))}function Su(e){return e.m||(e.m=Cu(e)),e.m}function Pu(){try{return!!u.indexedDB}catch(e){return!1}}function Ou(e){return e.objectStore("firebaseLocalStorage")}function Iu(e,t){return e.transaction(["firebaseLocalStorage"],t?"readwrite":"readonly")}function ku(e){return new bt((function(t,n){e.onsuccess=function(e){e&&e.target?t(e.target.result):t()},e.onerror=function(e){n(e.target.error)}}))}function xu(e,t){return e.g&&e.h&&function(){var e=u.navigator;return e&&e.serviceWorker&&e.serviceWorker.controller||null}()===e.h?wu(e.g,"keyChanged",{key:t},e.s).then((function(){})).o((function(){})):Ot()}function Au(e){return Su(e).then((function(e){var t=Ou(Iu(e,!1));return t.getAll?ku(t.getAll()):new bt((function(e,n){var r=[],i=t.openCursor();i.onsuccess=function(t){(t=t.target.result)?(r.push(t.value),t.continue()):e(r)},i.onerror=function(e){n(e.target.error)}}))})).then((function(t){var n={},r=[];if(0==e.b){for(r=0;r<t.length;r++)n[t[r].fbase_key]=t[r].value;r=function e(t,n){var r,i=[];for(r in t)r in n?typeof t[r]!=typeof n[r]?i.push(r):"object"==typeof t[r]&&null!=t[r]&&null!=n[r]?0<e(t[r],n[r]).length&&i.push(r):t[r]!==n[r]&&i.push(r):i.push(r);for(r in n)r in t||i.push(r);return i}(e.c,n),e.c=n}return r}))}function Du(e){e.i&&e.i.cancel("STOP_EVENT"),e.f&&(clearTimeout(e.f),e.f=null)}function Nu(e){var t=this,n=null;this.a=[],this.type="indexedDB",this.c=e,this.b=Ot().then((function(){if(Pu()){var e=Lr(),r="__sak"+e;return _u||(_u=new Tu),(n=_u).set(r,e).then((function(){return n.get(r)})).then((function(t){if(t!==e)throw Error("indexedDB not supported!");return n.T(r)})).then((function(){return n})).o((function(){return t.c}))}return t.c})).then((function(e){return t.type=e.type,e.ba((function(e){K(t.a,(function(t){t(e)}))})),e}))}function Ru(){this.a={},this.type="inMemory"}function Mu(){if(!function(){var e="Node"==mr();if(!(e=Lu()||e&&r.a.INTERNAL.node&&r.a.INTERNAL.node.localStorage))return!1;try{return e.setItem("__sak","1"),e.removeItem("__sak"),!0}catch(e){return!1}}()){if("Node"==mr())throw new S("internal-error","The LocalStorage compatibility library was not found.");throw new S("web-storage-unsupported")}this.a=Lu()||r.a.INTERNAL.node.localStorage,this.type="localStorage"}function Lu(){try{var e=u.localStorage,t=Lr();return e&&(e.setItem(t,"1"),e.removeItem(t)),e}catch(e){return null}}function Fu(){this.type="nullStorage"}function ju(){if(!function(){var e="Node"==mr();if(!(e=Uu()||e&&r.a.INTERNAL.node&&r.a.INTERNAL.node.sessionStorage))return!1;try{return e.setItem("__sak","1"),e.removeItem("__sak"),!0}catch(e){return!1}}()){if("Node"==mr())throw new S("internal-error","The SessionStorage compatibility library was not found.");throw new S("web-storage-unsupported")}this.a=Uu()||r.a.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function Uu(){try{var e=u.sessionStorage,t=Lr();return e&&(e.setItem(t,"1"),e.removeItem(t)),e}catch(e){return null}}function Wu(){var e={};e.Browser=Ku,e.Node=Vu,e.ReactNative=Gu,e.Worker=qu,this.a=e[mr()]}vu.prototype.c=function(e){var t=e.data.eventType,n=e.data.eventId,r=this.a[t];if(r&&0<r.length){e.ports[0].postMessage({status:"ack",eventId:n,eventType:t,response:null});var i=[];K(r,(function(t){i.push(Ot().then((function(){return t(e.origin,e.data.data)})))})),xt(i).then((function(r){var i=[];K(r,(function(e){i.push({fulfilled:e.Mb,value:e.value,reason:e.reason?e.reason.message:void 0})})),K(i,(function(e){for(var t in e)void 0===e[t]&&delete e[t]})),e.ports[0].postMessage({status:"done",eventId:n,eventType:t,response:i})}))}},mu.prototype.postMessage=function(e,t){this.a.postMessage(e,t)},bu.prototype.close=function(){for(;0<this.a.length;)Eu(this,this.a[0]);this.b=!0},(t=Tu.prototype).set=function(e,t){var n,r=!1,i=this;return Su(this).then((function(t){return ku((t=Ou(Iu(n=t,!0))).get(e))})).then((function(o){var a=Ou(Iu(n,!0));return o?(o.value=t,ku(a.put(o))):(i.b++,r=!0,(o={}).fbase_key=e,o.value=t,ku(a.add(o)))})).then((function(){return i.c[e]=t,xu(i,e)})).ma((function(){r&&i.b--}))},t.get=function(e){return Su(this).then((function(t){return ku(Ou(Iu(t,!1)).get(e))})).then((function(e){return e&&e.value}))},t.T=function(e){var t=!1,n=this;return Su(this).then((function(r){return t=!0,n.b++,ku(Ou(Iu(r,!0)).delete(e))})).then((function(){return delete n.c[e],xu(n,e)})).ma((function(){t&&n.b--}))},t.ba=function(e){0==this.a.length&&function(e){Du(e),function t(){e.f=setTimeout((function(){e.i=Au(e).then((function(t){0<t.length&&K(e.a,(function(e){e(t)}))})).then((function(){t()})).o((function(e){"STOP_EVENT"!=e.message&&t()}))}),800)}()}(this),this.a.push(e)},t.ha=function(e){Y(this.a,(function(t){return t==e})),0==this.a.length&&Du(this)},(t=Nu.prototype).get=function(e){return this.b.then((function(t){return t.get(e)}))},t.set=function(e,t){return this.b.then((function(n){return n.set(e,t)}))},t.T=function(e){return this.b.then((function(t){return t.T(e)}))},t.ba=function(e){this.a.push(e)},t.ha=function(e){Y(this.a,(function(t){return t==e}))},(t=Ru.prototype).get=function(e){return Ot(this.a[e])},t.set=function(e,t){return this.a[e]=t,Ot()},t.T=function(e){return delete this.a[e],Ot()},t.ba=function(){},t.ha=function(){},(t=Mu.prototype).get=function(e){var t=this;return Ot().then((function(){return Mr(t.a.getItem(e))}))},t.set=function(e,t){var n=this;return Ot().then((function(){var r=Nr(t);null===r?n.T(e):n.a.setItem(e,r)}))},t.T=function(e){var t=this;return Ot().then((function(){t.a.removeItem(e)}))},t.ba=function(e){u.window&&un(u.window,"storage",e)},t.ha=function(e){u.window&&fn(u.window,"storage",e)},(t=Fu.prototype).get=function(){return Ot(null)},t.set=function(){return Ot()},t.T=function(){return Ot()},t.ba=function(){},t.ha=function(){},(t=ju.prototype).get=function(e){var t=this;return Ot().then((function(){return Mr(t.a.getItem(e))}))},t.set=function(e,t){var n=this;return Ot().then((function(){var r=Nr(t);null===r?n.T(e):n.a.setItem(e,r)}))},t.T=function(e){var t=this;return Ot().then((function(){t.a.removeItem(e)}))},t.ba=function(){},t.ha=function(){};var Bu,Hu,Ku={F:Mu,$a:ju},Vu={F:Mu,$a:ju},Gu={F:du,$a:Fu},qu={F:Mu,$a:Fu},zu={od:"local",NONE:"none",qd:"session"};function Qu(){var e=!(Fr(Pr())||!yr()),t=Dr(),n=Ir();this.m=e,this.h=t,this.l=n,this.a={},Bu||(Bu=new Wu),e=Bu;try{this.g=!sr()&&Hr()||!u.indexedDB?new e.a.F:new Nu(gr()?new Ru:new e.a.F)}catch(e){this.g=new Ru,this.h=!0}try{this.i=new e.a.$a}catch(e){this.i=new Ru}this.u=new Ru,this.f=w(this.Vb,this),this.b={}}function Yu(){return Hu||(Hu=new Qu),Hu}function $u(e,t){switch(t){case"session":return e.i;case"none":return e.u;default:return e.g}}function Xu(e,t){return"firebase:"+e.name+(t?":"+t:"")}function Ju(e,t,n){return n=Xu(t,n),"local"==t.F&&(e.b[n]=null),$u(e,t.F).T(n)}function Zu(e){e.c&&(clearInterval(e.c),e.c=null)}function el(e){this.a=e,this.b=Yu()}(t=Qu.prototype).get=function(e,t){return $u(this,e.F).get(Xu(e,t))},t.set=function(e,t,n){var r=Xu(e,n),i=this,o=$u(this,e.F);return o.set(r,t).then((function(){return o.get(r)})).then((function(t){"local"==e.F&&(i.b[r]=t)}))},t.addListener=function(e,t,n){e=Xu(e,t),this.l&&(this.b[e]=u.localStorage.getItem(e)),pe(this.a)&&($u(this,"local").ba(this.f),this.h||(sr()||!Hr())&&u.indexedDB||!this.l||function(e){Zu(e),e.c=setInterval((function(){for(var t in e.a){var n=u.localStorage.getItem(t),r=e.b[t];n!=r&&(e.b[t]=n,n=new $t({type:"storage",key:t,target:window,oldValue:r,newValue:n,a:!0}),e.Vb(n))}}),1e3)}(this)),this.a[e]||(this.a[e]=[]),this.a[e].push(n)},t.removeListener=function(e,t,n){e=Xu(e,t),this.a[e]&&(Y(this.a[e],(function(e){return e==n})),0==this.a[e].length&&delete this.a[e]),pe(this.a)&&($u(this,"local").ha(this.f),Zu(this))},t.Vb=function(e){if(e&&e.f){var t=e.a.key;if(null==t)for(var n in this.a){var r=this.b[n];void 0===r&&(r=null);var i=u.localStorage.getItem(n);i!==r&&(this.b[n]=i,this.ib(n))}else if(0==t.indexOf("firebase:")&&this.a[t]){if(void 0!==e.a.a?$u(this,"local").ha(this.f):Zu(this),this.m)if(n=u.localStorage.getItem(t),(r=e.a.newValue)!==n)null!==r?u.localStorage.setItem(t,r):u.localStorage.removeItem(t);else if(this.b[t]===r&&void 0===e.a.a)return;var o=this;n=function(){void 0===e.a.a&&o.b[t]===u.localStorage.getItem(t)||(o.b[t]=u.localStorage.getItem(t),o.ib(t))},ze&&nt&&10==nt&&u.localStorage.getItem(t)!==e.a.newValue&&e.a.newValue!==e.a.oldValue?setTimeout(n,10):n()}}else K(e,w(this.ib,this))},t.ib=function(e){this.a[e]&&K(this.a[e],(function(e){e()}))};var tl,nl={name:"authEvent",F:"local"};function rl(){this.a=Yu()}function il(e,t){this.b=ol,this.f=u.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=e,this.h=t,this.l=u.Int32Array?new Int32Array(64):Array(64),void 0===tl&&(tl=u.Int32Array?new Int32Array(hl):hl),this.reset()}C(il,(function(){this.b=-1}));for(var ol=64,al=ol-1,sl=[],ul=0;ul<al;ul++)sl[ul]=0;var ll=$(128,sl);function cl(e){for(var t=e.f,n=e.l,r=0,i=0;i<t.length;)n[r++]=t[i]<<24|t[i+1]<<16|t[i+2]<<8|t[i+3],i=4*r;for(t=16;64>t;t++){i=0|n[t-15],r=0|n[t-2];var o=(0|n[t-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,a=(0|n[t-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[t]=o+a|0}r=0|e.a[0],i=0|e.a[1];var s=0|e.a[2],u=0|e.a[3],l=0|e.a[4],c=0|e.a[5],f=0|e.a[6];for(o=0|e.a[7],t=0;64>t;t++){var h=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&s^i&s)|0;a=(o=o+((l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))|0)+((a=(a=l&c^~l&f)+(0|tl[t])|0)+(0|n[t])|0)|0,o=f,f=c,c=l,l=u+a|0,u=s,s=i,i=r,r=a+h|0}e.a[0]=e.a[0]+r|0,e.a[1]=e.a[1]+i|0,e.a[2]=e.a[2]+s|0,e.a[3]=e.a[3]+u|0,e.a[4]=e.a[4]+l|0,e.a[5]=e.a[5]+c|0,e.a[6]=e.a[6]+f|0,e.a[7]=e.a[7]+o|0}function fl(e,t,n){void 0===n&&(n=t.length);var r=0,i=e.c;if("string"==typeof t)for(;r<n;)e.f[i++]=t.charCodeAt(r++),i==e.b&&(cl(e),i=0);else{if(!p(t))throw Error("message must be string or array");for(;r<n;){var o=t[r++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");e.f[i++]=o,i==e.b&&(cl(e),i=0)}}e.c=i,e.g+=n}il.prototype.reset=function(){this.g=this.c=0,this.a=u.Int32Array?new Int32Array(this.h):X(this.h)};var hl=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function pl(){il.call(this,8,dl)}C(pl,il);var dl=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function vl(e,t,n,r,i){this.u=e,this.i=t,this.l=n,this.m=r||null,this.s=i||null,this.h=t+":"+n,this.w=new rl,this.g=new el(this.h),this.f=null,this.b=[],this.a=this.c=null}function _l(e){return new S("invalid-cordova-configuration",e)}function yl(e){var t=new pl;fl(t,e),e=[];var n=8*t.g;56>t.c?fl(t,ll,56-t.c):fl(t,ll,t.b-(t.c-56));for(var r=63;56<=r;r--)t.f[r]=255&n,n/=256;for(cl(t),r=n=0;r<t.i;r++)for(var i=24;0<=i;i-=8)e[n++]=t.a[r]>>i&255;return function(e){return G(e,(function(e){return 1<(e=e.toString(16)).length?e:"0"+e})).join("")}(e)}function gl(e,t){for(var n=0;n<e.b.length;n++)try{e.b[n](t)}catch(e){}}function ml(e){return e.f||(e.f=e.ka().then((function(){return new bt((function(t){e.Ca((function n(r){return t(r),e.Qa(n),!1})),function(e){function t(t){r=!0,i&&i.cancel(),bl(e).then((function(r){var i=n;if(r&&t&&t.url){var o=null;-1!=(i=no(t.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=Mr(Fn(o=jn(i),"firebaseError")||null))?P(o):null)?new jo(r.c,r.b,null,null,o,null,r.S()):new jo(r.c,r.b,i,r.f,null,null,r.S())),i=o||n}gl(e,i)}))}var n=new jo("unknown",null,null,null,new S("no-auth-event")),r=!1,i=Sn(500).then((function(){return bl(e).then((function(){r||gl(e,n)}))})),o=u.handleOpenURL;u.handleOpenURL=function(e){if(0==e.toLowerCase().indexOf(Or("BuildInfo.packageName",u).toLowerCase()+"://")&&t({url:e}),"function"==typeof o)try{o(e)}catch(e){console.error(e)}},Ho||(Ho=new Wo),function(e){var t=Ho;t.a.push(e),t.b||(t.b=function(e){for(var n=0;n<t.a.length;n++)t.a[n](e)},"function"==typeof(e=Or("universalLinks.subscribe",u))&&e(null,t.b))}(t)}(e)}))}))),e.f}function bl(e){var t=null;return function(e){return e.b.get(nl,e.a).then((function(e){return Uo(e)}))}(e.g).then((function(n){return t=n,Ju((n=e.g).b,nl,n.a)})).then((function(){return t}))}function wl(e){this.a=e,this.b=Yu()}(t=vl.prototype).ka=function(){return this.Ga?this.Ga:this.Ga=(_r(void 0)?vr().then((function(){return new bt((function(e,t){var n=u.document,r=setTimeout((function(){t(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(r),e()}),!1)}))})):It(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof Or("universalLinks.subscribe",u))throw _l("cordova-universal-links-plugin-fix is not installed");if(void 0===Or("BuildInfo.packageName",u))throw _l("cordova-plugin-buildinfo is not installed");if("function"!=typeof Or("cordova.plugins.browsertab.openUrl",u))throw _l("cordova-plugin-browsertab is not installed");if("function"!=typeof Or("cordova.InAppBrowser.open",u))throw _l("cordova-plugin-inappbrowser is not installed")}),(function(){throw new S("cordova-not-ready")}))},t.Lb=function(e,t){return t(new S("operation-not-supported-in-this-environment")),Ot()},t.Jb=function(){return It(new S("operation-not-supported-in-this-environment"))},t.Xb=function(){return!1},t.Ub=function(){return!0},t.Qb=function(){return!0},t.Kb=function(e,t,n,r){if(this.c)return It(new S("redirect-operation-pending"));var i=this,o=u.document,a=null,s=null,l=null,c=null;return this.c=Ot().then((function(){return Fo(t),ml(i)})).then((function(){return function(e,t,n,r,i){var o=function(){for(var e=20,t=[];0<e;)t.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),e--;return t.join("")}(),a=new jo(t,r,null,o,new S("no-auth-event"),null,i),s=Or("BuildInfo.packageName",u);if("string"!=typeof s)throw new S("invalid-cordova-configuration");var l=Or("BuildInfo.displayName",u),c={};if(Pr().toLowerCase().match(/iphone|ipad|ipod/))c.ibi=s;else{if(!Pr().toLowerCase().match(/android/))return It(new S("operation-not-supported-in-this-environment"));c.apn=s}l&&(c.appDisplayName=l),o=yl(o),c.sessionId=o;var f=pu(e.u,e.i,e.l,t,n,null,r,e.m,c,e.s,i);return e.ka().then((function(){var t=e.h;return e.w.a.set(nl,a.v(),t)})).then((function(){var t=Or("cordova.plugins.browsertab.isAvailable",u);if("function"!=typeof t)throw new S("invalid-cordova-configuration");var n=null;t((function(t){if(t){if("function"!=typeof(n=Or("cordova.plugins.browsertab.openUrl",u)))throw new S("invalid-cordova-configuration");n(f)}else{if("function"!=typeof(n=Or("cordova.InAppBrowser.open",u)))throw new S("invalid-cordova-configuration");t=Pr(),e.a=n(f,t.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||t.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(i,e,t,n,r)})).then((function(){return new bt((function(e,t){s=function(){var t=Or("cordova.plugins.browsertab.close",u);return e(),"function"==typeof t&&t(),i.a&&"function"==typeof i.a.close&&(i.a.close(),i.a=null),!1},i.Ca(s),l=function(){a||(a=Sn(2e3).then((function(){t(new S("redirect-cancelled-by-user"))})))},c=function(){Wr()&&l()},o.addEventListener("resume",l,!1),Pr().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",c,!1)})).o((function(e){return bl(i).then((function(){throw e}))}))})).ma((function(){l&&o.removeEventListener("resume",l,!1),c&&o.removeEventListener("visibilitychange",c,!1),a&&a.cancel(),s&&i.Qa(s),i.c=null}))},t.Ca=function(e){this.b.push(e),ml(this).o((function(t){"auth/invalid-cordova-configuration"===t.code&&(t=new jo("unknown",null,null,null,new S("no-auth-event")),e(t))}))},t.Qa=function(e){Y(this.b,(function(t){return t==e}))};var El={name:"pendingRedirect",F:"session"};function Tl(e){return Ju(e.b,El,e.a)}function Cl(e,t,n){this.i={},this.w=0,this.D=e,this.u=t,this.m=n,this.h=[],this.f=!1,this.l=w(this.s,this),this.b=new jl,this.B=new Kl,this.g=new wl(this.u+":"+this.m),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.B,this.c.linkViaPopup=this.B,this.c.reauthViaPopup=this.B,this.a=Sl(this.D,this.u,this.m,O)}function Sl(e,t,n,i){var o=r.a.SDK_VERSION||null;return _r()?new vl(e,t,n,o,i):new lu(e,t,n,o,i)}function Pl(e){e.f||(e.f=!0,e.a.Ca(e.l));var t=e.a;return e.a.ka().o((function(n){throw e.a==t&&e.reset(),n}))}function Ol(e){e.a.Ub()&&Pl(e).o((function(t){var n=new jo("unknown",null,null,null,new S("operation-not-supported-in-this-environment"));Nl(t)&&e.s(n)})),e.a.Qb()||Ul(e.b)}function Il(e,t){z(e.h,t)||e.h.push(t),e.f||function(e){return e.b.get(El,e.a).then((function(e){return"pending"==e}))}(e.g).then((function(t){t?Tl(e.g).then((function(){Pl(e).o((function(t){var n=new jo("unknown",null,null,null,new S("operation-not-supported-in-this-environment"));Nl(t)&&e.s(n)}))})):Ol(e)})).o((function(){Ol(e)}))}function kl(e,t){Y(e.h,(function(e){return e==t}))}Cl.prototype.reset=function(){this.f=!1,this.a.Qa(this.l),this.a=Sl(this.D,this.u,this.m),this.i={}},Cl.prototype.s=function(e){if(!e)throw new S("invalid-auth-event");if(6e5<=T()-this.w&&(this.i={},this.w=0),e&&e.getUid()&&this.i.hasOwnProperty(e.getUid()))return!1;for(var t=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.Cb(e.c,e.b)){(t=this.c[e.c])&&(t.h(e,r),e&&(e.f||e.b)&&(this.i[e.getUid()]=!0,this.w=T())),t=!0;break}}return Ul(this.b),t};var xl=new Ur(2e3,1e4),Al=new Ur(3e4,6e4);function Dl(e,t,n,r,i,o,a){return e.a.Jb(t,n,r,(function(){e.f||(e.f=!0,e.a.Ca(e.l))}),(function(){e.reset()}),i,o,a)}function Nl(e){return!(!e||"auth/cordova-not-ready"!=e.code)}function Rl(e,t,n,r,i){var o;return function(e){return e.b.set(El,"pending",e.a)}(e.g).then((function(){return e.a.Kb(t,n,r,i).o((function(t){if(Nl(t))throw new S("operation-not-supported-in-this-environment");return o=t,Tl(e.g).then((function(){throw o}))})).then((function(){return e.a.Xb()?new bt((function(){})):Tl(e.g).then((function(){return e.pa()})).then((function(){})).o((function(){}))}))}))}function Ml(e,t,n,r,i){return e.a.Lb(r,(function(e){t.la(n,null,e,i)}),xl.get())}Cl.prototype.pa=function(){return this.b.pa()};var Ll={};function Fl(e,t,n){var r=t+":"+n;return Ll[r]||(Ll[r]=new Cl(e,t,n)),Ll[r]}function jl(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function Ul(e){e.g||(e.g=!0,Hl(e,!1,null,null))}function Wl(e){e.g&&!e.i&&Hl(e,!1,null,null)}function Bl(e,t){if(e.b=function(){return Ot(t)},e.f.length)for(var n=0;n<e.f.length;n++)e.f[n](t)}function Hl(e,t,n,r){t?r?function(e,t){if(e.b=function(){return It(t)},e.c.length)for(var n=0;n<e.c.length;n++)e.c[n](t)}(e,r):Bl(e,n):Bl(e,{user:null}),e.f=[],e.c=[]}function Kl(){}function Vl(){this.Bb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.Bb},set:function(e){this.Bb=e},enumerable:!1})}function Gl(e,t){this.a=t,zr(this,"verificationId",e)}function ql(e,t,n,r){return new Ro(e).cb(t,n).then((function(e){return new Gl(e,r)}))}function zl(e){var t=Hi(e);if(!(t&&t.exp&&t.auth_time&&t.iat))throw new S("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");Qr(this,{token:e,expirationTime:Br(1e3*t.exp),authTime:Br(1e3*t.auth_time),issuedAtTime:Br(1e3*t.iat),signInProvider:t.firebase&&t.firebase.sign_in_provider?t.firebase.sign_in_provider:null,signInSecondFactor:t.firebase&&t.firebase.sign_in_second_factor?t.firebase.sign_in_second_factor:null,claims:t})}function Ql(e,t,n){var r=t&&t[$l];if(!r)throw new S("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=e,this.f=de(t),this.g=n,this.c=new ro(null,r),this.b=[];var i=this;K(t[Yl]||[],(function(e){(e=Jr(e))&&i.b.push(e)})),zr(this,"auth",this.a),zr(this,"session",this.c),zr(this,"hints",this.b)}jl.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},jl.prototype.h=function(e,t){if(e){this.reset(),this.g=!0;var n=e.c,r=e.b,i=e.a&&"auth/web-storage-unsupported"==e.a.code,o=e.a&&"auth/operation-not-supported-in-this-environment"==e.a.code;this.i=!(!i&&!o),"unknown"!=n||i||o?e.a?(Hl(this,!0,null,e.a),Ot()):t.Da(n,r)?function(e,t,n){n=n.Da(t.c,t.b);var r=t.g,i=t.f,o=t.i,a=t.S(),s=!!t.c.match(/Redirect$/);n(r,i,a,o).then((function(t){Hl(e,s,t,null)})).o((function(t){Hl(e,s,null,t)}))}(this,e,t):It(new S("invalid-auth-event")):(Hl(this,!1,null,null),Ot())}else It(new S("invalid-auth-event"))},jl.prototype.pa=function(){var e=this;return new bt((function(t,n){e.b?e.b().then(t,n):(e.f.push(t),e.c.push(n),function(e){var t=new S("timeout");e.a&&e.a.cancel(),e.a=Sn(Al.get()).then((function(){e.b||(e.g=!0,Hl(e,!0,null,t))}))}(e))}))},Kl.prototype.h=function(e,t){if(e){var n=e.c,r=e.b;e.a?(t.la(e.c,null,e.a,e.b),Ot()):t.Da(n,r)?function(e,t){var n=e.b,r=e.c;t.Da(r,n)(e.g,e.f,e.S(),e.i).then((function(e){t.la(r,e,null,n)})).o((function(e){t.la(r,null,e,n)}))}(e,t):It(new S("invalid-auth-event"))}else It(new S("invalid-auth-event"))},Gl.prototype.confirm=function(e){return e=Mo(this.verificationId,e),this.a(e)};var Yl="mfaInfo",$l="mfaPendingCredential";function Xl(e,t,n,r){S.call(this,"multi-factor-auth-required",r,t),this.b=new Ql(e,t,n),zr(this,"resolver",this.b)}function Jl(e,t,n){if(e&&v(e.serverResponse)&&"auth/multi-factor-auth-required"===e.code)try{return new Xl(t,e.serverResponse,n,e.message)}catch(e){}return null}function Zl(){}function ec(e){zr(this,"factorId",e.ea),this.a=e}function tc(e){if(ec.call(this,e),this.a.ea!=Ro.PROVIDER_ID)throw new S("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential")}function nc(e,t){for(var n in Yt.call(this,e),t)this[n]=t[n]}function rc(e,t){this.a=e,this.b=[],this.c=w(this.wc,this),un(this.a,"userReloaded",this.c);var n=[];t&&t.multiFactor&&t.multiFactor.enrolledFactors&&K(t.multiFactor.enrolledFactors,(function(e){var t=null,r={};if(e){e.uid&&(r[ti]=e.uid),e.displayName&&(r[Zr]=e.displayName),e.enrollmentTime&&(r[ei]=new Date(e.enrollmentTime).toISOString()),e.phoneNumber&&(r[ni]=e.phoneNumber);try{t=new ri(r)}catch(e){}e=t}else e=null;e&&n.push(e)})),ic(this,n)}function ic(e,t){e.b=t,zr(e,"enrolledFactors",t)}function oc(e,t,n){if(this.h=e,this.i=t,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function ac(e){this.c=e,this.b=this.a=null}function sc(e){return e.b&&1e3*e.b.c||0}function uc(e,t){var n=t.refreshToken;e.b=Bi(t[Ya]||""),e.a=n}function lc(e,t){return function(e,t){return new bt((function(n,r){"refresh_token"==t.grant_type&&t.refresh_token||"authorization_code"==t.grant_type&&t.code?ns(e,e.u+"?key="+encodeURIComponent(e.c),(function(e){e?e.error?r(eu(e)):e.access_token&&e.refresh_token?n(e):r(new S("internal-error")):r(new S("network-request-failed"))}),"POST",$n(t).toString(),e.g,e.m.get()):r(new S("internal-error"))}))}(e.c,t).then((function(t){return e.b=Bi(t.access_token),e.a=t.refresh_token,{accessToken:e.b.toString(),refreshToken:e.a}})).o((function(t){throw"auth/user-token-expired"==t.code&&(e.a=null),t}))}function cc(e,t){this.a=e||null,this.b=t||null,Qr(this,{lastSignInTime:Br(t||null),creationTime:Br(e||null)})}function fc(e,t,n,r,i,o){Qr(this,{uid:e,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:t})}function hc(e,t,n){this.N=[],this.l=e.apiKey,this.m=e.appName,this.s=e.authDomain||null,e=r.a.SDK_VERSION?Sr(r.a.SDK_VERSION):null,this.a=new za(this.l,A(O),e),this.b=new ac(this.a),mc(this,t[Ya]),uc(this.b,t),zr(this,"refreshToken",this.b.a),Ec(this,n||{}),bn.call(this),this.P=!1,this.s&&kr()&&(this.i=Fl(this.s,this.l,this.m)),this.R=[],this.h=null,this.B=function(e){return new oc((function(){return e.I(!0)}),(function(e){return!(!e||"auth/network-request-failed"!=e.code)}),(function(){var t=sc(e.b)-T()-3e5;return 0<t?t:0}))}(this),this.Z=w(this.Ma,this);var i=this;this.oa=null,this.za=function(e){i.va(e.g)},this.aa=null,this.W=[],this.ya=function(e){dc(i,e.c)},this.$=null,this.O=new rc(this,n),zr(this,"multiFactor",this.O)}function pc(e,t){e.aa&&fn(e.aa,"languageCodeChanged",e.za),(e.aa=t)&&un(t,"languageCodeChanged",e.za)}function dc(e,t){e.W=t,ts(e.a,r.a.SDK_VERSION?Sr(r.a.SDK_VERSION,e.W):null)}function vc(e,t){e.$&&fn(e.$,"frameworkChanged",e.ya),(e.$=t)&&un(t,"frameworkChanged",e.ya)}function _c(e){try{return r.a.app(e.m).auth()}catch(t){throw new S("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+e.m+"'!")}}function yc(e){e.D||e.B.b||(e.B.start(),fn(e,"tokenChanged",e.Z),un(e,"tokenChanged",e.Z))}function gc(e){fn(e,"tokenChanged",e.Z),e.B.stop()}function mc(e,t){e.xa=t,zr(e,"_lat",t)}function bc(e){for(var t=[],n=0;n<e.R.length;n++)t.push(e.R[n](e));return xt(t).then((function(){return e}))}function wc(e){e.i&&!e.P&&(e.P=!0,Il(e.i,e))}function Ec(e,t){Qr(e,{uid:t.uid,displayName:t.displayName||null,photoURL:t.photoURL||null,email:t.email||null,emailVerified:t.emailVerified||!1,phoneNumber:t.phoneNumber||null,isAnonymous:t.isAnonymous||!1,tenantId:t.tenantId||null,metadata:new cc(t.createdAt,t.lastLoginAt),providerData:[]}),e.a.b=e.tenantId}function Tc(){}function Cc(e){return Ot().then((function(){if(e.D)throw new S("app-deleted")}))}function Sc(e){return G(e.providerData,(function(e){return e.providerId}))}function Pc(e,t){t&&(Oc(e,t.providerId),e.providerData.push(t))}function Oc(e,t){Y(e.providerData,(function(e){return e.providerId==t}))}function Ic(e,t,n){("uid"!=t||n)&&e.hasOwnProperty(t)&&zr(e,t,n)}function kc(e,t){e!=t&&(Qr(e,{uid:t.uid,displayName:t.displayName,photoURL:t.photoURL,email:t.email,emailVerified:t.emailVerified,phoneNumber:t.phoneNumber,isAnonymous:t.isAnonymous,tenantId:t.tenantId,providerData:[]}),t.metadata?zr(e,"metadata",function(e){return new cc(e.a,e.b)}(t.metadata)):zr(e,"metadata",new cc),K(t.providerData,(function(t){Pc(e,t)})),function(e,t){e.b=t.b,e.a=t.a}(e.b,t.b),zr(e,"refreshToken",e.b.a),ic(e.O,t.O.b))}function xc(e){return e.I().then((function(t){var n=e.isAnonymous;return function(e,t){return Js(e.a,ks,{idToken:t}).then(w(e.Ic,e))}(e,t).then((function(){return n||Ic(e,"isAnonymous",!1),t}))}))}function Ac(e,t){t[Ya]&&e.xa!=t[Ya]&&(uc(e.b,t),e.dispatchEvent(new nc("tokenChanged")),mc(e,t[Ya]),Ic(e,"refreshToken",e.b.a))}function Dc(e,t){return xc(e).then((function(){if(z(Sc(e),t))return bc(e).then((function(){throw new S("provider-already-linked")}))}))}function Nc(e,t,n){return Yr({user:e,credential:Lo(t),additionalUserInfo:t=zi(t),operationType:n})}function Rc(e,t){return Ac(e,t),e.reload().then((function(){return e}))}function Mc(e,t,n,i,o){if(!kr())return It(new S("operation-not-supported-in-this-environment"));if(e.h&&!o)return It(e.h);var a=qi(n.providerId),s=Lr(e.uid+":::"),u=null;(!Dr()||yr())&&e.s&&n.isOAuthProvider&&(u=pu(e.s,e.l,e.m,t,n,null,s,r.a.SDK_VERSION||null,null,null,e.tenantId));var l=hr(u,a&&a.ta,a&&a.sa);return i=i().then((function(){if(Fc(e),!o)return e.I().then((function(){}))})).then((function(){return Dl(e.i,l,t,n,s,!!u,e.tenantId)})).then((function(){return new bt((function(n,r){e.la(t,null,new S("cancelled-popup-request"),e.g||null),e.f=n,e.w=r,e.g=s,e.c=Ml(e.i,e,t,l,s)}))})).then((function(e){return l&&fr(l),e?Yr(e):null})).o((function(e){throw l&&fr(l),e})),jc(e,i,o)}function Lc(e,t,n,r,i){if(!kr())return It(new S("operation-not-supported-in-this-environment"));if(e.h&&!i)return It(e.h);var o=null,a=Lr(e.uid+":::");return r=r().then((function(){if(Fc(e),!i)return e.I().then((function(){}))})).then((function(){return e.fa=a,bc(e)})).then((function(t){return e.ga&&(t=(t=e.ga).b.set(Bc,e.v(),t.a)),t})).then((function(){return Rl(e.i,t,n,a,e.tenantId)})).o((function(t){if(o=t,e.ga)return Hc(e.ga);throw o})).then((function(){if(o)throw o})),jc(e,r,i)}function Fc(e){if(!e.i||!e.P){if(e.i&&!e.P)throw new S("internal-error");throw new S("auth-domain-config-required")}}function jc(e,t,n){var r=function(e,t,n){return e.h&&!n?(t.cancel(),It(e.h)):t.o((function(t){throw!t||"auth/user-disabled"!=t.code&&"auth/user-token-expired"!=t.code||(e.h||e.dispatchEvent(new nc("userInvalidated")),e.h=t),t}))}(e,t,n);return e.N.push(r),r.ma((function(){Q(e.N,r)})),r.o((function(t){var n=null;throw t&&"auth/multi-factor-auth-required"===t.code&&(n=Jl(t.v(),_c(e),w(e.hc,e))),n||t}))}function Uc(e){if(!e.apiKey)return null;var t={apiKey:e.apiKey,authDomain:e.authDomain,appName:e.appName},n={};if(!e.stsTokenManager||!e.stsTokenManager.accessToken)return null;n[Ya]=e.stsTokenManager.accessToken,n.refreshToken=e.stsTokenManager.refreshToken||null;var r=new hc(t,n,e);return e.providerData&&K(e.providerData,(function(e){e&&Pc(r,Yr(e))})),e.redirectEventId&&(r.fa=e.redirectEventId),r}function Wc(e){this.a=e,this.b=Yu()}Ql.prototype.Pc=function(e){var t=this;return e.ob(this.a.b,this.c).then((function(e){var n=de(t.f);return delete n[Yl],delete n[$l],_e(n,e),t.g(n)}))},C(Xl,S),Zl.prototype.ob=function(e,t,n){return t.type==io?function(e,t,n,r){return n.Fa().then((function(n){return n={idToken:n},void 0!==r&&(n.displayName=r),_e(n,{phoneVerificationInfo:No(e.a)}),Js(t,Os,n)}))}(this,e,t,n):function(e,t,n){return n.Fa().then((function(n){return _e(n={mfaPendingCredential:n},{phoneVerificationInfo:No(e.a)}),Js(t,Is,n)}))}(this,e,t)},C(ec,Zl),C(tc,ec),C(nc,Yt),(t=rc.prototype).wc=function(e){ic(this,function(e){var t=[];return K(e.mfaInfo||[],(function(e){(e=Jr(e))&&t.push(e)})),t}(e.ed))},t.Ob=function(){return this.a.I().then((function(e){return new ro(e,null)}))},t.dc=function(e,t){var n=this,r=this.a.a;return this.Ob().then((function(n){return e.ob(r,n,t)})).then((function(e){return Ac(n.a,e),n.a.reload()}))},t.$c=function(e){var t=this,n="string"==typeof e?e:e.uid,r=this.a.a;return this.a.I().then((function(e){return Js(r,Xs,{idToken:e,mfaEnrollmentId:n})})).then((function(e){var r=V(t.b,(function(e){return e.uid!=n}));return ic(t,r),Ac(t.a,e),t.a.reload().o((function(e){if("auth/user-token-expired"!=e.code)throw e}))}))},t.v=function(){return{multiFactor:{enrolledFactors:G(this.b,(function(e){return e.v()}))}}},oc.prototype.start=function(){this.a=this.c,function e(t,n){t.stop(),t.b=Sn(function(e,t){return t?(e.a=e.c,e.g()):(t=e.a,e.a*=2,e.a>e.f&&(e.a=e.f),t)}(t,n)).then((function(){return function(){var e=u.document,t=null;return Wr()||!e?Ot():new bt((function(n){t=function(){Wr()&&(e.removeEventListener("visibilitychange",t,!1),n())},e.addEventListener("visibilitychange",t,!1)})).o((function(n){throw e.removeEventListener("visibilitychange",t,!1),n}))}()})).then((function(){return t.h()})).then((function(){e(t,!0)})).o((function(n){t.i(n)&&e(t,!1)}))}(this,!0)},oc.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},ac.prototype.v=function(){return{apiKey:this.c.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:sc(this)}},ac.prototype.getToken=function(e){return e=!!e,this.b&&!this.a?It(new S("user-token-expired")):e||!this.b||T()>sc(this)-3e4?this.a?lc(this,{grant_type:"refresh_token",refresh_token:this.a}):Ot(null):Ot({accessToken:this.b.toString(),refreshToken:this.a})},cc.prototype.v=function(){return{lastLoginAt:this.b,createdAt:this.a}},C(hc,bn),hc.prototype.va=function(e){this.oa=e,es(this.a,e)},hc.prototype.ja=function(){return this.oa},hc.prototype.Ea=function(){return X(this.W)},hc.prototype.Ma=function(){this.B.b&&(this.B.stop(),this.B.start())},zr(hc.prototype,"providerId","firebase"),(t=hc.prototype).reload=function(){var e=this;return jc(this,Cc(this).then((function(){return xc(e).then((function(){return bc(e)})).then(Tc)})))},t.mc=function(e){return this.I(e).then((function(e){return new zl(e)}))},t.I=function(e){var t=this;return jc(this,Cc(this).then((function(){return t.b.getToken(e)})).then((function(e){if(!e)throw new S("internal-error");return e.accessToken!=t.xa&&(mc(t,e.accessToken),t.dispatchEvent(new nc("tokenChanged"))),Ic(t,"refreshToken",e.refreshToken),e.accessToken})))},t.Ic=function(e){if(!(e=e.users)||!e.length)throw new S("internal-error");Ec(this,{uid:(e=e[0]).localId,displayName:e.displayName,photoURL:e.photoUrl,email:e.email,emailVerified:!!e.emailVerified,phoneNumber:e.phoneNumber,lastLoginAt:e.lastLoginAt,createdAt:e.createdAt,tenantId:e.tenantId});for(var t=function(e){return(e=e.providerUserInfo)&&e.length?G(e,(function(e){return new fc(e.rawId,e.providerId,e.email,e.displayName,e.photoUrl,e.phoneNumber)})):[]}(e),n=0;n<t.length;n++)Pc(this,t[n]);Ic(this,"isAnonymous",!(this.email&&e.passwordHash||this.providerData&&this.providerData.length)),this.dispatchEvent(new nc("userReloaded",{ed:e}))},t.Jc=function(e){return Gr("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.pb(e)},t.pb=function(e){var t=this,n=null;return jc(this,e.c(this.a,this.uid).then((function(e){return Ac(t,e),n=Nc(t,e,"reauthenticate"),t.h=null,t.reload()})).then((function(){return n})),!0)},t.Ac=function(e){return Gr("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.mb(e)},t.mb=function(e){var t=this,n=null;return jc(this,Dc(this,e.providerId).then((function(){return t.I()})).then((function(n){return e.b(t.a,n)})).then((function(e){return n=Nc(t,e,"link"),Rc(t,e)})).then((function(){return n})))},t.Bc=function(e,t){var n=this;return jc(this,Dc(this,"phone").then((function(){return ql(_c(n),e,t,w(n.mb,n))})))},t.Kc=function(e,t){var n=this;return jc(this,Ot().then((function(){return ql(_c(n),e,t,w(n.pb,n))})),!0)},t.xb=function(e){var t=this;return jc(this,this.I().then((function(n){return t.a.xb(n,e)})).then((function(e){return Ac(t,e),t.reload()})))},t.cd=function(e){var t=this;return jc(this,this.I().then((function(n){return e.b(t.a,n)})).then((function(e){return Ac(t,e),t.reload()})))},t.yb=function(e){var t=this;return jc(this,this.I().then((function(n){return t.a.yb(n,e)})).then((function(e){return Ac(t,e),t.reload()})))},t.zb=function(e){if(void 0===e.displayName&&void 0===e.photoURL)return Cc(this);var t=this;return jc(this,this.I().then((function(n){return t.a.zb(n,{displayName:e.displayName,photoUrl:e.photoURL})})).then((function(e){return Ac(t,e),Ic(t,"displayName",e.displayName||null),Ic(t,"photoURL",e.photoUrl||null),K(t.providerData,(function(e){"password"===e.providerId&&(zr(e,"displayName",t.displayName),zr(e,"photoURL",t.photoURL))})),bc(t)})).then(Tc))},t.ad=function(e){var t=this;return jc(this,xc(this).then((function(n){return z(Sc(t),e)?function(e,t,n){return Js(e,Cs,{idToken:t,deleteProvider:n})}(t.a,n,[e]).then((function(e){var n={};return K(e.providerUserInfo||[],(function(e){n[e.providerId]=!0})),K(Sc(t),(function(e){n[e]||Oc(t,e)})),n[Ro.PROVIDER_ID]||zr(t,"phoneNumber",null),bc(t)})):bc(t).then((function(){throw new S("no-such-provider")}))})))},t.delete=function(){var e=this;return jc(this,this.I().then((function(t){return Js(e.a,Ts,{idToken:t})})).then((function(){e.dispatchEvent(new nc("userDeleted"))}))).then((function(){for(var t=0;t<e.N.length;t++)e.N[t].cancel("app-deleted");pc(e,null),vc(e,null),e.N=[],e.D=!0,gc(e),zr(e,"refreshToken",null),e.i&&kl(e.i,e)}))},t.Cb=function(e,t){return!!("linkViaPopup"==e&&(this.g||null)==t&&this.f||"reauthViaPopup"==e&&(this.g||null)==t&&this.f||"linkViaRedirect"==e&&(this.fa||null)==t||"reauthViaRedirect"==e&&(this.fa||null)==t)},t.la=function(e,t,n,r){"linkViaPopup"!=e&&"reauthViaPopup"!=e||r!=(this.g||null)||(n&&this.w?this.w(n):t&&!n&&this.f&&this.f(t),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.w)},t.Da=function(e,t){return"linkViaPopup"==e&&t==(this.g||null)?w(this.Hb,this):"reauthViaPopup"==e&&t==(this.g||null)?w(this.Ib,this):"linkViaRedirect"==e&&(this.fa||null)==t?w(this.Hb,this):"reauthViaRedirect"==e&&(this.fa||null)==t?w(this.Ib,this):null},t.Cc=function(e){var t=this;return Mc(this,"linkViaPopup",e,(function(){return Dc(t,e.providerId).then((function(){return bc(t)}))}),!1)},t.Lc=function(e){return Mc(this,"reauthViaPopup",e,(function(){return Ot()}),!0)},t.Dc=function(e){var t=this;return Lc(this,"linkViaRedirect",e,(function(){return Dc(t,e.providerId)}),!1)},t.Mc=function(e){return Lc(this,"reauthViaRedirect",e,(function(){return Ot()}),!0)},t.Hb=function(e,t,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return jc(this,this.I().then((function(n){return _s(i.a,{requestUri:e,postBody:r,sessionId:t,idToken:n})})).then((function(e){return o=Nc(i,e,"link"),Rc(i,e)})).then((function(){return o})))},t.Ib=function(e,t,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return jc(this,Ot().then((function(){return so(ys(i.a,{requestUri:e,sessionId:t,postBody:r,tenantId:n}),i.uid)})).then((function(e){return o=Nc(i,e,"reauthenticate"),Ac(i,e),i.h=null,i.reload()})).then((function(){return o})),!0)},t.qb=function(e){var t=this,n=null;return jc(this,this.I().then((function(t){return n=t,void 0===e||pe(e)?{}:Fi(new Oi(e))})).then((function(e){return t.a.qb(n,e)})).then((function(e){if(t.email!=e)return t.reload()})).then((function(){})))},t.Ab=function(e,t){var n=this,r=null;return jc(this,this.I().then((function(e){return r=e,void 0===t||pe(t)?{}:Fi(new Oi(t))})).then((function(t){return n.a.Ab(r,e,t)})).then((function(e){if(n.email!=e)return n.reload()})).then((function(){})))},t.hc=function(e){var t=null,n=this;return jc(this,e=so(Ot(e),n.uid).then((function(e){return t=Nc(n,e,"reauthenticate"),Ac(n,e),n.h=null,n.reload()})).then((function(){return t})),!0)},t.toJSON=function(){return this.v()},t.v=function(){var e={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.s,stsTokenManager:this.b.v(),redirectEventId:this.fa||null};return this.metadata&&_e(e,this.metadata.v()),K(this.providerData,(function(t){e.providerData.push(function(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);return n}(t))})),_e(e,this.O.v()),e};var Bc={name:"redirectUser",F:"session"};function Hc(e){return Ju(e.b,Bc,e.a)}function Kc(e){this.a=e,this.b=Yu(),this.c=null,this.f=function(e){var t=qc("local"),n=qc("session"),r=qc("none");return function(e,t,n){var r=Xu(t,n),i=$u(e,t.F);return e.get(t,n).then((function(o){var a=null;try{a=Mr(u.localStorage.getItem(r))}catch(e){}if(a&&!o)return u.localStorage.removeItem(r),e.set(t,a,n);a&&o&&"localStorage"!=i.type&&u.localStorage.removeItem(r)}))}(e.b,t,e.a).then((function(){return e.b.get(n,e.a)})).then((function(i){return i?n:e.b.get(r,e.a).then((function(n){return n?r:e.b.get(t,e.a).then((function(n){return n?t:e.b.get(Gc,e.a).then((function(e){return e?qc(e):t}))}))}))})).then((function(t){return e.c=t,Vc(e,t.F)})).o((function(){e.c||(e.c=t)}))}(this),this.b.addListener(qc("local"),this.a,w(this.g,this))}function Vc(e,t){var n,r=[];for(n in zu)zu[n]!==t&&r.push(Ju(e.b,qc(zu[n]),e.a));return r.push(Ju(e.b,Gc,e.a)),function(e){return new bt((function(t,n){var r=e.length,i=[];if(r)for(var o=function(e,n){r--,i[e]=n,0==r&&t(i)},a=function(e){n(e)},s=0;s<e.length;s++)kt(e[s],E(o,s),a);else t(i)}))}(r)}Kc.prototype.g=function(){var e=this,t=qc("local");$c(this,(function(){return Ot().then((function(){return e.c&&"local"!=e.c.F?e.b.get(t,e.a):null})).then((function(n){if(n)return Vc(e,"local").then((function(){e.c=t}))}))}))};var Gc={name:"persistence",F:"session"};function qc(e){return{name:"authUser",F:e}}function zc(e,t){return $c(e,(function(){return e.b.set(e.c,t.v(),e.a)}))}function Qc(e){return $c(e,(function(){return Ju(e.b,e.c,e.a)}))}function Yc(e,t){return $c(e,(function(){return e.b.get(e.c,e.a).then((function(e){return e&&t&&(e.authDomain=t),Uc(e||{})}))}))}function $c(e,t){return e.f=e.f.then(t,t),e.f}function Xc(e){if(this.l=!1,zr(this,"settings",new Vl),zr(this,"app",e),!af(this).options||!af(this).options.apiKey)throw new S("invalid-api-key");e=r.a.SDK_VERSION?Sr(r.a.SDK_VERSION):null,this.b=new za(af(this).options&&af(this).options.apiKey,A(O),e),this.P=[],this.m=[],this.O=[],this.$b=r.a.INTERNAL.createSubscribe(w(this.xc,this)),this.W=void 0,this.ac=r.a.INTERNAL.createSubscribe(w(this.yc,this)),rf(this,null),this.i=new Kc(af(this).options.apiKey+":"+af(this).name),this.B=new Wc(af(this).options.apiKey+":"+af(this).name),this.Z=cf(this,function(e){var t=af(e).options.authDomain,n=function(e){var t=function(e,t){return e.b.get(Bc,e.a).then((function(e){return e&&t&&(e.authDomain=t),Uc(e||{})}))}(e.B,af(e).options.authDomain).then((function(t){return(e.D=t)&&(t.ga=e.B),Hc(e.B)}));return cf(e,t)}(e).then((function(){return Yc(e.i,t)})).then((function(t){return t?(t.ga=e.B,e.D&&(e.D.fa||null)==(t.fa||null)?t:t.reload().then((function(){return zc(e.i,t).then((function(){return t}))})).o((function(n){return"auth/network-request-failed"==n.code?t:Qc(e.i)}))):null})).then((function(t){rf(e,t||null)}));return cf(e,n)}(this)),this.h=cf(this,function(e){return e.Z.then((function(){return tf(e)})).o((function(){})).then((function(){if(!e.l)return e.oa()})).o((function(){})).then((function(){if(!e.l){e.aa=!0;var t=e.i;t.b.addListener(qc("local"),t.a,e.oa)}}))}(this)),this.aa=!1,this.oa=w(this.Xc,this),this.Ma=w(this.ca,this),this.xa=w(this.jc,this),this.ya=w(this.uc,this),this.za=w(this.vc,this),this.a=null,function(e){var t=af(e).options.authDomain,n=af(e).options.apiKey;t&&kr()&&(e.Zb=e.Z.then((function(){if(!e.l){if(e.a=Fl(t,n,af(e).name),Il(e.a,e),sf(e)&&wc(sf(e)),e.D){wc(e.D);var r=e.D;r.va(e.ja()),pc(r,e),dc(r=e.D,e.N),vc(r,e),e.D=null}return e.a}})))}(this),this.INTERNAL={},this.INTERNAL.delete=w(this.delete,this),this.INTERNAL.logFramework=w(this.Ec,this),this.s=0,bn.call(this),function(e){Object.defineProperty(e,"lc",{get:function(){return this.ja()},set:function(e){this.va(e)},enumerable:!1}),e.$=null,Object.defineProperty(e,"ti",{get:function(){return this.S()},set:function(e){this.ub(e)},enumerable:!1}),e.R=null}(this),this.N=[]}function Jc(e){Yt.call(this,"languageCodeChanged"),this.g=e}function Zc(e){Yt.call(this,"frameworkChanged"),this.c=e}function ef(e){return e.Zb||It(new S("auth-domain-config-required"))}function tf(e){if(!kr())return It(new S("operation-not-supported-in-this-environment"));var t=ef(e).then((function(){return e.a.pa()})).then((function(e){return e?Yr(e):null}));return cf(e,t)}function nf(e,t){var n={};return n.apiKey=af(e).options.apiKey,n.authDomain=af(e).options.authDomain,n.appName=af(e).name,e.Z.then((function(){return function(e,t,n,r){var i=new hc(e,t);return n&&(i.ga=n),r&&dc(i,r),i.reload().then((function(){return i}))}(n,t,e.B,e.Ea())})).then((function(t){return sf(e)&&t.uid==sf(e).uid?(kc(sf(e),t),e.ca(t)):(rf(e,t),wc(t),e.ca(t))})).then((function(){lf(e)}))}function rf(e,t){sf(e)&&(function(e,t){Y(e.R,(function(e){return e==t}))}(sf(e),e.Ma),fn(sf(e),"tokenChanged",e.xa),fn(sf(e),"userDeleted",e.ya),fn(sf(e),"userInvalidated",e.za),gc(sf(e))),t&&(t.R.push(e.Ma),un(t,"tokenChanged",e.xa),un(t,"userDeleted",e.ya),un(t,"userInvalidated",e.za),0<e.s&&yc(t)),zr(e,"currentUser",t),t&&(t.va(e.ja()),pc(t,e),dc(t,e.N),vc(t,e))}function of(e,t){var n=null,r=null;return cf(e,t.then((function(t){return n=Lo(t),r=zi(t),nf(e,t)}),(function(t){var n=null;throw t&&"auth/multi-factor-auth-required"===t.code&&(n=Jl(t.v(),e,w(e.ic,e))),n||t})).then((function(){return Yr({user:sf(e),credential:n,additionalUserInfo:r,operationType:"signIn"})})))}function af(e){return e.app}function sf(e){return e.currentUser}function uf(e){return sf(e)&&sf(e)._lat||null}function lf(e){if(e.aa){for(var t=0;t<e.m.length;t++)e.m[t]&&e.m[t](uf(e));if(e.W!==e.getUid()&&e.O.length)for(e.W=e.getUid(),t=0;t<e.O.length;t++)e.O[t]&&e.O[t](uf(e))}}function cf(e,t){return e.P.push(t),t.ma((function(){Q(e.P,t)})),t}function ff(){}function hf(){this.a={},this.b=1e12}Kc.prototype.tb=function(e){var t=null,n=this;return function(e){var t=new S("invalid-persistence-type"),n=new S("unsupported-persistence-type");e:{for(r in zu)if(zu[r]==e){var r=!0;break e}r=!1}if(!r||"string"!=typeof e)throw t;switch(mr()){case"ReactNative":if("session"===e)throw n;break;case"Node":if("none"!==e)throw n;break;case"Worker":if("session"===e||!Pu()&&"none"!==e)throw n;break;default:if(!Ir()&&"none"!==e)throw n}}(e),$c(this,(function(){return e!=n.c.F?n.b.get(n.c,n.a).then((function(r){return t=r,Vc(n,e)})).then((function(){if(n.c=qc(e),t)return n.b.set(n.c,t,n.a)})):Ot()}))},C(Xc,bn),C(Jc,Yt),C(Zc,Yt),(t=Xc.prototype).tb=function(e){return cf(this,e=this.i.tb(e))},t.va=function(e){this.$===e||this.l||(this.$=e,es(this.b,this.$),this.dispatchEvent(new Jc(this.ja())))},t.ja=function(){return this.$},t.dd=function(){var e=u.navigator;this.va(e&&(e.languages&&e.languages[0]||e.language||e.userLanguage)||null)},t.Ec=function(e){this.N.push(e),ts(this.b,r.a.SDK_VERSION?Sr(r.a.SDK_VERSION,this.N):null),this.dispatchEvent(new Zc(this.N))},t.Ea=function(){return X(this.N)},t.ub=function(e){this.R===e||this.l||(this.R=e,this.b.b=this.R)},t.S=function(){return this.R},t.toJSON=function(){return{apiKey:af(this).options.apiKey,authDomain:af(this).options.authDomain,appName:af(this).name,currentUser:sf(this)&&sf(this).v()}},t.Cb=function(e,t){switch(e){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==t&&!!this.f;default:return!1}},t.la=function(e,t,n,r){"signInViaPopup"==e&&this.g==r&&(n&&this.w?this.w(n):t&&!n&&this.f&&this.f(t),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.w)},t.Da=function(e,t){return"signInViaRedirect"==e||"signInViaPopup"==e&&this.g==t&&this.f?w(this.gc,this):null},t.gc=function(e,t,n,r){var i=this,o={requestUri:e,postBody:r,sessionId:t,tenantId:n};return this.c&&(this.c.cancel(),this.c=null),i.Z.then((function(){return of(i,vs(i.b,o))}))},t.Vc=function(e){if(!kr())return It(new S("operation-not-supported-in-this-environment"));var t=this,n=qi(e.providerId),i=Lr(),o=null;(!Dr()||yr())&&af(this).options.authDomain&&e.isOAuthProvider&&(o=pu(af(this).options.authDomain,af(this).options.apiKey,af(this).name,"signInViaPopup",e,null,i,r.a.SDK_VERSION||null,null,null,this.S()));var a=hr(o,n&&n.ta,n&&n.sa);return cf(this,n=ef(this).then((function(n){return Dl(n,a,"signInViaPopup",e,i,!!o,t.S())})).then((function(){return new bt((function(e,n){t.la("signInViaPopup",null,new S("cancelled-popup-request"),t.g),t.f=e,t.w=n,t.g=i,t.c=Ml(t.a,t,"signInViaPopup",a,i)}))})).then((function(e){return a&&fr(a),e?Yr(e):null})).o((function(e){throw a&&fr(a),e})))},t.Wc=function(e){if(!kr())return It(new S("operation-not-supported-in-this-environment"));var t=this;return cf(this,ef(this).then((function(){return function(e){return $c(e,(function(){return e.b.set(Gc,e.c.F,e.a)}))}(t.i)})).then((function(){return Rl(t.a,"signInViaRedirect",e,void 0,t.S())})))},t.pa=function(){var e=this;return tf(this).then((function(t){return e.a&&Wl(e.a.b),t})).o((function(t){throw e.a&&Wl(e.a.b),t}))},t.bd=function(e){if(!e)return It(new S("null-user"));if(this.R!=e.tenantId)return It(new S("tenant-id-mismatch"));var t=this,n={};n.apiKey=af(this).options.apiKey,n.authDomain=af(this).options.authDomain,n.appName=af(this).name;var r=function(e,t,n,r){var i=e.b,o={};return o[Ya]=i.b&&i.b.toString(),o.refreshToken=i.a,t=new hc(t||{apiKey:e.l,authDomain:e.s,appName:e.m},o),n&&(t.ga=n),r&&dc(t,r),kc(t,e),t}(e,n,t.B,t.Ea());return cf(this,this.h.then((function(){if(af(t).options.apiKey!=e.l)return r.reload()})).then((function(){return sf(t)&&e.uid==sf(t).uid?(kc(sf(t),e),t.ca(e)):(rf(t,r),wc(r),t.ca(r))})).then((function(){lf(t)})))},t.wb=function(){var e=this;return cf(this,this.h.then((function(){return e.a&&Wl(e.a.b),sf(e)?(rf(e,null),Qc(e.i).then((function(){lf(e)}))):Ot()})))},t.Xc=function(){var e=this;return Yc(this.i,af(this).options.authDomain).then((function(t){if(!e.l){var n;if(n=sf(e)&&t){n=sf(e).uid;var r=t.uid;n=null!=n&&""!==n&&null!=r&&""!==r&&n==r}if(n)return kc(sf(e),t),sf(e).I();(sf(e)||t)&&(rf(e,t),t&&(wc(t),t.ga=e.B),e.a&&Il(e.a,e),lf(e))}}))},t.ca=function(e){return zc(this.i,e)},t.jc=function(){lf(this),this.ca(sf(this))},t.uc=function(){this.wb()},t.vc=function(){this.wb()},t.ic=function(e){var t=this;return this.h.then((function(){return of(t,Ot(e))}))},t.xc=function(e){var t=this;this.addAuthTokenListener((function(){e.next(sf(t))}))},t.yc=function(e){var t=this;!function(e,t){e.O.push(t),cf(e,e.h.then((function(){!e.l&&z(e.O,t)&&e.W!==e.getUid()&&(e.W=e.getUid(),t(uf(e)))})))}(this,(function(){e.next(sf(t))}))},t.Gc=function(e,t,n){var r=this;return this.aa&&Promise.resolve().then((function(){d(e)?e(sf(r)):d(e.next)&&e.next(sf(r))})),this.$b(e,t,n)},t.Fc=function(e,t,n){var r=this;return this.aa&&Promise.resolve().then((function(){r.W=r.getUid(),d(e)?e(sf(r)):d(e.next)&&e.next(sf(r))})),this.ac(e,t,n)},t.kc=function(e){var t=this;return cf(this,this.h.then((function(){return sf(t)?sf(t).I(e).then((function(e){return{accessToken:e}})):null})))},t.Rc=function(e){var t=this;return this.h.then((function(){return of(t,Js(t.b,qs,{token:e}))})).then((function(e){var n=e.user;return Ic(n,"isAnonymous",!1),t.ca(n),e}))},t.Sc=function(e,t){var n=this;return this.h.then((function(){return of(n,Js(n.b,zs,{email:e,password:t}))}))},t.cc=function(e,t){var n=this;return this.h.then((function(){return of(n,Js(n.b,ws,{email:e,password:t}))}))},t.Ya=function(e){var t=this;return this.h.then((function(){return of(t,e.ia(t.b))}))},t.Qc=function(e){return Gr("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.Ya(e)},t.vb=function(){var e=this;return this.h.then((function(){var t=sf(e);if(t&&t.isAnonymous){var n=Yr({providerId:null,isNewUser:!1});return Yr({user:t,credential:null,additionalUserInfo:n,operationType:"signIn"})}return of(e,e.b.vb()).then((function(t){var n=t.user;return Ic(n,"isAnonymous",!0),e.ca(n),t}))}))},t.getUid=function(){return sf(this)&&sf(this).uid||null},t.bc=function(e){this.addAuthTokenListener(e),this.s++,0<this.s&&sf(this)&&yc(sf(this))},t.Nc=function(e){var t=this;K(this.m,(function(n){n==e&&t.s--})),0>this.s&&(this.s=0),0==this.s&&sf(this)&&gc(sf(this)),this.removeAuthTokenListener(e)},t.addAuthTokenListener=function(e){var t=this;this.m.push(e),cf(this,this.h.then((function(){t.l||z(t.m,e)&&e(uf(t))})))},t.removeAuthTokenListener=function(e){Y(this.m,(function(t){return t==e}))},t.delete=function(){this.l=!0;for(var e=0;e<this.P.length;e++)this.P[e].cancel("app-deleted");return this.P=[],this.i&&(e=this.i).b.removeListener(qc("local"),e.a,this.oa),this.a&&(kl(this.a,this),Wl(this.a.b)),Promise.resolve()},t.fc=function(e){return cf(this,function(e,t){return Js(e,Es,{identifier:t,continueUri:xr()?ur():"http://localhost"}).then((function(e){return e.signinMethods||[]}))}(this.b,e))},t.zc=function(e){return!!xo(e)},t.sb=function(e,t){var n=this;return cf(this,Ot().then((function(){var e=new Oi(t);if(!e.c)throw new S("argument-error",xi+" must be true when sending sign in link to email");return Fi(e)})).then((function(t){return n.b.sb(e,t)})).then((function(){})))},t.fd=function(e){return this.Pa(e).then((function(e){return e.data.email}))},t.jb=function(e,t){return cf(this,this.b.jb(e,t).then((function(){})))},t.Pa=function(e){return cf(this,this.b.Pa(e).then((function(e){return new ii(e)})))},t.fb=function(e){return cf(this,this.b.fb(e).then((function(){})))},t.rb=function(e,t){var n=this;return cf(this,Ot().then((function(){return void 0===t||pe(t)?{}:Fi(new Oi(t))})).then((function(t){return n.b.rb(e,t)})).then((function(){})))},t.Uc=function(e,t){return cf(this,ql(this,e,t,w(this.Ya,this)))},t.Tc=function(e,t){var n=this;return cf(this,Ot().then((function(){var r=t||ur(),i=ko(e,r);if(!(r=xo(r)))throw new S("argument-error","Invalid email link!");if(r.tenantId!==n.S())throw new S("tenant-id-mismatch");return n.Ya(i)})))},ff.prototype.render=function(){},ff.prototype.reset=function(){},ff.prototype.getResponse=function(){},ff.prototype.execute=function(){};var pf=null;function df(e,t){return(t=vf(t))&&e.a[t]||null}function vf(e){return(e=void 0===e?1e12:e)?e.toString():null}function _f(e,t){this.g=!1,this.c=t,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=at(e);var n=this;this.i=function(){n.execute()},this.h?this.execute():un(this.f,"click",this.i)}function yf(e){if(e.g)throw Error("reCAPTCHA mock was already deleted!")}function gf(){}function mf(){}hf.prototype.render=function(e,t){return this.a[this.b.toString()]=new _f(e,t),this.b++},hf.prototype.reset=function(e){var t=df(this,e);e=vf(e),t&&e&&(t.delete(),delete this.a[e])},hf.prototype.getResponse=function(e){return(e=df(this,e))?e.getResponse():null},hf.prototype.execute=function(e){(e=df(this,e))&&e.execute()},_f.prototype.getResponse=function(){return yf(this),this.b},_f.prototype.execute=function(){yf(this);var e=this;this.a||(this.a=setTimeout((function(){e.b=function(){for(var e=50,t=[];0<e;)t.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),e--;return t.join("")}();var t=e.c.callback,n=e.c["expired-callback"];if(t)try{t(e.b)}catch(e){}e.a=setTimeout((function(){if(e.a=null,e.b=null,n)try{n()}catch(e){}e.h&&e.execute()}),6e4)}),500))},_f.prototype.delete=function(){yf(this),this.g=!0,clearTimeout(this.a),this.a=null,fn(this.f,"click",this.i)},zr(gf,"FACTOR_ID","phone"),mf.prototype.g=function(){return pf||(pf=new hf),Ot(pf)},mf.prototype.c=function(){};var bf=null;function wf(){this.b=u.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var Ef=new ge(we,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),Tf=new Ur(3e4,6e4);wf.prototype.g=function(e){var t=this;return new bt((function(n,r){var i=setTimeout((function(){r(new S("network-request-failed"))}),Tf.get());!u.grecaptcha||e!==t.f&&!t.b?(u[t.a]=function(){if(u.grecaptcha){t.f=e;var o=u.grecaptcha.render;u.grecaptcha.render=function(e,n){return e=o(e,n),t.b++,e},clearTimeout(i),n(u.grecaptcha)}else clearTimeout(i),r(new S("internal-error"));delete u[t.a]},Ot(Wa(Se(Ef,{onload:t.a,hl:e||""}))).o((function(){clearTimeout(i),r(new S("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(i),n(u.grecaptcha))}))},wf.prototype.c=function(){this.b--};var Cf=null;function Sf(e,t,n,r,i,o,a){if(zr(this,"type","recaptcha"),this.c=this.f=null,this.D=!1,this.u=t,this.g=null,a?(bf||(bf=new mf),a=bf):(Cf||(Cf=new wf),a=Cf),this.m=a,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[If])throw new S("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[kf],!u.document)throw new S("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!at(t)||!this.i&&at(t).hasChildNodes())throw new S("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.s=new za(e,o||null,i||null),this.w=r||function(){return null};var s=this;this.l=[];var l=this.a[Pf];this.a[Pf]=function(e){if(xf(s,e),"function"==typeof l)l(e);else if("string"==typeof l){var t=Or(l,u);"function"==typeof t&&t(e)}};var c=this.a[Of];this.a[Of]=function(){if(xf(s,null),"function"==typeof c)c();else if("string"==typeof c){var e=Or(c,u);"function"==typeof e&&e()}}}var Pf="callback",Of="expired-callback",If="sitekey",kf="size";function xf(e,t){for(var n=0;n<e.l.length;n++)try{e.l[n](t)}catch(e){}}function Af(e,t){return e.h.push(t),t.ma((function(){Q(e.h,t)})),t}function Df(e){if(e.D)throw new S("internal-error","RecaptchaVerifier instance has been destroyed.")}function Nf(e,t,n){var i=!1;try{this.b=n||r.a.app()}catch(e){throw new S("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new S("invalid-api-key");n=this.b.options.apiKey;var o=this,a=null;try{a=this.b.auth().Ea()}catch(e){}try{i=this.b.auth().settings.appVerificationDisabledForTesting}catch(e){}a=r.a.SDK_VERSION?Sr(r.a.SDK_VERSION,a):null,Sf.call(this,n,e,t,(function(){try{var e=o.b.auth().ja()}catch(t){e=null}return e}),a,A(O),i)}function Rf(e,t,n,r){e:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,a=0;a<t.length;a++)if(t[a].optional)o=!0;else{if(o)throw new S("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=t.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=t[i].optional&&void 0===n[i],!t[i].K(n[i])&&!o){if(t=t[i],0>i||i>=Mf.length)throw new S("internal-error","Argument validator received an unsupported number of arguments.");n=Mf[i],r=(r?"":n+" argument ")+(t.name?'"'+t.name+'" ':"")+"must be "+t.J+".";break e}r=null}}if(r)throw new S("argument-error",e+" failed: "+r)}(t=Sf.prototype).Ga=function(){var e=this;return this.f?this.f:this.f=Af(this,Ot().then((function(){if(xr()&&!gr())return vr();throw new S("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return e.m.g(e.w())})).then((function(t){return e.g=t,Js(e.s,Ms,{})})).then((function(t){e.a[If]=t.recaptchaSiteKey})).o((function(t){throw e.f=null,t})))},t.render=function(){Df(this);var e=this;return Af(this,this.Ga().then((function(){if(null===e.c){var t=e.u;if(!e.i){var n=at(t);t=function(e,t,n){var r=arguments,i=document,o=String(r[0]),a=r[1];if(!ot&&a&&(a.name||a.type)){if(o=["<",o],a.name&&o.push(' name="',He(a.name),'"'),a.type){o.push(' type="',He(a.type),'"');var s={};_e(s,a),delete s.type,a=s}o.push(">"),o=o.join("")}return o=ht(i,o),a&&("string"==typeof a?o.className=a:Array.isArray(a)?o.className=a.join(" "):st(o,a)),2<r.length&&ft(i,o,r),o}("DIV"),n.appendChild(t)}e.c=e.g.render(t,e.a)}return e.c})))},t.verify=function(){Df(this);var e=this;return Af(this,this.render().then((function(t){return new bt((function(n){var r=e.g.getResponse(t);if(r)n(r);else{var i=function(t){t&&(function(e,t){Y(e.l,(function(e){return e==t}))}(e,i),n(t))};e.l.push(i),e.i&&e.g.execute(e.c)}}))})))},t.reset=function(){Df(this),null!==this.c&&this.g.reset(this.c)},t.clear=function(){Df(this),this.D=!0,this.m.c();for(var e=0;e<this.h.length;e++)this.h[e].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){e=at(this.u);for(var t;t=e.firstChild;)e.removeChild(t)}},C(Nf,Sf);var Mf="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function Lf(e,t){return{name:e||"",J:"a valid string",optional:!!t,K:function(e){return"string"==typeof e}}}function Ff(e,t){return{name:e||"",J:"a boolean",optional:!!t,K:function(e){return"boolean"==typeof e}}}function jf(e,t){return{name:e||"",J:"a valid object",optional:!!t,K:v}}function Uf(e,t){return{name:e||"",J:"a function",optional:!!t,K:d}}function Wf(e,t){return{name:e||"",J:"null",optional:!!t,K:function(e){return null===e}}}function Bf(e){return{name:e?e+"Credential":"credential",J:e?"a valid "+e+" credential":"a valid credential",optional:!1,K:function(t){if(!t)return!1;var n=!e||t.providerId===e;return!(!t.ia||!n)}}}function Hf(e,t){return v(e)&&"string"==typeof e.type&&e.type===t&&d(e.Fa)}function Kf(e){return v(e)&&"string"==typeof e.uid}function Vf(){return{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(e){return!(!e||"string"!=typeof e.type||!d(e.verify))}}}function Gf(e,t,n,r){return{name:n||"",J:e.J+" or "+t.J,optional:!!r,K:function(n){return e.K(n)||t.K(n)}}}function qf(e,t){for(var n in t){var r=t[n].name;e[r]=Yf(r,e[n],t[n].j)}}function zf(e,t){for(var n in t){var r=t[n].name;r!==n&&Object.defineProperty(e,r,{get:E((function(e){return this[e]}),n),set:E((function(e,t,n,r){Rf(e,[n],[r],!0),this[t]=r}),r,n,t[n].gb),enumerable:!0})}}function Qf(e,t,n,r){e[t]=Yf(t,n,r)}function Yf(e,t,n){function r(){var e=Array.prototype.slice.call(arguments);return Rf(o,n,e),t.apply(this,e)}if(!n)return t;var i,o=function(e){return(e=e.split("."))[e.length-1]}(e);for(i in t)r[i]=t[i];for(i in t.prototype)r.prototype[i]=t.prototype[i];return r}qf(Xc.prototype,{fb:{name:"applyActionCode",j:[Lf("code")]},Pa:{name:"checkActionCode",j:[Lf("code")]},jb:{name:"confirmPasswordReset",j:[Lf("code"),Lf("newPassword")]},cc:{name:"createUserWithEmailAndPassword",j:[Lf("email"),Lf("password")]},fc:{name:"fetchSignInMethodsForEmail",j:[Lf("email")]},pa:{name:"getRedirectResult",j:[]},zc:{name:"isSignInWithEmailLink",j:[Lf("emailLink")]},Fc:{name:"onAuthStateChanged",j:[Gf(jf(),Uf(),"nextOrObserver"),Uf("opt_error",!0),Uf("opt_completed",!0)]},Gc:{name:"onIdTokenChanged",j:[Gf(jf(),Uf(),"nextOrObserver"),Uf("opt_error",!0),Uf("opt_completed",!0)]},rb:{name:"sendPasswordResetEmail",j:[Lf("email"),Gf(jf("opt_actionCodeSettings",!0),Wf(null,!0),"opt_actionCodeSettings",!0)]},sb:{name:"sendSignInLinkToEmail",j:[Lf("email"),jf("actionCodeSettings")]},tb:{name:"setPersistence",j:[Lf("persistence")]},Qc:{name:"signInAndRetrieveDataWithCredential",j:[Bf()]},vb:{name:"signInAnonymously",j:[]},Ya:{name:"signInWithCredential",j:[Bf()]},Rc:{name:"signInWithCustomToken",j:[Lf("token")]},Sc:{name:"signInWithEmailAndPassword",j:[Lf("email"),Lf("password")]},Tc:{name:"signInWithEmailLink",j:[Lf("email"),Lf("emailLink",!0)]},Uc:{name:"signInWithPhoneNumber",j:[Lf("phoneNumber"),Vf()]},Vc:{name:"signInWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Wc:{name:"signInWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},bd:{name:"updateCurrentUser",j:[Gf({name:"user",J:"an instance of Firebase User",optional:!1,K:function(e){return!!(e&&e instanceof hc)}},Wf(),"user")]},wb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[Lf(null,!0)]},dd:{name:"useDeviceLanguage",j:[]},fd:{name:"verifyPasswordResetCode",j:[Lf("code")]}}),zf(Xc.prototype,{lc:{name:"languageCode",gb:Gf(Lf(),Wf(),"languageCode")},ti:{name:"tenantId",gb:Gf(Lf(),Wf(),"tenantId")}}),Xc.Persistence=zu,Xc.Persistence.LOCAL="local",Xc.Persistence.SESSION="session",Xc.Persistence.NONE="none",qf(hc.prototype,{delete:{name:"delete",j:[]},mc:{name:"getIdTokenResult",j:[Ff("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[Ff("opt_forceRefresh",!0)]},Ac:{name:"linkAndRetrieveDataWithCredential",j:[Bf()]},mb:{name:"linkWithCredential",j:[Bf()]},Bc:{name:"linkWithPhoneNumber",j:[Lf("phoneNumber"),Vf()]},Cc:{name:"linkWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Dc:{name:"linkWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Jc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Bf()]},pb:{name:"reauthenticateWithCredential",j:[Bf()]},Kc:{name:"reauthenticateWithPhoneNumber",j:[Lf("phoneNumber"),Vf()]},Lc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Mc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},qb:{name:"sendEmailVerification",j:[Gf(jf("opt_actionCodeSettings",!0),Wf(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[Lf(null,!0)]},ad:{name:"unlink",j:[Lf("provider")]},xb:{name:"updateEmail",j:[Lf("email")]},yb:{name:"updatePassword",j:[Lf("password")]},cd:{name:"updatePhoneNumber",j:[Bf("phone")]},zb:{name:"updateProfile",j:[jf("profile")]},Ab:{name:"verifyBeforeUpdateEmail",j:[Lf("email"),Gf(jf("opt_actionCodeSettings",!0),Wf(null,!0),"opt_actionCodeSettings",!0)]}}),qf(hf.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),qf(ff.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),qf(bt.prototype,{ma:{name:"finally"},o:{name:"catch"},then:{name:"then"}}),zf(Vl.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",gb:Ff("appVerificationDisabledForTesting")}}),qf(Gl.prototype,{confirm:{name:"confirm",j:[Lf("verificationCode")]}}),Qf(ao,"fromJSON",(function(e){e="string"==typeof e?JSON.parse(e):e;for(var t,n=[po,Oo,Do,co],r=0;r<n.length;r++)if(t=n[r](e))return t;return null}),[Gf(Lf(),jf(),"json")]),Qf(Io,"credential",(function(e,t){return new Po(e,t)}),[Lf("email"),Lf("password")]),qf(Po.prototype,{v:{name:"toJSON",j:[Lf(null,!0)]}}),qf(go.prototype,{Aa:{name:"addScope",j:[Lf("scope")]},Ia:{name:"setCustomParameters",j:[jf("customOAuthParameters")]}}),Qf(go,"credential",mo,[Gf(Lf(),jf(),"token")]),Qf(Io,"credentialWithLink",ko,[Lf("email"),Lf("emailLink")]),qf(bo.prototype,{Aa:{name:"addScope",j:[Lf("scope")]},Ia:{name:"setCustomParameters",j:[jf("customOAuthParameters")]}}),Qf(bo,"credential",wo,[Gf(Lf(),jf(),"token")]),qf(Eo.prototype,{Aa:{name:"addScope",j:[Lf("scope")]},Ia:{name:"setCustomParameters",j:[jf("customOAuthParameters")]}}),Qf(Eo,"credential",To,[Gf(Lf(),Gf(jf(),Wf()),"idToken"),Gf(Lf(),Wf(),"accessToken",!0)]),qf(Co.prototype,{Ia:{name:"setCustomParameters",j:[jf("customOAuthParameters")]}}),Qf(Co,"credential",So,[Gf(Lf(),jf(),"token"),Lf("secret",!0)]),qf(yo.prototype,{Aa:{name:"addScope",j:[Lf("scope")]},credential:{name:"credential",j:[Gf(Lf(),Gf(jf(),Wf()),"optionsOrIdToken"),Gf(Lf(),Wf(),"accessToken",!0)]},Ia:{name:"setCustomParameters",j:[jf("customOAuthParameters")]}}),qf(fo.prototype,{v:{name:"toJSON",j:[Lf(null,!0)]}}),qf(uo.prototype,{v:{name:"toJSON",j:[Lf(null,!0)]}}),Qf(Ro,"credential",Mo,[Lf("verificationId"),Lf("verificationCode")]),qf(Ro.prototype,{cb:{name:"verifyPhoneNumber",j:[Gf(Lf(),{name:"phoneInfoOptions",J:"valid phone info options",optional:!1,K:function(e){return!!e&&(e.session&&e.phoneNumber?Hf(e.session,io)&&"string"==typeof e.phoneNumber:e.session&&e.multiFactorHint?Hf(e.session,oo)&&Kf(e.multiFactorHint):e.session&&e.multiFactorUid?Hf(e.session,oo)&&"string"==typeof e.multiFactorUid:!!e.phoneNumber&&"string"==typeof e.phoneNumber)}},"phoneInfoOptions"),Vf()]}}),qf(Ao.prototype,{v:{name:"toJSON",j:[Lf(null,!0)]}}),qf(S.prototype,{toJSON:{name:"toJSON",j:[Lf(null,!0)]}}),qf(Vo.prototype,{toJSON:{name:"toJSON",j:[Lf(null,!0)]}}),qf(Ko.prototype,{toJSON:{name:"toJSON",j:[Lf(null,!0)]}}),qf(Xl.prototype,{toJSON:{name:"toJSON",j:[Lf(null,!0)]}}),qf(Ql.prototype,{Pc:{name:"resolveSignIn",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(e){return!!e&&!!e.ob}}]}}),qf(rc.prototype,{Ob:{name:"getSession",j:[]},dc:{name:"enroll",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(e){return!!e&&!!e.ob}},Lf("displayName",!0)]},$c:{name:"unenroll",j:[Gf({name:"multiFactorInfo",J:"a valid multiFactorInfo",optional:!1,K:Kf},Lf(),"multiFactorInfoIdentifier")]}}),qf(Nf.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),Qf(gi,"parseLink",Pi,[Lf("link")]),Qf(gf,"assertion",(function(e){return new tc(e)}),[Bf("phone")]),function(){if(void 0===r.a||!r.a.INTERNAL||!r.a.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var e={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:ai,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:oi,VERIFY_AND_CHANGE_EMAIL:si,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:Xc,AuthCredential:ao,Error:S};Qf(e,"EmailAuthProvider",Io,[]),Qf(e,"FacebookAuthProvider",go,[]),Qf(e,"GithubAuthProvider",bo,[]),Qf(e,"GoogleAuthProvider",Eo,[]),Qf(e,"TwitterAuthProvider",Co,[]),Qf(e,"OAuthProvider",yo,[Lf("providerId")]),Qf(e,"SAMLAuthProvider",_o,[Lf("providerId")]),Qf(e,"PhoneAuthProvider",Ro,[{name:"auth",J:"an instance of Firebase Auth",optional:!0,K:function(e){return!!(e&&e instanceof Xc)}}]),Qf(e,"RecaptchaVerifier",Nf,[Gf(Lf(),{name:"",J:"an HTML element",optional:!1,K:function(e){return!!(e&&e instanceof Element)}},"recaptchaContainer"),jf("recaptchaParameters",!0),{name:"app",J:"an instance of Firebase App",optional:!0,K:function(e){return!!(e&&e instanceof r.a.app.App)}}]),Qf(e,"ActionCodeURL",gi,[]),Qf(e,"PhoneMultiFactorGenerator",gf,[]),r.a.INTERNAL.registerComponent({name:"auth",instanceFactory:function(e){return new Xc(e=e.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:e,instantiationMode:"LAZY",type:"PUBLIC"}),r.a.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(e){return{getUid:w((e=e.getProvider("auth").getImmediate()).getUid,e),getToken:w(e.kc,e),addAuthTokenListener:w(e.bc,e),removeAuthTokenListener:w(e.Nc,e)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),r.a.registerVersion("@firebase/auth","0.14.6"),r.a.INTERNAL.extendNamespace({User:hc})}()}).apply(void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}).call(this,n(57))},function(e,t,n){var r=n(100),i=n(370);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){(t=n(101)(!1)).push([e.i,"nav {\r\n\tposition: -webkit-sticky;\r\n\tposition: sticky;\r\n\tmargin: 0;\r\n\ttop: 0;\r\n\twidth: 100%;\r\n\theight: 6.77vh;\r\n\tbackground: rgb(128, 223, 32);\r\n\tdisplay: flex;\r\n\tz-index: 999;\r\n}\r\n.nav-container {\r\n\tposition: relative;\r\n\theight: 100%;\r\n\twidth: 20%;\r\n\tborder: none;\r\n\tborder-right: black solid 1px;\r\n}\r\n.nav-container:focus { \r\n\toutline-color: limegreen; \r\n\toutline-width: 2px; \r\n}\r\n.nav-btn, #languages > button.lang {\r\n\tposition: relative;\r\n\twidth: 100%;\r\n\tline-height: 6.77vh;\r\n\tfont-size: 2.1vw;\r\n\ttext-align: center;\r\n\tborder: none;\r\n}\r\n.nav-btn {\r\n\tbackground: linear-gradient(to right, rgb(128, 223, 32), rgb(191, 255, 0), rgb(128, 223, 32));\r\n\theight: 100%;\r\n}\r\n#languages {\r\n\tposition: relative;\r\n\twidth: 100%;\r\n\theight: 200%;\r\n\tborder-right: black solid 1px;\r\n\tborder-bottom: black solid 1px;\r\n\tz-index: 999;\r\n}\r\n#languages > button.lang {\r\n\theight: 50%;\r\n\tborder-top: black solid 1px;\r\n\tbackground-color: rgb(191, 255, 0);\r\n}",""]),e.exports=t},function(e,t,n){var r=n(100),i=n(372);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){(t=n(101)(!1)).push([e.i,".game-panel-container {\r\n    position: relative;\r\n    width: 50%;\r\n    display: inline-block;\r\n    padding-bottom: 50%;\r\n}\r\n\r\n.game-panel {\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n}\r\n\r\n.game-messages {\r\n    position: absolute;\r\n    width: 80%;\r\n    height: 80%;\r\n    left: 2%;\r\n    top: 2vh;\r\n    bottom: 2vh;\r\n    display: inline-block;\r\n}\r\n\r\n.game-messages > div.message {\r\n    position: relative;\r\n    text-align: center;\r\n    margin-top: 50%;\r\n    transform: translateY(-50%);\r\n}\r\n\r\n.game-svg {\r\n    position: absolute;\r\n    width: 80%;\r\n    height: 80%;\r\n\tbackground-color: silver;\r\n\tleft: 2%;\r\n    top: 2vh;\r\n\tbottom: 2vh;\r\n\tdisplay: inline-block;\r\n}\r\n\r\n.game-tools {\r\n    position: absolute;\r\n    width: 8%;\r\n    height: 80%;\r\n    top: 2vh;\r\n    left: 82%;\r\n    bottom: 2vh;\r\n}\r\n\r\n.g-tool {\r\n    position: relative;\r\n    box-sizing: border-box;\r\n    width: 100%;\r\n    height: 10%;\r\n    text-align: center;\r\n    font-weight: bolder;\r\n    color: black;\r\n    border: black solid 0.02em;\r\n}\r\n\r\n.gtools-group {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 20%;\r\n    margin-bottom: 400%;\r\n}\r\n.gtools-group > .g-tool {\r\n    height: 50%;\r\n}\r\n\r\n.g-tool>svg {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n}\r\n.g-tool.A { background: linear-gradient(to bottom, #99ff99 2%, #12e912 50%, #10d110 50%, #11c911 88%, #11b411 100%); }\r\n.g-tool.A:hover, .g-tool.A.active { background: linear-gradient(to bottom, #11b411 2%, #11c911 50%, #10d110 50%, #12e912 88%, #99ff99 100%); }\r\n\r\n.g-tool.X { background: linear-gradient(to bottom, #ffad99 2%, #e83c11 50%, #d13610 50%, #ca3612 88%, #b63211 100%); }\r\n.g-tool.X:hover, .g-tool.X.active { background: linear-gradient(to bottom, #b63211 2%, #ca3612 50%, #d13610 50%, #e83c11 88%, #ffad99 100%); }\r\n\r\n.g-tool.R { background: linear-gradient(to bottom, #99c9ff 2%, #1176e8 50%, #106ad1 50%, #1268ca 88%, #115eb6 100%); }\r\n.g-tool.R:hover, .g-tool.R.active { background: linear-gradient(to bottom, #115eb6 2%, #1268ca 50%, #106ad1 50%, #1176e8 88%, #99c9ff 100%); }\r\n\r\n.g-tool.M { background: linear-gradient(to bottom, #fdff99 2%, #e5e811 50%, #dbdf11 50%, #c7ca12 88%, #b3b611 100%); }\r\n.g-tool.M:hover, .g-tool.M.active { background: linear-gradient(to bottom, #b3b611 2%, #c7ca12 50%, #dbdf11 50%, #e5e811 88%, #fdff99 100%);  }\r\n\r\n.g-tool.G { background: linear-gradient(to bottom, #ff99e6 2%, #e811b3 50%, #d110a0 50%, #ca129c 88%, #b6118d 100%); }\r\n.g-tool.G:hover, .g-tool.G.active { background: linear-gradient(to bottom, #b6118d 2%, #ca129c 50%, #d110a0 50%, #e811b3 88%, #ff99e6 100%); }\r\n\r\n.g-tool.H:not(.visible) { border: none; }\r\n.g-tool.H.visible { background: linear-gradient(to bottom, #c038ff 2%, #650b8e 50%, #540977 50%, #500a71 88%, #43095d 100%); }\r\n.g-tool.H.visible:hover { \r\n    background: linear-gradient(to bottom, #43095d  2%, #500a71 50%, #540977 50%, #650b8e 88%, #c038ff 100%);\r\n}\r\n.g-tool.ok {\r\n    position: absolute;\r\n    bottom: 0;\r\n    visibility: hidden;\r\n}\r\n.g-tool.ok.active {\r\n    background: linear-gradient(to bottom, #ee99ff 2%, #c511e8 50%, #b110d1 50%, #ab12ca 88%, #9a11b6 100%);\r\n    visibility: visible;\r\n}\r\n.g-tool.ok:hover {\r\n    background: linear-gradient(to bottom, #9a11b6 2%, #ab12ca 50%, #b110d1 50%, #c511e8 88%, #ee99ff 100%);\r\n    visibility: visible;\r\n}\r\n\r\n.blue-btn { fill: url('#blue'); } .blue-btn:hover { fill: url('#blue-hover'); }\r\n.green-btn { fill: url('#green'); } .green-btn:hover { fill: url('#green-hover'); }\r\n.gold-btn { fill: url('#gold'); } .gold-btn:hover { fill: url('#gold-hover'); }\r\n\r\n.indicator {\r\n    position: absolute;\r\n    top: calc(80% + 2vh);\r\n    height: 4vh;\r\n    right: 18%;\r\n    border-radius: 0 0 15px 0px;\r\n    padding-left: 5px;\r\n    padding-right: 5px;\r\n    background: linear-gradient(to right, hsl(275, 75%, 44%), hsl(240, 100%, 50%));\r\n}\r\n.indicator.btn:-webkit-any(:focus, :hover) {\r\n    background: linear-gradient(to left, hsl(275, 75%, 34%), hsl(240, 100%, 40%));\r\n}\r\n.indicator > span {\r\n    line-height: 4vh;\r\n    color: white;\r\n}",""]),e.exports=t},function(e,t,n){var r=n(100),i=n(374);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){(t=n(101)(!1)).push([e.i,".private-container {\r\n    width: 100%;\r\n    height: 70vh;\r\n}\r\n\r\n.start-new-container {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 10.5vh;\r\n    margin-top: 10vh;\r\n    margin-bottom: 5vh;\r\n}\r\n\r\n.code-container {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 7vh;\r\n}\r\n\r\n.start-new-btn {\r\n    width: 80%;\r\n    height: 9.5vh;\r\n    margin: 0.5vh 0% 0.5vh 10%;\r\n}\r\n\r\n.input-container {\r\n    width: 50%;\r\n    height: 100%;\r\n    margin-left: 10%;\r\n    margin-right: 10%;\r\n    float: left;\r\n}\r\ninput.code {\r\n    position: relative;\r\n    width: 100%;\r\n    height: calc(100%-4.2vh);\r\n    margin-top: 2.1vh;\r\n    margin-bottom: 2.1vh;\r\n}\r\nbutton.go {\r\n    width: 20%;\r\n    height: 100%;\r\n}\r\n\r\n/* 10 50 10 20 10 */",""]),e.exports=t}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,